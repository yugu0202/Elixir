(() => {
  var __create = Object.create;
  var __defProp = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames = Object.getOwnPropertyNames;
  var __getOwnPropSymbols = Object.getOwnPropertySymbols;
  var __getProtoOf = Object.getPrototypeOf;
  var __hasOwnProp = Object.prototype.hasOwnProperty;
  var __propIsEnum = Object.prototype.propertyIsEnumerable;
  var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
  var __spreadValues = (a, b) => {
    for (var prop in b || (b = {}))
      if (__hasOwnProp.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    if (__getOwnPropSymbols)
      for (var prop of __getOwnPropSymbols(b)) {
        if (__propIsEnum.call(b, prop))
          __defNormalProp(a, prop, b[prop]);
      }
    return a;
  };
  var __objRest = (source, exclude) => {
    var target = {};
    for (var prop in source)
      if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
        target[prop] = source[prop];
    if (source != null && __getOwnPropSymbols)
      for (var prop of __getOwnPropSymbols(source)) {
        if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
          target[prop] = source[prop];
      }
    return target;
  };
  var __commonJS = (cb, mod) => function __require() {
    return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
  };
  var __copyProps = (to, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
      for (let key of __getOwnPropNames(from))
        if (!__hasOwnProp.call(to, key) && key !== except)
          __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
    }
    return to;
  };
  var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
    // If the importer is in node compatibility mode or this is not an ESM
    // file that has been converted to a CommonJS file using a Babel-
    // compatible transform (i.e. "__esModule" has not been set), then set
    // "default" to the CommonJS "module.exports" for node compatibility.
    isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
    mod
  ));

  // vendor/topbar.js
  var require_topbar = __commonJS({
    "vendor/topbar.js"(exports, module) {
      (function(window2, document2) {
        "use strict";
        (function() {
          var lastTime = 0;
          var vendors = ["ms", "moz", "webkit", "o"];
          for (var x = 0; x < vendors.length && !window2.requestAnimationFrame; ++x) {
            window2.requestAnimationFrame = window2[vendors[x] + "RequestAnimationFrame"];
            window2.cancelAnimationFrame = window2[vendors[x] + "CancelAnimationFrame"] || window2[vendors[x] + "CancelRequestAnimationFrame"];
          }
          if (!window2.requestAnimationFrame)
            window2.requestAnimationFrame = function(callback, element) {
              var currTime = (/* @__PURE__ */ new Date()).getTime();
              var timeToCall = Math.max(0, 16 - (currTime - lastTime));
              var id = window2.setTimeout(function() {
                callback(currTime + timeToCall);
              }, timeToCall);
              lastTime = currTime + timeToCall;
              return id;
            };
          if (!window2.cancelAnimationFrame)
            window2.cancelAnimationFrame = function(id) {
              clearTimeout(id);
            };
        })();
        var canvas, currentProgress, showing, progressTimerId = null, fadeTimerId = null, delayTimerId = null, addEvent = function(elem, type, handler4) {
          if (elem.addEventListener)
            elem.addEventListener(type, handler4, false);
          else if (elem.attachEvent)
            elem.attachEvent("on" + type, handler4);
          else
            elem["on" + type] = handler4;
        }, options = {
          autoRun: true,
          barThickness: 3,
          barColors: {
            0: "rgba(26,  188, 156, .9)",
            ".25": "rgba(52,  152, 219, .9)",
            ".50": "rgba(241, 196, 15,  .9)",
            ".75": "rgba(230, 126, 34,  .9)",
            "1.0": "rgba(211, 84,  0,   .9)"
          },
          shadowBlur: 10,
          shadowColor: "rgba(0,   0,   0,   .6)",
          className: null
        }, repaint = function() {
          canvas.width = window2.innerWidth;
          canvas.height = options.barThickness * 5;
          var ctx = canvas.getContext("2d");
          ctx.shadowBlur = options.shadowBlur;
          ctx.shadowColor = options.shadowColor;
          var lineGradient = ctx.createLinearGradient(0, 0, canvas.width, 0);
          for (var stop2 in options.barColors)
            lineGradient.addColorStop(stop2, options.barColors[stop2]);
          ctx.lineWidth = options.barThickness;
          ctx.beginPath();
          ctx.moveTo(0, options.barThickness / 2);
          ctx.lineTo(
            Math.ceil(currentProgress * canvas.width),
            options.barThickness / 2
          );
          ctx.strokeStyle = lineGradient;
          ctx.stroke();
        }, createCanvas = function() {
          canvas = document2.createElement("canvas");
          var style = canvas.style;
          style.position = "fixed";
          style.top = style.left = style.right = style.margin = style.padding = 0;
          style.zIndex = 100001;
          style.display = "none";
          if (options.className)
            canvas.classList.add(options.className);
          document2.body.appendChild(canvas);
          addEvent(window2, "resize", repaint);
        }, topbar2 = {
          config: function(opts) {
            for (var key in opts)
              if (options.hasOwnProperty(key))
                options[key] = opts[key];
          },
          show: function(delay) {
            if (showing)
              return;
            if (delay) {
              if (delayTimerId)
                return;
              delayTimerId = setTimeout(() => topbar2.show(), delay);
            } else {
              showing = true;
              if (fadeTimerId !== null)
                window2.cancelAnimationFrame(fadeTimerId);
              if (!canvas)
                createCanvas();
              canvas.style.opacity = 1;
              canvas.style.display = "block";
              topbar2.progress(0);
              if (options.autoRun) {
                (function loop2() {
                  progressTimerId = window2.requestAnimationFrame(loop2);
                  topbar2.progress(
                    "+" + 0.05 * Math.pow(1 - Math.sqrt(currentProgress), 2)
                  );
                })();
              }
            }
          },
          progress: function(to) {
            if (typeof to === "undefined")
              return currentProgress;
            if (typeof to === "string") {
              to = (to.indexOf("+") >= 0 || to.indexOf("-") >= 0 ? currentProgress : 0) + parseFloat(to);
            }
            currentProgress = to > 1 ? 1 : to;
            repaint();
            return currentProgress;
          },
          hide: function() {
            clearTimeout(delayTimerId);
            delayTimerId = null;
            if (!showing)
              return;
            showing = false;
            if (progressTimerId != null) {
              window2.cancelAnimationFrame(progressTimerId);
              progressTimerId = null;
            }
            (function loop2() {
              if (topbar2.progress("+.1") >= 1) {
                canvas.style.opacity -= 0.05;
                if (canvas.style.opacity <= 0.05) {
                  canvas.style.display = "none";
                  fadeTimerId = null;
                  return;
                }
              }
              fadeTimerId = window2.requestAnimationFrame(loop2);
            })();
          }
        };
        if (typeof module === "object" && typeof module.exports === "object") {
          module.exports = topbar2;
        } else if (typeof define === "function" && define.amd) {
          define(function() {
            return topbar2;
          });
        } else {
          this.topbar = topbar2;
        }
      }).call(exports, window, document);
    }
  });

  // ../deps/phoenix/priv/static/phoenix.mjs
  var closure = (value) => {
    if (typeof value === "function") {
      return value;
    } else {
      let closure22 = function() {
        return value;
      };
      return closure22;
    }
  };
  var globalSelf = typeof self !== "undefined" ? self : null;
  var phxWindow = typeof window !== "undefined" ? window : null;
  var global = globalSelf || phxWindow || global;
  var DEFAULT_VSN = "2.0.0";
  var SOCKET_STATES = { connecting: 0, open: 1, closing: 2, closed: 3 };
  var DEFAULT_TIMEOUT = 1e4;
  var WS_CLOSE_NORMAL = 1e3;
  var CHANNEL_STATES = {
    closed: "closed",
    errored: "errored",
    joined: "joined",
    joining: "joining",
    leaving: "leaving"
  };
  var CHANNEL_EVENTS = {
    close: "phx_close",
    error: "phx_error",
    join: "phx_join",
    reply: "phx_reply",
    leave: "phx_leave"
  };
  var TRANSPORTS = {
    longpoll: "longpoll",
    websocket: "websocket"
  };
  var XHR_STATES = {
    complete: 4
  };
  var Push = class {
    constructor(channel2, event, payload, timeout) {
      this.channel = channel2;
      this.event = event;
      this.payload = payload || function() {
        return {};
      };
      this.receivedResp = null;
      this.timeout = timeout;
      this.timeoutTimer = null;
      this.recHooks = [];
      this.sent = false;
    }
    resend(timeout) {
      this.timeout = timeout;
      this.reset();
      this.send();
    }
    send() {
      if (this.hasReceived("timeout")) {
        return;
      }
      this.startTimeout();
      this.sent = true;
      this.channel.socket.push({
        topic: this.channel.topic,
        event: this.event,
        payload: this.payload(),
        ref: this.ref,
        join_ref: this.channel.joinRef()
      });
    }
    receive(status, callback) {
      if (this.hasReceived(status)) {
        callback(this.receivedResp.response);
      }
      this.recHooks.push({ status, callback });
      return this;
    }
    reset() {
      this.cancelRefEvent();
      this.ref = null;
      this.refEvent = null;
      this.receivedResp = null;
      this.sent = false;
    }
    matchReceive({ status, response, _ref }) {
      this.recHooks.filter((h) => h.status === status).forEach((h) => h.callback(response));
    }
    cancelRefEvent() {
      if (!this.refEvent) {
        return;
      }
      this.channel.off(this.refEvent);
    }
    cancelTimeout() {
      clearTimeout(this.timeoutTimer);
      this.timeoutTimer = null;
    }
    startTimeout() {
      if (this.timeoutTimer) {
        this.cancelTimeout();
      }
      this.ref = this.channel.socket.makeRef();
      this.refEvent = this.channel.replyEventName(this.ref);
      this.channel.on(this.refEvent, (payload) => {
        this.cancelRefEvent();
        this.cancelTimeout();
        this.receivedResp = payload;
        this.matchReceive(payload);
      });
      this.timeoutTimer = setTimeout(() => {
        this.trigger("timeout", {});
      }, this.timeout);
    }
    hasReceived(status) {
      return this.receivedResp && this.receivedResp.status === status;
    }
    trigger(status, response) {
      this.channel.trigger(this.refEvent, { status, response });
    }
  };
  var Timer = class {
    constructor(callback, timerCalc) {
      this.callback = callback;
      this.timerCalc = timerCalc;
      this.timer = null;
      this.tries = 0;
    }
    reset() {
      this.tries = 0;
      clearTimeout(this.timer);
    }
    scheduleTimeout() {
      clearTimeout(this.timer);
      this.timer = setTimeout(() => {
        this.tries = this.tries + 1;
        this.callback();
      }, this.timerCalc(this.tries + 1));
    }
  };
  var Channel = class {
    constructor(topic, params, socket2) {
      this.state = CHANNEL_STATES.closed;
      this.topic = topic;
      this.params = closure(params || {});
      this.socket = socket2;
      this.bindings = [];
      this.bindingRef = 0;
      this.timeout = this.socket.timeout;
      this.joinedOnce = false;
      this.joinPush = new Push(this, CHANNEL_EVENTS.join, this.params, this.timeout);
      this.pushBuffer = [];
      this.stateChangeRefs = [];
      this.rejoinTimer = new Timer(() => {
        if (this.socket.isConnected()) {
          this.rejoin();
        }
      }, this.socket.rejoinAfterMs);
      this.stateChangeRefs.push(this.socket.onError(() => this.rejoinTimer.reset()));
      this.stateChangeRefs.push(this.socket.onOpen(() => {
        this.rejoinTimer.reset();
        if (this.isErrored()) {
          this.rejoin();
        }
      }));
      this.joinPush.receive("ok", () => {
        this.state = CHANNEL_STATES.joined;
        this.rejoinTimer.reset();
        this.pushBuffer.forEach((pushEvent) => pushEvent.send());
        this.pushBuffer = [];
      });
      this.joinPush.receive("error", () => {
        this.state = CHANNEL_STATES.errored;
        if (this.socket.isConnected()) {
          this.rejoinTimer.scheduleTimeout();
        }
      });
      this.onClose(() => {
        this.rejoinTimer.reset();
        if (this.socket.hasLogger())
          this.socket.log("channel", `close ${this.topic} ${this.joinRef()}`);
        this.state = CHANNEL_STATES.closed;
        this.socket.remove(this);
      });
      this.onError((reason) => {
        if (this.socket.hasLogger())
          this.socket.log("channel", `error ${this.topic}`, reason);
        if (this.isJoining()) {
          this.joinPush.reset();
        }
        this.state = CHANNEL_STATES.errored;
        if (this.socket.isConnected()) {
          this.rejoinTimer.scheduleTimeout();
        }
      });
      this.joinPush.receive("timeout", () => {
        if (this.socket.hasLogger())
          this.socket.log("channel", `timeout ${this.topic} (${this.joinRef()})`, this.joinPush.timeout);
        let leavePush = new Push(this, CHANNEL_EVENTS.leave, closure({}), this.timeout);
        leavePush.send();
        this.state = CHANNEL_STATES.errored;
        this.joinPush.reset();
        if (this.socket.isConnected()) {
          this.rejoinTimer.scheduleTimeout();
        }
      });
      this.on(CHANNEL_EVENTS.reply, (payload, ref) => {
        this.trigger(this.replyEventName(ref), payload);
      });
    }
    join(timeout = this.timeout) {
      if (this.joinedOnce) {
        throw new Error("tried to join multiple times. 'join' can only be called a single time per channel instance");
      } else {
        this.timeout = timeout;
        this.joinedOnce = true;
        this.rejoin();
        return this.joinPush;
      }
    }
    onClose(callback) {
      this.on(CHANNEL_EVENTS.close, callback);
    }
    onError(callback) {
      return this.on(CHANNEL_EVENTS.error, (reason) => callback(reason));
    }
    on(event, callback) {
      let ref = this.bindingRef++;
      this.bindings.push({ event, ref, callback });
      return ref;
    }
    off(event, ref) {
      this.bindings = this.bindings.filter((bind3) => {
        return !(bind3.event === event && (typeof ref === "undefined" || ref === bind3.ref));
      });
    }
    canPush() {
      return this.socket.isConnected() && this.isJoined();
    }
    push(event, payload, timeout = this.timeout) {
      payload = payload || {};
      if (!this.joinedOnce) {
        throw new Error(`tried to push '${event}' to '${this.topic}' before joining. Use channel.join() before pushing events`);
      }
      let pushEvent = new Push(this, event, function() {
        return payload;
      }, timeout);
      if (this.canPush()) {
        pushEvent.send();
      } else {
        pushEvent.startTimeout();
        this.pushBuffer.push(pushEvent);
      }
      return pushEvent;
    }
    leave(timeout = this.timeout) {
      this.rejoinTimer.reset();
      this.joinPush.cancelTimeout();
      this.state = CHANNEL_STATES.leaving;
      let onClose = () => {
        if (this.socket.hasLogger())
          this.socket.log("channel", `leave ${this.topic}`);
        this.trigger(CHANNEL_EVENTS.close, "leave");
      };
      let leavePush = new Push(this, CHANNEL_EVENTS.leave, closure({}), timeout);
      leavePush.receive("ok", () => onClose()).receive("timeout", () => onClose());
      leavePush.send();
      if (!this.canPush()) {
        leavePush.trigger("ok", {});
      }
      return leavePush;
    }
    onMessage(_event, payload, _ref) {
      return payload;
    }
    isMember(topic, event, payload, joinRef) {
      if (this.topic !== topic) {
        return false;
      }
      if (joinRef && joinRef !== this.joinRef()) {
        if (this.socket.hasLogger())
          this.socket.log("channel", "dropping outdated message", { topic, event, payload, joinRef });
        return false;
      } else {
        return true;
      }
    }
    joinRef() {
      return this.joinPush.ref;
    }
    rejoin(timeout = this.timeout) {
      if (this.isLeaving()) {
        return;
      }
      this.socket.leaveOpenTopic(this.topic);
      this.state = CHANNEL_STATES.joining;
      this.joinPush.resend(timeout);
    }
    trigger(event, payload, ref, joinRef) {
      let handledPayload = this.onMessage(event, payload, ref, joinRef);
      if (payload && !handledPayload) {
        throw new Error("channel onMessage callbacks must return the payload, modified or unmodified");
      }
      let eventBindings = this.bindings.filter((bind3) => bind3.event === event);
      for (let i = 0; i < eventBindings.length; i++) {
        let bind3 = eventBindings[i];
        bind3.callback(handledPayload, ref, joinRef || this.joinRef());
      }
    }
    replyEventName(ref) {
      return `chan_reply_${ref}`;
    }
    isClosed() {
      return this.state === CHANNEL_STATES.closed;
    }
    isErrored() {
      return this.state === CHANNEL_STATES.errored;
    }
    isJoined() {
      return this.state === CHANNEL_STATES.joined;
    }
    isJoining() {
      return this.state === CHANNEL_STATES.joining;
    }
    isLeaving() {
      return this.state === CHANNEL_STATES.leaving;
    }
  };
  var Ajax = class {
    static request(method, endPoint, accept, body, timeout, ontimeout, callback) {
      if (global.XDomainRequest) {
        let req = new global.XDomainRequest();
        return this.xdomainRequest(req, method, endPoint, body, timeout, ontimeout, callback);
      } else {
        let req = new global.XMLHttpRequest();
        return this.xhrRequest(req, method, endPoint, accept, body, timeout, ontimeout, callback);
      }
    }
    static xdomainRequest(req, method, endPoint, body, timeout, ontimeout, callback) {
      req.timeout = timeout;
      req.open(method, endPoint);
      req.onload = () => {
        let response = this.parseJSON(req.responseText);
        callback && callback(response);
      };
      if (ontimeout) {
        req.ontimeout = ontimeout;
      }
      req.onprogress = () => {
      };
      req.send(body);
      return req;
    }
    static xhrRequest(req, method, endPoint, accept, body, timeout, ontimeout, callback) {
      req.open(method, endPoint, true);
      req.timeout = timeout;
      req.setRequestHeader("Content-Type", accept);
      req.onerror = () => callback && callback(null);
      req.onreadystatechange = () => {
        if (req.readyState === XHR_STATES.complete && callback) {
          let response = this.parseJSON(req.responseText);
          callback(response);
        }
      };
      if (ontimeout) {
        req.ontimeout = ontimeout;
      }
      req.send(body);
      return req;
    }
    static parseJSON(resp) {
      if (!resp || resp === "") {
        return null;
      }
      try {
        return JSON.parse(resp);
      } catch (e) {
        console && console.log("failed to parse JSON response", resp);
        return null;
      }
    }
    static serialize(obj, parentKey) {
      let queryStr = [];
      for (var key in obj) {
        if (!Object.prototype.hasOwnProperty.call(obj, key)) {
          continue;
        }
        let paramKey = parentKey ? `${parentKey}[${key}]` : key;
        let paramVal = obj[key];
        if (typeof paramVal === "object") {
          queryStr.push(this.serialize(paramVal, paramKey));
        } else {
          queryStr.push(encodeURIComponent(paramKey) + "=" + encodeURIComponent(paramVal));
        }
      }
      return queryStr.join("&");
    }
    static appendParams(url, params) {
      if (Object.keys(params).length === 0) {
        return url;
      }
      let prefix2 = url.match(/\?/) ? "&" : "?";
      return `${url}${prefix2}${this.serialize(params)}`;
    }
  };
  var arrayBufferToBase64 = (buffer) => {
    let binary = "";
    let bytes = new Uint8Array(buffer);
    let len = bytes.byteLength;
    for (let i = 0; i < len; i++) {
      binary += String.fromCharCode(bytes[i]);
    }
    return btoa(binary);
  };
  var LongPoll = class {
    constructor(endPoint) {
      this.endPoint = null;
      this.token = null;
      this.skipHeartbeat = true;
      this.reqs = /* @__PURE__ */ new Set();
      this.awaitingBatchAck = false;
      this.currentBatch = null;
      this.currentBatchTimer = null;
      this.batchBuffer = [];
      this.onopen = function() {
      };
      this.onerror = function() {
      };
      this.onmessage = function() {
      };
      this.onclose = function() {
      };
      this.pollEndpoint = this.normalizeEndpoint(endPoint);
      this.readyState = SOCKET_STATES.connecting;
      this.poll();
    }
    normalizeEndpoint(endPoint) {
      return endPoint.replace("ws://", "http://").replace("wss://", "https://").replace(new RegExp("(.*)/" + TRANSPORTS.websocket), "$1/" + TRANSPORTS.longpoll);
    }
    endpointURL() {
      return Ajax.appendParams(this.pollEndpoint, { token: this.token });
    }
    closeAndRetry(code, reason, wasClean) {
      this.close(code, reason, wasClean);
      this.readyState = SOCKET_STATES.connecting;
    }
    ontimeout() {
      this.onerror("timeout");
      this.closeAndRetry(1005, "timeout", false);
    }
    isActive() {
      return this.readyState === SOCKET_STATES.open || this.readyState === SOCKET_STATES.connecting;
    }
    poll() {
      this.ajax("GET", "application/json", null, () => this.ontimeout(), (resp) => {
        if (resp) {
          var { status, token, messages } = resp;
          this.token = token;
        } else {
          status = 0;
        }
        switch (status) {
          case 200:
            messages.forEach((msg) => {
              setTimeout(() => this.onmessage({ data: msg }), 0);
            });
            this.poll();
            break;
          case 204:
            this.poll();
            break;
          case 410:
            this.readyState = SOCKET_STATES.open;
            this.onopen({});
            this.poll();
            break;
          case 403:
            this.onerror(403);
            this.close(1008, "forbidden", false);
            break;
          case 0:
          case 500:
            this.onerror(500);
            this.closeAndRetry(1011, "internal server error", 500);
            break;
          default:
            throw new Error(`unhandled poll status ${status}`);
        }
      });
    }
    send(body) {
      if (typeof body !== "string") {
        body = arrayBufferToBase64(body);
      }
      if (this.currentBatch) {
        this.currentBatch.push(body);
      } else if (this.awaitingBatchAck) {
        this.batchBuffer.push(body);
      } else {
        this.currentBatch = [body];
        this.currentBatchTimer = setTimeout(() => {
          this.batchSend(this.currentBatch);
          this.currentBatch = null;
        }, 0);
      }
    }
    batchSend(messages) {
      this.awaitingBatchAck = true;
      this.ajax("POST", "application/x-ndjson", messages.join("\n"), () => this.onerror("timeout"), (resp) => {
        this.awaitingBatchAck = false;
        if (!resp || resp.status !== 200) {
          this.onerror(resp && resp.status);
          this.closeAndRetry(1011, "internal server error", false);
        } else if (this.batchBuffer.length > 0) {
          this.batchSend(this.batchBuffer);
          this.batchBuffer = [];
        }
      });
    }
    close(code, reason, wasClean) {
      for (let req of this.reqs) {
        req.abort();
      }
      this.readyState = SOCKET_STATES.closed;
      let opts = Object.assign({ code: 1e3, reason: void 0, wasClean: true }, { code, reason, wasClean });
      this.batchBuffer = [];
      clearTimeout(this.currentBatchTimer);
      this.currentBatchTimer = null;
      if (typeof CloseEvent !== "undefined") {
        this.onclose(new CloseEvent("close", opts));
      } else {
        this.onclose(opts);
      }
    }
    ajax(method, contentType, body, onCallerTimeout, callback) {
      let req;
      let ontimeout = () => {
        this.reqs.delete(req);
        onCallerTimeout();
      };
      req = Ajax.request(method, this.endpointURL(), contentType, body, this.timeout, ontimeout, (resp) => {
        this.reqs.delete(req);
        if (this.isActive()) {
          callback(resp);
        }
      });
      this.reqs.add(req);
    }
  };
  var serializer_default = {
    HEADER_LENGTH: 1,
    META_LENGTH: 4,
    KINDS: { push: 0, reply: 1, broadcast: 2 },
    encode(msg, callback) {
      if (msg.payload.constructor === ArrayBuffer) {
        return callback(this.binaryEncode(msg));
      } else {
        let payload = [msg.join_ref, msg.ref, msg.topic, msg.event, msg.payload];
        return callback(JSON.stringify(payload));
      }
    },
    decode(rawPayload, callback) {
      if (rawPayload.constructor === ArrayBuffer) {
        return callback(this.binaryDecode(rawPayload));
      } else {
        let [join_ref, ref, topic, event, payload] = JSON.parse(rawPayload);
        return callback({ join_ref, ref, topic, event, payload });
      }
    },
    binaryEncode(message) {
      let { join_ref, ref, event, topic, payload } = message;
      let metaLength = this.META_LENGTH + join_ref.length + ref.length + topic.length + event.length;
      let header = new ArrayBuffer(this.HEADER_LENGTH + metaLength);
      let view = new DataView(header);
      let offset = 0;
      view.setUint8(offset++, this.KINDS.push);
      view.setUint8(offset++, join_ref.length);
      view.setUint8(offset++, ref.length);
      view.setUint8(offset++, topic.length);
      view.setUint8(offset++, event.length);
      Array.from(join_ref, (char) => view.setUint8(offset++, char.charCodeAt(0)));
      Array.from(ref, (char) => view.setUint8(offset++, char.charCodeAt(0)));
      Array.from(topic, (char) => view.setUint8(offset++, char.charCodeAt(0)));
      Array.from(event, (char) => view.setUint8(offset++, char.charCodeAt(0)));
      var combined = new Uint8Array(header.byteLength + payload.byteLength);
      combined.set(new Uint8Array(header), 0);
      combined.set(new Uint8Array(payload), header.byteLength);
      return combined.buffer;
    },
    binaryDecode(buffer) {
      let view = new DataView(buffer);
      let kind = view.getUint8(0);
      let decoder = new TextDecoder();
      switch (kind) {
        case this.KINDS.push:
          return this.decodePush(buffer, view, decoder);
        case this.KINDS.reply:
          return this.decodeReply(buffer, view, decoder);
        case this.KINDS.broadcast:
          return this.decodeBroadcast(buffer, view, decoder);
      }
    },
    decodePush(buffer, view, decoder) {
      let joinRefSize = view.getUint8(1);
      let topicSize = view.getUint8(2);
      let eventSize = view.getUint8(3);
      let offset = this.HEADER_LENGTH + this.META_LENGTH - 1;
      let joinRef = decoder.decode(buffer.slice(offset, offset + joinRefSize));
      offset = offset + joinRefSize;
      let topic = decoder.decode(buffer.slice(offset, offset + topicSize));
      offset = offset + topicSize;
      let event = decoder.decode(buffer.slice(offset, offset + eventSize));
      offset = offset + eventSize;
      let data2 = buffer.slice(offset, buffer.byteLength);
      return { join_ref: joinRef, ref: null, topic, event, payload: data2 };
    },
    decodeReply(buffer, view, decoder) {
      let joinRefSize = view.getUint8(1);
      let refSize = view.getUint8(2);
      let topicSize = view.getUint8(3);
      let eventSize = view.getUint8(4);
      let offset = this.HEADER_LENGTH + this.META_LENGTH;
      let joinRef = decoder.decode(buffer.slice(offset, offset + joinRefSize));
      offset = offset + joinRefSize;
      let ref = decoder.decode(buffer.slice(offset, offset + refSize));
      offset = offset + refSize;
      let topic = decoder.decode(buffer.slice(offset, offset + topicSize));
      offset = offset + topicSize;
      let event = decoder.decode(buffer.slice(offset, offset + eventSize));
      offset = offset + eventSize;
      let data2 = buffer.slice(offset, buffer.byteLength);
      let payload = { status: event, response: data2 };
      return { join_ref: joinRef, ref, topic, event: CHANNEL_EVENTS.reply, payload };
    },
    decodeBroadcast(buffer, view, decoder) {
      let topicSize = view.getUint8(1);
      let eventSize = view.getUint8(2);
      let offset = this.HEADER_LENGTH + 2;
      let topic = decoder.decode(buffer.slice(offset, offset + topicSize));
      offset = offset + topicSize;
      let event = decoder.decode(buffer.slice(offset, offset + eventSize));
      offset = offset + eventSize;
      let data2 = buffer.slice(offset, buffer.byteLength);
      return { join_ref: null, ref: null, topic, event, payload: data2 };
    }
  };
  var Socket = class {
    constructor(endPoint, opts = {}) {
      this.stateChangeCallbacks = { open: [], close: [], error: [], message: [] };
      this.channels = [];
      this.sendBuffer = [];
      this.ref = 0;
      this.timeout = opts.timeout || DEFAULT_TIMEOUT;
      this.transport = opts.transport || global.WebSocket || LongPoll;
      this.establishedConnections = 0;
      this.defaultEncoder = serializer_default.encode.bind(serializer_default);
      this.defaultDecoder = serializer_default.decode.bind(serializer_default);
      this.closeWasClean = false;
      this.binaryType = opts.binaryType || "arraybuffer";
      this.connectClock = 1;
      if (this.transport !== LongPoll) {
        this.encode = opts.encode || this.defaultEncoder;
        this.decode = opts.decode || this.defaultDecoder;
      } else {
        this.encode = this.defaultEncoder;
        this.decode = this.defaultDecoder;
      }
      let awaitingConnectionOnPageShow = null;
      if (phxWindow && phxWindow.addEventListener) {
        phxWindow.addEventListener("pagehide", (_e) => {
          if (this.conn) {
            this.disconnect();
            awaitingConnectionOnPageShow = this.connectClock;
          }
        });
        phxWindow.addEventListener("pageshow", (_e) => {
          if (awaitingConnectionOnPageShow === this.connectClock) {
            awaitingConnectionOnPageShow = null;
            this.connect();
          }
        });
      }
      this.heartbeatIntervalMs = opts.heartbeatIntervalMs || 3e4;
      this.rejoinAfterMs = (tries) => {
        if (opts.rejoinAfterMs) {
          return opts.rejoinAfterMs(tries);
        } else {
          return [1e3, 2e3, 5e3][tries - 1] || 1e4;
        }
      };
      this.reconnectAfterMs = (tries) => {
        if (opts.reconnectAfterMs) {
          return opts.reconnectAfterMs(tries);
        } else {
          return [10, 50, 100, 150, 200, 250, 500, 1e3, 2e3][tries - 1] || 5e3;
        }
      };
      this.logger = opts.logger || null;
      this.longpollerTimeout = opts.longpollerTimeout || 2e4;
      this.params = closure(opts.params || {});
      this.endPoint = `${endPoint}/${TRANSPORTS.websocket}`;
      this.vsn = opts.vsn || DEFAULT_VSN;
      this.heartbeatTimeoutTimer = null;
      this.heartbeatTimer = null;
      this.pendingHeartbeatRef = null;
      this.reconnectTimer = new Timer(() => {
        this.teardown(() => this.connect());
      }, this.reconnectAfterMs);
    }
    getLongPollTransport() {
      return LongPoll;
    }
    replaceTransport(newTransport) {
      this.connectClock++;
      this.closeWasClean = true;
      this.reconnectTimer.reset();
      this.sendBuffer = [];
      if (this.conn) {
        this.conn.close();
        this.conn = null;
      }
      this.transport = newTransport;
    }
    protocol() {
      return location.protocol.match(/^https/) ? "wss" : "ws";
    }
    endPointURL() {
      let uri = Ajax.appendParams(Ajax.appendParams(this.endPoint, this.params()), { vsn: this.vsn });
      if (uri.charAt(0) !== "/") {
        return uri;
      }
      if (uri.charAt(1) === "/") {
        return `${this.protocol()}:${uri}`;
      }
      return `${this.protocol()}://${location.host}${uri}`;
    }
    disconnect(callback, code, reason) {
      this.connectClock++;
      this.closeWasClean = true;
      this.reconnectTimer.reset();
      this.teardown(callback, code, reason);
    }
    connect(params) {
      if (params) {
        console && console.log("passing params to connect is deprecated. Instead pass :params to the Socket constructor");
        this.params = closure(params);
      }
      if (this.conn) {
        return;
      }
      this.connectClock++;
      this.closeWasClean = false;
      this.conn = new this.transport(this.endPointURL());
      this.conn.binaryType = this.binaryType;
      this.conn.timeout = this.longpollerTimeout;
      this.conn.onopen = () => this.onConnOpen();
      this.conn.onerror = (error2) => this.onConnError(error2);
      this.conn.onmessage = (event) => this.onConnMessage(event);
      this.conn.onclose = (event) => this.onConnClose(event);
    }
    log(kind, msg, data2) {
      this.logger(kind, msg, data2);
    }
    hasLogger() {
      return this.logger !== null;
    }
    onOpen(callback) {
      let ref = this.makeRef();
      this.stateChangeCallbacks.open.push([ref, callback]);
      return ref;
    }
    onClose(callback) {
      let ref = this.makeRef();
      this.stateChangeCallbacks.close.push([ref, callback]);
      return ref;
    }
    onError(callback) {
      let ref = this.makeRef();
      this.stateChangeCallbacks.error.push([ref, callback]);
      return ref;
    }
    onMessage(callback) {
      let ref = this.makeRef();
      this.stateChangeCallbacks.message.push([ref, callback]);
      return ref;
    }
    ping(callback) {
      if (!this.isConnected()) {
        return false;
      }
      let ref = this.makeRef();
      let startTime = Date.now();
      this.push({ topic: "phoenix", event: "heartbeat", payload: {}, ref });
      let onMsgRef = this.onMessage((msg) => {
        if (msg.ref === ref) {
          this.off([onMsgRef]);
          callback(Date.now() - startTime);
        }
      });
      return true;
    }
    clearHeartbeats() {
      clearTimeout(this.heartbeatTimer);
      clearTimeout(this.heartbeatTimeoutTimer);
    }
    onConnOpen() {
      if (this.hasLogger())
        this.log("transport", `connected to ${this.endPointURL()}`);
      this.closeWasClean = false;
      this.establishedConnections++;
      this.flushSendBuffer();
      this.reconnectTimer.reset();
      this.resetHeartbeat();
      this.stateChangeCallbacks.open.forEach(([, callback]) => callback());
    }
    heartbeatTimeout() {
      if (this.pendingHeartbeatRef) {
        this.pendingHeartbeatRef = null;
        if (this.hasLogger()) {
          this.log("transport", "heartbeat timeout. Attempting to re-establish connection");
        }
        this.triggerChanError();
        this.closeWasClean = false;
        this.teardown(() => this.reconnectTimer.scheduleTimeout(), WS_CLOSE_NORMAL, "heartbeat timeout");
      }
    }
    resetHeartbeat() {
      if (this.conn && this.conn.skipHeartbeat) {
        return;
      }
      this.pendingHeartbeatRef = null;
      this.clearHeartbeats();
      this.heartbeatTimer = setTimeout(() => this.sendHeartbeat(), this.heartbeatIntervalMs);
    }
    teardown(callback, code, reason) {
      if (!this.conn) {
        return callback && callback();
      }
      this.waitForBufferDone(() => {
        if (this.conn) {
          if (code) {
            this.conn.close(code, reason || "");
          } else {
            this.conn.close();
          }
        }
        this.waitForSocketClosed(() => {
          if (this.conn) {
            this.conn.onopen = function() {
            };
            this.conn.onerror = function() {
            };
            this.conn.onmessage = function() {
            };
            this.conn.onclose = function() {
            };
            this.conn = null;
          }
          callback && callback();
        });
      });
    }
    waitForBufferDone(callback, tries = 1) {
      if (tries === 5 || !this.conn || !this.conn.bufferedAmount) {
        callback();
        return;
      }
      setTimeout(() => {
        this.waitForBufferDone(callback, tries + 1);
      }, 150 * tries);
    }
    waitForSocketClosed(callback, tries = 1) {
      if (tries === 5 || !this.conn || this.conn.readyState === SOCKET_STATES.closed) {
        callback();
        return;
      }
      setTimeout(() => {
        this.waitForSocketClosed(callback, tries + 1);
      }, 150 * tries);
    }
    onConnClose(event) {
      let closeCode = event && event.code;
      if (this.hasLogger())
        this.log("transport", "close", event);
      this.triggerChanError();
      this.clearHeartbeats();
      if (!this.closeWasClean && closeCode !== 1e3) {
        this.reconnectTimer.scheduleTimeout();
      }
      this.stateChangeCallbacks.close.forEach(([, callback]) => callback(event));
    }
    onConnError(error2) {
      if (this.hasLogger())
        this.log("transport", error2);
      let transportBefore = this.transport;
      let establishedBefore = this.establishedConnections;
      this.stateChangeCallbacks.error.forEach(([, callback]) => {
        callback(error2, transportBefore, establishedBefore);
      });
      if (transportBefore === this.transport || establishedBefore > 0) {
        this.triggerChanError();
      }
    }
    triggerChanError() {
      this.channels.forEach((channel2) => {
        if (!(channel2.isErrored() || channel2.isLeaving() || channel2.isClosed())) {
          channel2.trigger(CHANNEL_EVENTS.error);
        }
      });
    }
    connectionState() {
      switch (this.conn && this.conn.readyState) {
        case SOCKET_STATES.connecting:
          return "connecting";
        case SOCKET_STATES.open:
          return "open";
        case SOCKET_STATES.closing:
          return "closing";
        default:
          return "closed";
      }
    }
    isConnected() {
      return this.connectionState() === "open";
    }
    remove(channel2) {
      this.off(channel2.stateChangeRefs);
      this.channels = this.channels.filter((c) => c.joinRef() !== channel2.joinRef());
    }
    off(refs) {
      for (let key in this.stateChangeCallbacks) {
        this.stateChangeCallbacks[key] = this.stateChangeCallbacks[key].filter(([ref]) => {
          return refs.indexOf(ref) === -1;
        });
      }
    }
    channel(topic, chanParams = {}) {
      let chan = new Channel(topic, chanParams, this);
      this.channels.push(chan);
      return chan;
    }
    push(data2) {
      if (this.hasLogger()) {
        let { topic, event, payload, ref, join_ref } = data2;
        this.log("push", `${topic} ${event} (${join_ref}, ${ref})`, payload);
      }
      if (this.isConnected()) {
        this.encode(data2, (result) => this.conn.send(result));
      } else {
        this.sendBuffer.push(() => this.encode(data2, (result) => this.conn.send(result)));
      }
    }
    makeRef() {
      let newRef = this.ref + 1;
      if (newRef === this.ref) {
        this.ref = 0;
      } else {
        this.ref = newRef;
      }
      return this.ref.toString();
    }
    sendHeartbeat() {
      if (this.pendingHeartbeatRef && !this.isConnected()) {
        return;
      }
      this.pendingHeartbeatRef = this.makeRef();
      this.push({ topic: "phoenix", event: "heartbeat", payload: {}, ref: this.pendingHeartbeatRef });
      this.heartbeatTimeoutTimer = setTimeout(() => this.heartbeatTimeout(), this.heartbeatIntervalMs);
    }
    flushSendBuffer() {
      if (this.isConnected() && this.sendBuffer.length > 0) {
        this.sendBuffer.forEach((callback) => callback());
        this.sendBuffer = [];
      }
    }
    onConnMessage(rawMessage) {
      this.decode(rawMessage.data, (msg) => {
        let { topic, event, payload, ref, join_ref } = msg;
        if (ref && ref === this.pendingHeartbeatRef) {
          this.clearHeartbeats();
          this.pendingHeartbeatRef = null;
          this.heartbeatTimer = setTimeout(() => this.sendHeartbeat(), this.heartbeatIntervalMs);
        }
        if (this.hasLogger())
          this.log("receive", `${payload.status || ""} ${topic} ${event} ${ref && "(" + ref + ")" || ""}`, payload);
        for (let i = 0; i < this.channels.length; i++) {
          const channel2 = this.channels[i];
          if (!channel2.isMember(topic, event, payload, join_ref)) {
            continue;
          }
          channel2.trigger(event, payload, ref, join_ref);
        }
        for (let i = 0; i < this.stateChangeCallbacks.message.length; i++) {
          let [, callback] = this.stateChangeCallbacks.message[i];
          callback(msg);
        }
      });
    }
    leaveOpenTopic(topic) {
      let dupChannel = this.channels.find((c) => c.topic === topic && (c.isJoined() || c.isJoining()));
      if (dupChannel) {
        if (this.hasLogger())
          this.log("transport", `leaving duplicate topic "${topic}"`);
        dupChannel.leave();
      }
    }
  };

  // js/client_socket.js
  var socket = new Socket("/client", { params: { token: window.userToken } });
  if (window.userToken) {
    socket.connect();
  }
  var connectButton = document.querySelector("#connect-button");
  var actionInput = document.querySelector("#action-input");
  var callButton = document.querySelector("#call-button");
  var channel = null;
  if (connectButton) {
    connectButton.addEventListener("click", (event) => {
      console.log("connect");
      channel = socket.channel("match:1");
      channel.join().receive("ok", (resp) => {
        console.log("Joined successfully", resp);
      }).receive("error", (resp) => {
        console.log("Unable to join", resp);
      });
      channel.on("result", (payload) => {
        console.log(payload);
      });
      channel.on("ready", (payload) => {
        console.log(payload);
      });
    });
    callButton.addEventListener("click", (event) => {
      console.log("Call button pressed");
      action = actionInput.value;
      actionInput.value = "";
      channel.push("call", { action }).receive("ok", (resp) => {
        console.log(resp);
      });
    });
  }

  // ../deps/phoenix_html/priv/static/phoenix_html.js
  (function() {
    var PolyfillEvent = eventConstructor();
    function eventConstructor() {
      if (typeof window.CustomEvent === "function")
        return window.CustomEvent;
      function CustomEvent2(event, params) {
        params = params || { bubbles: false, cancelable: false, detail: void 0 };
        var evt = document.createEvent("CustomEvent");
        evt.initCustomEvent(event, params.bubbles, params.cancelable, params.detail);
        return evt;
      }
      CustomEvent2.prototype = window.Event.prototype;
      return CustomEvent2;
    }
    function buildHiddenInput(name, value) {
      var input = document.createElement("input");
      input.type = "hidden";
      input.name = name;
      input.value = value;
      return input;
    }
    function handleClick(element, targetModifierKey) {
      var to = element.getAttribute("data-to"), method = buildHiddenInput("_method", element.getAttribute("data-method")), csrf = buildHiddenInput("_csrf_token", element.getAttribute("data-csrf")), form = document.createElement("form"), submit = document.createElement("input"), target = element.getAttribute("target");
      form.method = element.getAttribute("data-method") === "get" ? "get" : "post";
      form.action = to;
      form.style.display = "none";
      if (target)
        form.target = target;
      else if (targetModifierKey)
        form.target = "_blank";
      form.appendChild(csrf);
      form.appendChild(method);
      document.body.appendChild(form);
      submit.type = "submit";
      form.appendChild(submit);
      submit.click();
    }
    window.addEventListener("click", function(e) {
      var element = e.target;
      if (e.defaultPrevented)
        return;
      while (element && element.getAttribute) {
        var phoenixLinkEvent = new PolyfillEvent("phoenix.link.click", {
          "bubbles": true,
          "cancelable": true
        });
        if (!element.dispatchEvent(phoenixLinkEvent)) {
          e.preventDefault();
          e.stopImmediatePropagation();
          return false;
        }
        if (element.getAttribute("data-method")) {
          handleClick(element, e.metaKey || e.shiftKey);
          e.preventDefault();
          return false;
        } else {
          element = element.parentNode;
        }
      }
    }, false);
    window.addEventListener("phoenix.link.click", function(e) {
      var message = e.target.getAttribute("data-confirm");
      if (message && !window.confirm(message)) {
        e.preventDefault();
      }
    }, false);
  })();

  // ../deps/phoenix_live_view/priv/static/phoenix_live_view.esm.js
  var CONSECUTIVE_RELOADS = "consecutive-reloads";
  var MAX_RELOADS = 10;
  var RELOAD_JITTER_MIN = 5e3;
  var RELOAD_JITTER_MAX = 1e4;
  var FAILSAFE_JITTER = 3e4;
  var PHX_EVENT_CLASSES = [
    "phx-click-loading",
    "phx-change-loading",
    "phx-submit-loading",
    "phx-keydown-loading",
    "phx-keyup-loading",
    "phx-blur-loading",
    "phx-focus-loading"
  ];
  var PHX_COMPONENT = "data-phx-component";
  var PHX_LIVE_LINK = "data-phx-link";
  var PHX_TRACK_STATIC = "track-static";
  var PHX_LINK_STATE = "data-phx-link-state";
  var PHX_REF = "data-phx-ref";
  var PHX_REF_SRC = "data-phx-ref-src";
  var PHX_TRACK_UPLOADS = "track-uploads";
  var PHX_UPLOAD_REF = "data-phx-upload-ref";
  var PHX_PREFLIGHTED_REFS = "data-phx-preflighted-refs";
  var PHX_DONE_REFS = "data-phx-done-refs";
  var PHX_DROP_TARGET = "drop-target";
  var PHX_ACTIVE_ENTRY_REFS = "data-phx-active-refs";
  var PHX_LIVE_FILE_UPDATED = "phx:live-file:updated";
  var PHX_SKIP = "data-phx-skip";
  var PHX_PRUNE = "data-phx-prune";
  var PHX_PAGE_LOADING = "page-loading";
  var PHX_CONNECTED_CLASS = "phx-connected";
  var PHX_LOADING_CLASS = "phx-loading";
  var PHX_NO_FEEDBACK_CLASS = "phx-no-feedback";
  var PHX_ERROR_CLASS = "phx-error";
  var PHX_CLIENT_ERROR_CLASS = "phx-client-error";
  var PHX_SERVER_ERROR_CLASS = "phx-server-error";
  var PHX_PARENT_ID = "data-phx-parent-id";
  var PHX_MAIN = "data-phx-main";
  var PHX_ROOT_ID = "data-phx-root-id";
  var PHX_VIEWPORT_TOP = "viewport-top";
  var PHX_VIEWPORT_BOTTOM = "viewport-bottom";
  var PHX_TRIGGER_ACTION = "trigger-action";
  var PHX_FEEDBACK_FOR = "feedback-for";
  var PHX_HAS_FOCUSED = "phx-has-focused";
  var FOCUSABLE_INPUTS = ["text", "textarea", "number", "email", "password", "search", "tel", "url", "date", "time", "datetime-local", "color", "range"];
  var CHECKABLE_INPUTS = ["checkbox", "radio"];
  var PHX_HAS_SUBMITTED = "phx-has-submitted";
  var PHX_SESSION = "data-phx-session";
  var PHX_VIEW_SELECTOR = `[${PHX_SESSION}]`;
  var PHX_STICKY = "data-phx-sticky";
  var PHX_STATIC = "data-phx-static";
  var PHX_READONLY = "data-phx-readonly";
  var PHX_DISABLED = "data-phx-disabled";
  var PHX_DISABLE_WITH = "disable-with";
  var PHX_DISABLE_WITH_RESTORE = "data-phx-disable-with-restore";
  var PHX_HOOK = "hook";
  var PHX_DEBOUNCE = "debounce";
  var PHX_THROTTLE = "throttle";
  var PHX_UPDATE = "update";
  var PHX_STREAM = "stream";
  var PHX_STREAM_REF = "data-phx-stream";
  var PHX_KEY = "key";
  var PHX_PRIVATE = "phxPrivate";
  var PHX_AUTO_RECOVER = "auto-recover";
  var PHX_LV_DEBUG = "phx:live-socket:debug";
  var PHX_LV_PROFILE = "phx:live-socket:profiling";
  var PHX_LV_LATENCY_SIM = "phx:live-socket:latency-sim";
  var PHX_PROGRESS = "progress";
  var PHX_MOUNTED = "mounted";
  var LOADER_TIMEOUT = 1;
  var BEFORE_UNLOAD_LOADER_TIMEOUT = 200;
  var BINDING_PREFIX = "phx-";
  var PUSH_TIMEOUT = 3e4;
  var DEBOUNCE_TRIGGER = "debounce-trigger";
  var THROTTLED = "throttled";
  var DEBOUNCE_PREV_KEY = "debounce-prev-key";
  var DEFAULTS = {
    debounce: 300,
    throttle: 300
  };
  var DYNAMICS = "d";
  var STATIC = "s";
  var COMPONENTS = "c";
  var EVENTS = "e";
  var REPLY = "r";
  var TITLE = "t";
  var TEMPLATES = "p";
  var STREAM = "stream";
  var EntryUploader = class {
    constructor(entry, chunkSize, liveSocket2) {
      this.liveSocket = liveSocket2;
      this.entry = entry;
      this.offset = 0;
      this.chunkSize = chunkSize;
      this.chunkTimer = null;
      this.errored = false;
      this.uploadChannel = liveSocket2.channel(`lvu:${entry.ref}`, { token: entry.metadata() });
    }
    error(reason) {
      if (this.errored) {
        return;
      }
      this.errored = true;
      clearTimeout(this.chunkTimer);
      this.entry.error(reason);
    }
    upload() {
      this.uploadChannel.onError((reason) => this.error(reason));
      this.uploadChannel.join().receive("ok", (_data) => this.readNextChunk()).receive("error", (reason) => this.error(reason));
    }
    isDone() {
      return this.offset >= this.entry.file.size;
    }
    readNextChunk() {
      let reader = new window.FileReader();
      let blob = this.entry.file.slice(this.offset, this.chunkSize + this.offset);
      reader.onload = (e) => {
        if (e.target.error === null) {
          this.offset += e.target.result.byteLength;
          this.pushChunk(e.target.result);
        } else {
          return logError("Read error: " + e.target.error);
        }
      };
      reader.readAsArrayBuffer(blob);
    }
    pushChunk(chunk) {
      if (!this.uploadChannel.isJoined()) {
        return;
      }
      this.uploadChannel.push("chunk", chunk).receive("ok", () => {
        this.entry.progress(this.offset / this.entry.file.size * 100);
        if (!this.isDone()) {
          this.chunkTimer = setTimeout(() => this.readNextChunk(), this.liveSocket.getLatencySim() || 0);
        }
      }).receive("error", ({ reason }) => this.error(reason));
    }
  };
  var logError = (msg, obj) => console.error && console.error(msg, obj);
  var isCid = (cid) => {
    let type = typeof cid;
    return type === "number" || type === "string" && /^(0|[1-9]\d*)$/.test(cid);
  };
  function detectDuplicateIds() {
    let ids = /* @__PURE__ */ new Set();
    let elems = document.querySelectorAll("*[id]");
    for (let i = 0, len = elems.length; i < len; i++) {
      if (ids.has(elems[i].id)) {
        console.error(`Multiple IDs detected: ${elems[i].id}. Ensure unique element ids.`);
      } else {
        ids.add(elems[i].id);
      }
    }
  }
  var debug = (view, kind, msg, obj) => {
    if (view.liveSocket.isDebugEnabled()) {
      console.log(`${view.id} ${kind}: ${msg} - `, obj);
    }
  };
  var closure2 = (val) => typeof val === "function" ? val : function() {
    return val;
  };
  var clone = (obj) => {
    return JSON.parse(JSON.stringify(obj));
  };
  var closestPhxBinding = (el, binding, borderEl) => {
    do {
      if (el.matches(`[${binding}]`) && !el.disabled) {
        return el;
      }
      el = el.parentElement || el.parentNode;
    } while (el !== null && el.nodeType === 1 && !(borderEl && borderEl.isSameNode(el) || el.matches(PHX_VIEW_SELECTOR)));
    return null;
  };
  var isObject = (obj) => {
    return obj !== null && typeof obj === "object" && !(obj instanceof Array);
  };
  var isEqualObj = (obj1, obj2) => JSON.stringify(obj1) === JSON.stringify(obj2);
  var isEmpty = (obj) => {
    for (let x in obj) {
      return false;
    }
    return true;
  };
  var maybe = (el, callback) => el && callback(el);
  var channelUploader = function(entries, onError, resp, liveSocket2) {
    entries.forEach((entry) => {
      let entryUploader = new EntryUploader(entry, resp.config.chunk_size, liveSocket2);
      entryUploader.upload();
    });
  };
  var Browser = {
    canPushState() {
      return typeof history.pushState !== "undefined";
    },
    dropLocal(localStorage, namespace, subkey) {
      return localStorage.removeItem(this.localKey(namespace, subkey));
    },
    updateLocal(localStorage, namespace, subkey, initial, func) {
      let current2 = this.getLocal(localStorage, namespace, subkey);
      let key = this.localKey(namespace, subkey);
      let newVal = current2 === null ? initial : func(current2);
      localStorage.setItem(key, JSON.stringify(newVal));
      return newVal;
    },
    getLocal(localStorage, namespace, subkey) {
      return JSON.parse(localStorage.getItem(this.localKey(namespace, subkey)));
    },
    updateCurrentState(callback) {
      if (!this.canPushState()) {
        return;
      }
      history.replaceState(callback(history.state || {}), "", window.location.href);
    },
    pushState(kind, meta, to) {
      if (this.canPushState()) {
        if (to !== window.location.href) {
          if (meta.type == "redirect" && meta.scroll) {
            let currentState = history.state || {};
            currentState.scroll = meta.scroll;
            history.replaceState(currentState, "", window.location.href);
          }
          delete meta.scroll;
          history[kind + "State"](meta, "", to || null);
          let hashEl = this.getHashTargetEl(window.location.hash);
          if (hashEl) {
            hashEl.scrollIntoView();
          } else if (meta.type === "redirect") {
            window.scroll(0, 0);
          }
        }
      } else {
        this.redirect(to);
      }
    },
    setCookie(name, value) {
      document.cookie = `${name}=${value}`;
    },
    getCookie(name) {
      return document.cookie.replace(new RegExp(`(?:(?:^|.*;s*)${name}s*=s*([^;]*).*$)|^.*$`), "$1");
    },
    redirect(toURL, flash) {
      if (flash) {
        Browser.setCookie("__phoenix_flash__", flash + "; max-age=60000; path=/");
      }
      window.location = toURL;
    },
    localKey(namespace, subkey) {
      return `${namespace}-${subkey}`;
    },
    getHashTargetEl(maybeHash) {
      let hash = maybeHash.toString().substring(1);
      if (hash === "") {
        return;
      }
      return document.getElementById(hash) || document.querySelector(`a[name="${hash}"]`);
    }
  };
  var browser_default = Browser;
  var DOM = {
    byId(id) {
      return document.getElementById(id) || logError(`no id found for ${id}`);
    },
    removeClass(el, className) {
      el.classList.remove(className);
      if (el.classList.length === 0) {
        el.removeAttribute("class");
      }
    },
    all(node, query, callback) {
      if (!node) {
        return [];
      }
      let array = Array.from(node.querySelectorAll(query));
      return callback ? array.forEach(callback) : array;
    },
    childNodeLength(html) {
      let template = document.createElement("template");
      template.innerHTML = html;
      return template.content.childElementCount;
    },
    isUploadInput(el) {
      return el.type === "file" && el.getAttribute(PHX_UPLOAD_REF) !== null;
    },
    findUploadInputs(node) {
      return this.all(node, `input[type="file"][${PHX_UPLOAD_REF}]`);
    },
    findComponentNodeList(node, cid) {
      return this.filterWithinSameLiveView(this.all(node, `[${PHX_COMPONENT}="${cid}"]`), node);
    },
    isPhxDestroyed(node) {
      return node.id && DOM.private(node, "destroyed") ? true : false;
    },
    wantsNewTab(e) {
      let wantsNewTab = e.ctrlKey || e.shiftKey || e.metaKey || e.button && e.button === 1;
      let isDownload = e.target instanceof HTMLAnchorElement && e.target.hasAttribute("download");
      let isTargetBlank = e.target.hasAttribute("target") && e.target.getAttribute("target").toLowerCase() === "_blank";
      return wantsNewTab || isTargetBlank || isDownload;
    },
    isUnloadableFormSubmit(e) {
      return !e.defaultPrevented && !this.wantsNewTab(e);
    },
    isNewPageClick(e, currentLocation) {
      let href = e.target instanceof HTMLAnchorElement ? e.target.getAttribute("href") : null;
      let url;
      if (e.defaultPrevented || href === null || this.wantsNewTab(e)) {
        return false;
      }
      if (href.startsWith("mailto:") || href.startsWith("tel:")) {
        return false;
      }
      try {
        url = new URL(href);
      } catch (e2) {
        try {
          url = new URL(href, currentLocation);
        } catch (e3) {
          return true;
        }
      }
      if (url.host === currentLocation.host && url.protocol === currentLocation.protocol) {
        if (url.pathname === currentLocation.pathname && url.search === currentLocation.search) {
          return url.hash === "" && !url.href.endsWith("#");
        }
      }
      return url.protocol.startsWith("http");
    },
    markPhxChildDestroyed(el) {
      if (this.isPhxChild(el)) {
        el.setAttribute(PHX_SESSION, "");
      }
      this.putPrivate(el, "destroyed", true);
    },
    findPhxChildrenInFragment(html, parentId) {
      let template = document.createElement("template");
      template.innerHTML = html;
      return this.findPhxChildren(template.content, parentId);
    },
    isIgnored(el, phxUpdate) {
      return (el.getAttribute(phxUpdate) || el.getAttribute("data-phx-update")) === "ignore";
    },
    isPhxUpdate(el, phxUpdate, updateTypes) {
      return el.getAttribute && updateTypes.indexOf(el.getAttribute(phxUpdate)) >= 0;
    },
    findPhxSticky(el) {
      return this.all(el, `[${PHX_STICKY}]`);
    },
    findPhxChildren(el, parentId) {
      return this.all(el, `${PHX_VIEW_SELECTOR}[${PHX_PARENT_ID}="${parentId}"]`);
    },
    findParentCIDs(node, cids) {
      let initial = new Set(cids);
      let parentCids = cids.reduce((acc, cid) => {
        let selector = `[${PHX_COMPONENT}="${cid}"] [${PHX_COMPONENT}]`;
        this.filterWithinSameLiveView(this.all(node, selector), node).map((el) => parseInt(el.getAttribute(PHX_COMPONENT))).forEach((childCID) => acc.delete(childCID));
        return acc;
      }, initial);
      return parentCids.size === 0 ? new Set(cids) : parentCids;
    },
    filterWithinSameLiveView(nodes, parent) {
      if (parent.querySelector(PHX_VIEW_SELECTOR)) {
        return nodes.filter((el) => this.withinSameLiveView(el, parent));
      } else {
        return nodes;
      }
    },
    withinSameLiveView(node, parent) {
      while (node = node.parentNode) {
        if (node.isSameNode(parent)) {
          return true;
        }
        if (node.getAttribute(PHX_SESSION) !== null) {
          return false;
        }
      }
    },
    private(el, key) {
      return el[PHX_PRIVATE] && el[PHX_PRIVATE][key];
    },
    deletePrivate(el, key) {
      el[PHX_PRIVATE] && delete el[PHX_PRIVATE][key];
    },
    putPrivate(el, key, value) {
      if (!el[PHX_PRIVATE]) {
        el[PHX_PRIVATE] = {};
      }
      el[PHX_PRIVATE][key] = value;
    },
    updatePrivate(el, key, defaultVal, updateFunc) {
      let existing = this.private(el, key);
      if (existing === void 0) {
        this.putPrivate(el, key, updateFunc(defaultVal));
      } else {
        this.putPrivate(el, key, updateFunc(existing));
      }
    },
    copyPrivates(target, source) {
      if (source[PHX_PRIVATE]) {
        target[PHX_PRIVATE] = source[PHX_PRIVATE];
      }
    },
    putTitle(str) {
      let titleEl = document.querySelector("title");
      if (titleEl) {
        let { prefix: prefix2, suffix } = titleEl.dataset;
        document.title = `${prefix2 || ""}${str}${suffix || ""}`;
      } else {
        document.title = str;
      }
    },
    debounce(el, event, phxDebounce, defaultDebounce, phxThrottle, defaultThrottle, asyncFilter, callback) {
      let debounce2 = el.getAttribute(phxDebounce);
      let throttle2 = el.getAttribute(phxThrottle);
      if (debounce2 === "") {
        debounce2 = defaultDebounce;
      }
      if (throttle2 === "") {
        throttle2 = defaultThrottle;
      }
      let value = debounce2 || throttle2;
      switch (value) {
        case null:
          return callback();
        case "blur":
          if (this.once(el, "debounce-blur")) {
            el.addEventListener("blur", () => callback());
          }
          return;
        default:
          let timeout = parseInt(value);
          let trigger2 = () => throttle2 ? this.deletePrivate(el, THROTTLED) : callback();
          let currentCycle = this.incCycle(el, DEBOUNCE_TRIGGER, trigger2);
          if (isNaN(timeout)) {
            return logError(`invalid throttle/debounce value: ${value}`);
          }
          if (throttle2) {
            let newKeyDown = false;
            if (event.type === "keydown") {
              let prevKey = this.private(el, DEBOUNCE_PREV_KEY);
              this.putPrivate(el, DEBOUNCE_PREV_KEY, event.key);
              newKeyDown = prevKey !== event.key;
            }
            if (!newKeyDown && this.private(el, THROTTLED)) {
              return false;
            } else {
              callback();
              this.putPrivate(el, THROTTLED, true);
              setTimeout(() => {
                if (asyncFilter()) {
                  this.triggerCycle(el, DEBOUNCE_TRIGGER);
                }
              }, timeout);
            }
          } else {
            setTimeout(() => {
              if (asyncFilter()) {
                this.triggerCycle(el, DEBOUNCE_TRIGGER, currentCycle);
              }
            }, timeout);
          }
          let form = el.form;
          if (form && this.once(form, "bind-debounce")) {
            form.addEventListener("submit", () => {
              Array.from(new FormData(form).entries(), ([name]) => {
                let input = form.querySelector(`[name="${name}"]`);
                this.incCycle(input, DEBOUNCE_TRIGGER);
                this.deletePrivate(input, THROTTLED);
              });
            });
          }
          if (this.once(el, "bind-debounce")) {
            el.addEventListener("blur", () => this.triggerCycle(el, DEBOUNCE_TRIGGER));
          }
      }
    },
    triggerCycle(el, key, currentCycle) {
      let [cycle, trigger2] = this.private(el, key);
      if (!currentCycle) {
        currentCycle = cycle;
      }
      if (currentCycle === cycle) {
        this.incCycle(el, key);
        trigger2();
      }
    },
    once(el, key) {
      if (this.private(el, key) === true) {
        return false;
      }
      this.putPrivate(el, key, true);
      return true;
    },
    incCycle(el, key, trigger2 = function() {
    }) {
      let [currentCycle] = this.private(el, key) || [0, trigger2];
      currentCycle++;
      this.putPrivate(el, key, [currentCycle, trigger2]);
      return currentCycle;
    },
    maybeAddPrivateHooks(el, phxViewportTop, phxViewportBottom) {
      if (el.hasAttribute && (el.hasAttribute(phxViewportTop) || el.hasAttribute(phxViewportBottom))) {
        el.setAttribute("data-phx-hook", "Phoenix.InfiniteScroll");
      }
    },
    maybeHideFeedback(container, input, phxFeedbackFor) {
      if (!(this.private(input, PHX_HAS_FOCUSED) || this.private(input, PHX_HAS_SUBMITTED))) {
        let feedbacks = [input.name];
        if (input.name.endsWith("[]")) {
          feedbacks.push(input.name.slice(0, -2));
        }
        let selector = feedbacks.map((f) => `[${phxFeedbackFor}="${f}"]`).join(", ");
        DOM.all(container, selector, (el) => el.classList.add(PHX_NO_FEEDBACK_CLASS));
      }
    },
    resetForm(form, phxFeedbackFor) {
      Array.from(form.elements).forEach((input) => {
        let query = `[${phxFeedbackFor}="${input.id}"],
                   [${phxFeedbackFor}="${input.name}"],
                   [${phxFeedbackFor}="${input.name.replace(/\[\]$/, "")}"]`;
        this.deletePrivate(input, PHX_HAS_FOCUSED);
        this.deletePrivate(input, PHX_HAS_SUBMITTED);
        this.all(document, query, (feedbackEl) => {
          feedbackEl.classList.add(PHX_NO_FEEDBACK_CLASS);
        });
      });
    },
    showError(inputEl, phxFeedbackFor) {
      if (inputEl.id || inputEl.name) {
        this.all(inputEl.form, `[${phxFeedbackFor}="${inputEl.id}"], [${phxFeedbackFor}="${inputEl.name}"]`, (el) => {
          this.removeClass(el, PHX_NO_FEEDBACK_CLASS);
        });
      }
    },
    isPhxChild(node) {
      return node.getAttribute && node.getAttribute(PHX_PARENT_ID);
    },
    isPhxSticky(node) {
      return node.getAttribute && node.getAttribute(PHX_STICKY) !== null;
    },
    firstPhxChild(el) {
      return this.isPhxChild(el) ? el : this.all(el, `[${PHX_PARENT_ID}]`)[0];
    },
    dispatchEvent(target, name, opts = {}) {
      let bubbles = opts.bubbles === void 0 ? true : !!opts.bubbles;
      let eventOpts = { bubbles, cancelable: true, detail: opts.detail || {} };
      let event = name === "click" ? new MouseEvent("click", eventOpts) : new CustomEvent(name, eventOpts);
      target.dispatchEvent(event);
    },
    cloneNode(node, html) {
      if (typeof html === "undefined") {
        return node.cloneNode(true);
      } else {
        let cloned = node.cloneNode(false);
        cloned.innerHTML = html;
        return cloned;
      }
    },
    mergeAttrs(target, source, opts = {}) {
      let exclude = opts.exclude || [];
      let isIgnored = opts.isIgnored;
      let sourceAttrs = source.attributes;
      for (let i = sourceAttrs.length - 1; i >= 0; i--) {
        let name = sourceAttrs[i].name;
        if (exclude.indexOf(name) < 0) {
          target.setAttribute(name, source.getAttribute(name));
        }
      }
      let targetAttrs = target.attributes;
      for (let i = targetAttrs.length - 1; i >= 0; i--) {
        let name = targetAttrs[i].name;
        if (isIgnored) {
          if (name.startsWith("data-") && !source.hasAttribute(name)) {
            target.removeAttribute(name);
          }
        } else {
          if (!source.hasAttribute(name)) {
            target.removeAttribute(name);
          }
        }
      }
    },
    mergeFocusedInput(target, source) {
      if (!(target instanceof HTMLSelectElement)) {
        DOM.mergeAttrs(target, source, { exclude: ["value"] });
      }
      if (source.readOnly) {
        target.setAttribute("readonly", true);
      } else {
        target.removeAttribute("readonly");
      }
    },
    hasSelectionRange(el) {
      return el.setSelectionRange && (el.type === "text" || el.type === "textarea");
    },
    restoreFocus(focused, selectionStart, selectionEnd) {
      if (!DOM.isTextualInput(focused)) {
        return;
      }
      let wasFocused = focused.matches(":focus");
      if (focused.readOnly) {
        focused.blur();
      }
      if (!wasFocused) {
        focused.focus();
      }
      if (this.hasSelectionRange(focused)) {
        focused.setSelectionRange(selectionStart, selectionEnd);
      }
    },
    isFormInput(el) {
      return /^(?:input|select|textarea)$/i.test(el.tagName) && el.type !== "button";
    },
    syncAttrsToProps(el) {
      if (el instanceof HTMLInputElement && CHECKABLE_INPUTS.indexOf(el.type.toLocaleLowerCase()) >= 0) {
        el.checked = el.getAttribute("checked") !== null;
      }
    },
    isTextualInput(el) {
      return FOCUSABLE_INPUTS.indexOf(el.type) >= 0;
    },
    isNowTriggerFormExternal(el, phxTriggerExternal) {
      return el.getAttribute && el.getAttribute(phxTriggerExternal) !== null;
    },
    syncPendingRef(fromEl, toEl, disableWith) {
      let ref = fromEl.getAttribute(PHX_REF);
      if (ref === null) {
        return true;
      }
      let refSrc = fromEl.getAttribute(PHX_REF_SRC);
      if (DOM.isFormInput(fromEl) || fromEl.getAttribute(disableWith) !== null) {
        if (DOM.isUploadInput(fromEl)) {
          DOM.mergeAttrs(fromEl, toEl, { isIgnored: true });
        }
        DOM.putPrivate(fromEl, PHX_REF, toEl);
        return false;
      } else {
        PHX_EVENT_CLASSES.forEach((className) => {
          fromEl.classList.contains(className) && toEl.classList.add(className);
        });
        toEl.setAttribute(PHX_REF, ref);
        toEl.setAttribute(PHX_REF_SRC, refSrc);
        return true;
      }
    },
    cleanChildNodes(container, phxUpdate) {
      if (DOM.isPhxUpdate(container, phxUpdate, ["append", "prepend"])) {
        let toRemove = [];
        container.childNodes.forEach((childNode) => {
          if (!childNode.id) {
            let isEmptyTextNode = childNode.nodeType === Node.TEXT_NODE && childNode.nodeValue.trim() === "";
            if (!isEmptyTextNode) {
              logError(`only HTML element tags with an id are allowed inside containers with phx-update.

removing illegal node: "${(childNode.outerHTML || childNode.nodeValue).trim()}"

`);
            }
            toRemove.push(childNode);
          }
        });
        toRemove.forEach((childNode) => childNode.remove());
      }
    },
    replaceRootContainer(container, tagName, attrs) {
      let retainedAttrs = /* @__PURE__ */ new Set(["id", PHX_SESSION, PHX_STATIC, PHX_MAIN, PHX_ROOT_ID]);
      if (container.tagName.toLowerCase() === tagName.toLowerCase()) {
        Array.from(container.attributes).filter((attr) => !retainedAttrs.has(attr.name.toLowerCase())).forEach((attr) => container.removeAttribute(attr.name));
        Object.keys(attrs).filter((name) => !retainedAttrs.has(name.toLowerCase())).forEach((attr) => container.setAttribute(attr, attrs[attr]));
        return container;
      } else {
        let newContainer = document.createElement(tagName);
        Object.keys(attrs).forEach((attr) => newContainer.setAttribute(attr, attrs[attr]));
        retainedAttrs.forEach((attr) => newContainer.setAttribute(attr, container.getAttribute(attr)));
        newContainer.innerHTML = container.innerHTML;
        container.replaceWith(newContainer);
        return newContainer;
      }
    },
    getSticky(el, name, defaultVal) {
      let op = (DOM.private(el, "sticky") || []).find(([existingName]) => name === existingName);
      if (op) {
        let [_name, _op, stashedResult] = op;
        return stashedResult;
      } else {
        return typeof defaultVal === "function" ? defaultVal() : defaultVal;
      }
    },
    deleteSticky(el, name) {
      this.updatePrivate(el, "sticky", [], (ops) => {
        return ops.filter(([existingName, _]) => existingName !== name);
      });
    },
    putSticky(el, name, op) {
      let stashedResult = op(el);
      this.updatePrivate(el, "sticky", [], (ops) => {
        let existingIndex = ops.findIndex(([existingName]) => name === existingName);
        if (existingIndex >= 0) {
          ops[existingIndex] = [name, op, stashedResult];
        } else {
          ops.push([name, op, stashedResult]);
        }
        return ops;
      });
    },
    applyStickyOperations(el) {
      let ops = DOM.private(el, "sticky");
      if (!ops) {
        return;
      }
      ops.forEach(([name, op, _stashed]) => this.putSticky(el, name, op));
    }
  };
  var dom_default = DOM;
  var UploadEntry = class {
    static isActive(fileEl, file) {
      let isNew = file._phxRef === void 0;
      let activeRefs = fileEl.getAttribute(PHX_ACTIVE_ENTRY_REFS).split(",");
      let isActive = activeRefs.indexOf(LiveUploader.genFileRef(file)) >= 0;
      return file.size > 0 && (isNew || isActive);
    }
    static isPreflighted(fileEl, file) {
      let preflightedRefs = fileEl.getAttribute(PHX_PREFLIGHTED_REFS).split(",");
      let isPreflighted = preflightedRefs.indexOf(LiveUploader.genFileRef(file)) >= 0;
      return isPreflighted && this.isActive(fileEl, file);
    }
    constructor(fileEl, file, view) {
      this.ref = LiveUploader.genFileRef(file);
      this.fileEl = fileEl;
      this.file = file;
      this.view = view;
      this.meta = null;
      this._isCancelled = false;
      this._isDone = false;
      this._progress = 0;
      this._lastProgressSent = -1;
      this._onDone = function() {
      };
      this._onElUpdated = this.onElUpdated.bind(this);
      this.fileEl.addEventListener(PHX_LIVE_FILE_UPDATED, this._onElUpdated);
    }
    metadata() {
      return this.meta;
    }
    progress(progress) {
      this._progress = Math.floor(progress);
      if (this._progress > this._lastProgressSent) {
        if (this._progress >= 100) {
          this._progress = 100;
          this._lastProgressSent = 100;
          this._isDone = true;
          this.view.pushFileProgress(this.fileEl, this.ref, 100, () => {
            LiveUploader.untrackFile(this.fileEl, this.file);
            this._onDone();
          });
        } else {
          this._lastProgressSent = this._progress;
          this.view.pushFileProgress(this.fileEl, this.ref, this._progress);
        }
      }
    }
    cancel() {
      this._isCancelled = true;
      this._isDone = true;
      this._onDone();
    }
    isDone() {
      return this._isDone;
    }
    error(reason = "failed") {
      this.fileEl.removeEventListener(PHX_LIVE_FILE_UPDATED, this._onElUpdated);
      this.view.pushFileProgress(this.fileEl, this.ref, { error: reason });
      LiveUploader.clearFiles(this.fileEl);
    }
    onDone(callback) {
      this._onDone = () => {
        this.fileEl.removeEventListener(PHX_LIVE_FILE_UPDATED, this._onElUpdated);
        callback();
      };
    }
    onElUpdated() {
      let activeRefs = this.fileEl.getAttribute(PHX_ACTIVE_ENTRY_REFS).split(",");
      if (activeRefs.indexOf(this.ref) === -1) {
        this.cancel();
      }
    }
    toPreflightPayload() {
      return {
        last_modified: this.file.lastModified,
        name: this.file.name,
        relative_path: this.file.webkitRelativePath,
        size: this.file.size,
        type: this.file.type,
        ref: this.ref
      };
    }
    uploader(uploaders) {
      if (this.meta.uploader) {
        let callback = uploaders[this.meta.uploader] || logError(`no uploader configured for ${this.meta.uploader}`);
        return { name: this.meta.uploader, callback };
      } else {
        return { name: "channel", callback: channelUploader };
      }
    }
    zipPostFlight(resp) {
      this.meta = resp.entries[this.ref];
      if (!this.meta) {
        logError(`no preflight upload response returned with ref ${this.ref}`, { input: this.fileEl, response: resp });
      }
    }
  };
  var liveUploaderFileRef = 0;
  var LiveUploader = class {
    static genFileRef(file) {
      let ref = file._phxRef;
      if (ref !== void 0) {
        return ref;
      } else {
        file._phxRef = (liveUploaderFileRef++).toString();
        return file._phxRef;
      }
    }
    static getEntryDataURL(inputEl, ref, callback) {
      let file = this.activeFiles(inputEl).find((file2) => this.genFileRef(file2) === ref);
      callback(URL.createObjectURL(file));
    }
    static hasUploadsInProgress(formEl) {
      let active = 0;
      dom_default.findUploadInputs(formEl).forEach((input) => {
        if (input.getAttribute(PHX_PREFLIGHTED_REFS) !== input.getAttribute(PHX_DONE_REFS)) {
          active++;
        }
      });
      return active > 0;
    }
    static serializeUploads(inputEl) {
      let files = this.activeFiles(inputEl);
      let fileData = {};
      files.forEach((file) => {
        let entry = { path: inputEl.name };
        let uploadRef = inputEl.getAttribute(PHX_UPLOAD_REF);
        fileData[uploadRef] = fileData[uploadRef] || [];
        entry.ref = this.genFileRef(file);
        entry.last_modified = file.lastModified;
        entry.name = file.name || entry.ref;
        entry.relative_path = file.webkitRelativePath;
        entry.type = file.type;
        entry.size = file.size;
        fileData[uploadRef].push(entry);
      });
      return fileData;
    }
    static clearFiles(inputEl) {
      inputEl.value = null;
      inputEl.removeAttribute(PHX_UPLOAD_REF);
      dom_default.putPrivate(inputEl, "files", []);
    }
    static untrackFile(inputEl, file) {
      dom_default.putPrivate(inputEl, "files", dom_default.private(inputEl, "files").filter((f) => !Object.is(f, file)));
    }
    static trackFiles(inputEl, files, dataTransfer) {
      if (inputEl.getAttribute("multiple") !== null) {
        let newFiles = files.filter((file) => !this.activeFiles(inputEl).find((f) => Object.is(f, file)));
        dom_default.putPrivate(inputEl, "files", this.activeFiles(inputEl).concat(newFiles));
        inputEl.value = null;
      } else {
        if (dataTransfer && dataTransfer.files.length > 0) {
          inputEl.files = dataTransfer.files;
        }
        dom_default.putPrivate(inputEl, "files", files);
      }
    }
    static activeFileInputs(formEl) {
      let fileInputs = dom_default.findUploadInputs(formEl);
      return Array.from(fileInputs).filter((el) => el.files && this.activeFiles(el).length > 0);
    }
    static activeFiles(input) {
      return (dom_default.private(input, "files") || []).filter((f) => UploadEntry.isActive(input, f));
    }
    static inputsAwaitingPreflight(formEl) {
      let fileInputs = dom_default.findUploadInputs(formEl);
      return Array.from(fileInputs).filter((input) => this.filesAwaitingPreflight(input).length > 0);
    }
    static filesAwaitingPreflight(input) {
      return this.activeFiles(input).filter((f) => !UploadEntry.isPreflighted(input, f));
    }
    constructor(inputEl, view, onComplete) {
      this.view = view;
      this.onComplete = onComplete;
      this._entries = Array.from(LiveUploader.filesAwaitingPreflight(inputEl) || []).map((file) => new UploadEntry(inputEl, file, view));
      this.numEntriesInProgress = this._entries.length;
    }
    entries() {
      return this._entries;
    }
    initAdapterUpload(resp, onError, liveSocket2) {
      this._entries = this._entries.map((entry) => {
        entry.zipPostFlight(resp);
        entry.onDone(() => {
          this.numEntriesInProgress--;
          if (this.numEntriesInProgress === 0) {
            this.onComplete();
          }
        });
        return entry;
      });
      let groupedEntries = this._entries.reduce((acc, entry) => {
        let { name, callback } = entry.uploader(liveSocket2.uploaders);
        acc[name] = acc[name] || { callback, entries: [] };
        acc[name].entries.push(entry);
        return acc;
      }, {});
      for (let name in groupedEntries) {
        let { callback, entries } = groupedEntries[name];
        callback(entries, onError, resp, liveSocket2);
      }
    }
  };
  var ARIA = {
    focusMain() {
      let target = document.querySelector("main h1, main, h1");
      if (target) {
        let origTabIndex = target.tabIndex;
        target.tabIndex = -1;
        target.focus();
        target.tabIndex = origTabIndex;
      }
    },
    anyOf(instance, classes) {
      return classes.find((name) => instance instanceof name);
    },
    isFocusable(el, interactiveOnly) {
      return el instanceof HTMLAnchorElement && el.rel !== "ignore" || el instanceof HTMLAreaElement && el.href !== void 0 || !el.disabled && this.anyOf(el, [HTMLInputElement, HTMLSelectElement, HTMLTextAreaElement, HTMLButtonElement]) || el instanceof HTMLIFrameElement || (el.tabIndex > 0 || !interactiveOnly && el.tabIndex === 0 && el.getAttribute("tabindex") !== null && el.getAttribute("aria-hidden") !== "true");
    },
    attemptFocus(el, interactiveOnly) {
      if (this.isFocusable(el, interactiveOnly)) {
        try {
          el.focus();
        } catch (e) {
        }
      }
      return !!document.activeElement && document.activeElement.isSameNode(el);
    },
    focusFirstInteractive(el) {
      let child = el.firstElementChild;
      while (child) {
        if (this.attemptFocus(child, true) || this.focusFirstInteractive(child, true)) {
          return true;
        }
        child = child.nextElementSibling;
      }
    },
    focusFirst(el) {
      let child = el.firstElementChild;
      while (child) {
        if (this.attemptFocus(child) || this.focusFirst(child)) {
          return true;
        }
        child = child.nextElementSibling;
      }
    },
    focusLast(el) {
      let child = el.lastElementChild;
      while (child) {
        if (this.attemptFocus(child) || this.focusLast(child)) {
          return true;
        }
        child = child.previousElementSibling;
      }
    }
  };
  var aria_default = ARIA;
  var Hooks = {
    LiveFileUpload: {
      activeRefs() {
        return this.el.getAttribute(PHX_ACTIVE_ENTRY_REFS);
      },
      preflightedRefs() {
        return this.el.getAttribute(PHX_PREFLIGHTED_REFS);
      },
      mounted() {
        this.preflightedWas = this.preflightedRefs();
      },
      updated() {
        let newPreflights = this.preflightedRefs();
        if (this.preflightedWas !== newPreflights) {
          this.preflightedWas = newPreflights;
          if (newPreflights === "") {
            this.__view.cancelSubmit(this.el.form);
          }
        }
        if (this.activeRefs() === "") {
          this.el.value = null;
        }
        this.el.dispatchEvent(new CustomEvent(PHX_LIVE_FILE_UPDATED));
      }
    },
    LiveImgPreview: {
      mounted() {
        this.ref = this.el.getAttribute("data-phx-entry-ref");
        this.inputEl = document.getElementById(this.el.getAttribute(PHX_UPLOAD_REF));
        LiveUploader.getEntryDataURL(this.inputEl, this.ref, (url) => {
          this.url = url;
          this.el.src = url;
        });
      },
      destroyed() {
        URL.revokeObjectURL(this.url);
      }
    },
    FocusWrap: {
      mounted() {
        this.focusStart = this.el.firstElementChild;
        this.focusEnd = this.el.lastElementChild;
        this.focusStart.addEventListener("focus", () => aria_default.focusLast(this.el));
        this.focusEnd.addEventListener("focus", () => aria_default.focusFirst(this.el));
        this.el.addEventListener("phx:show-end", () => this.el.focus());
        if (window.getComputedStyle(this.el).display !== "none") {
          aria_default.focusFirst(this.el);
        }
      }
    }
  };
  var scrollTop = () => document.documentElement.scrollTop || document.body.scrollTop;
  var winHeight = () => window.innerHeight || document.documentElement.clientHeight;
  var isAtViewportTop = (el) => {
    let rect = el.getBoundingClientRect();
    return rect.top >= 0 && rect.left >= 0 && rect.top <= winHeight();
  };
  var isAtViewportBottom = (el) => {
    let rect = el.getBoundingClientRect();
    return rect.right >= 0 && rect.left >= 0 && rect.bottom <= winHeight();
  };
  var isWithinViewport = (el) => {
    let rect = el.getBoundingClientRect();
    return rect.top >= 0 && rect.left >= 0 && rect.top <= winHeight();
  };
  Hooks.InfiniteScroll = {
    mounted() {
      let scrollBefore = scrollTop();
      let topOverran = false;
      let throttleInterval = 500;
      let pendingOp = null;
      let onTopOverrun = this.throttle(throttleInterval, (topEvent, firstChild) => {
        pendingOp = () => true;
        this.liveSocket.execJSHookPush(this.el, topEvent, { id: firstChild.id, _overran: true }, () => {
          pendingOp = null;
        });
      });
      let onFirstChildAtTop = this.throttle(throttleInterval, (topEvent, firstChild) => {
        pendingOp = () => firstChild.scrollIntoView({ block: "start" });
        this.liveSocket.execJSHookPush(this.el, topEvent, { id: firstChild.id }, () => {
          pendingOp = null;
          if (!isWithinViewport(firstChild)) {
            firstChild.scrollIntoView({ block: "start" });
          }
        });
      });
      let onLastChildAtBottom = this.throttle(throttleInterval, (bottomEvent, lastChild) => {
        pendingOp = () => lastChild.scrollIntoView({ block: "end" });
        this.liveSocket.execJSHookPush(this.el, bottomEvent, { id: lastChild.id }, () => {
          pendingOp = null;
          if (!isWithinViewport(lastChild)) {
            lastChild.scrollIntoView({ block: "end" });
          }
        });
      });
      this.onScroll = (e) => {
        let scrollNow = scrollTop();
        if (pendingOp) {
          scrollBefore = scrollNow;
          return pendingOp();
        }
        let rect = this.el.getBoundingClientRect();
        let topEvent = this.el.getAttribute(this.liveSocket.binding("viewport-top"));
        let bottomEvent = this.el.getAttribute(this.liveSocket.binding("viewport-bottom"));
        let lastChild = this.el.lastElementChild;
        let firstChild = this.el.firstElementChild;
        let isScrollingUp = scrollNow < scrollBefore;
        let isScrollingDown = scrollNow > scrollBefore;
        if (isScrollingUp && topEvent && !topOverran && rect.top >= 0) {
          topOverran = true;
          onTopOverrun(topEvent, firstChild);
        } else if (isScrollingDown && topOverran && rect.top <= 0) {
          topOverran = false;
        }
        if (topEvent && isScrollingUp && isAtViewportTop(firstChild)) {
          onFirstChildAtTop(topEvent, firstChild);
        } else if (bottomEvent && isScrollingDown && isAtViewportBottom(lastChild)) {
          onLastChildAtBottom(bottomEvent, lastChild);
        }
        scrollBefore = scrollNow;
      };
      window.addEventListener("scroll", this.onScroll);
    },
    destroyed() {
      window.removeEventListener("scroll", this.onScroll);
    },
    throttle(interval, callback) {
      let lastCallAt = 0;
      let timer;
      return (...args) => {
        let now = Date.now();
        let remainingTime = interval - (now - lastCallAt);
        if (remainingTime <= 0 || remainingTime > interval) {
          if (timer) {
            clearTimeout(timer);
            timer = null;
          }
          lastCallAt = now;
          callback(...args);
        } else if (!timer) {
          timer = setTimeout(() => {
            lastCallAt = Date.now();
            timer = null;
            callback(...args);
          }, remainingTime);
        }
      };
    }
  };
  var hooks_default = Hooks;
  var DOMPostMorphRestorer = class {
    constructor(containerBefore, containerAfter, updateType) {
      let idsBefore = /* @__PURE__ */ new Set();
      let idsAfter = new Set([...containerAfter.children].map((child) => child.id));
      let elementsToModify = [];
      Array.from(containerBefore.children).forEach((child) => {
        if (child.id) {
          idsBefore.add(child.id);
          if (idsAfter.has(child.id)) {
            let previousElementId = child.previousElementSibling && child.previousElementSibling.id;
            elementsToModify.push({ elementId: child.id, previousElementId });
          }
        }
      });
      this.containerId = containerAfter.id;
      this.updateType = updateType;
      this.elementsToModify = elementsToModify;
      this.elementIdsToAdd = [...idsAfter].filter((id) => !idsBefore.has(id));
    }
    perform() {
      let container = dom_default.byId(this.containerId);
      this.elementsToModify.forEach((elementToModify) => {
        if (elementToModify.previousElementId) {
          maybe(document.getElementById(elementToModify.previousElementId), (previousElem) => {
            maybe(document.getElementById(elementToModify.elementId), (elem) => {
              let isInRightPlace = elem.previousElementSibling && elem.previousElementSibling.id == previousElem.id;
              if (!isInRightPlace) {
                previousElem.insertAdjacentElement("afterend", elem);
              }
            });
          });
        } else {
          maybe(document.getElementById(elementToModify.elementId), (elem) => {
            let isInRightPlace = elem.previousElementSibling == null;
            if (!isInRightPlace) {
              container.insertAdjacentElement("afterbegin", elem);
            }
          });
        }
      });
      if (this.updateType == "prepend") {
        this.elementIdsToAdd.reverse().forEach((elemId) => {
          maybe(document.getElementById(elemId), (elem) => container.insertAdjacentElement("afterbegin", elem));
        });
      }
    }
  };
  var DOCUMENT_FRAGMENT_NODE = 11;
  function morphAttrs(fromNode, toNode) {
    var toNodeAttrs = toNode.attributes;
    var attr;
    var attrName;
    var attrNamespaceURI;
    var attrValue;
    var fromValue;
    if (toNode.nodeType === DOCUMENT_FRAGMENT_NODE || fromNode.nodeType === DOCUMENT_FRAGMENT_NODE) {
      return;
    }
    for (var i = toNodeAttrs.length - 1; i >= 0; i--) {
      attr = toNodeAttrs[i];
      attrName = attr.name;
      attrNamespaceURI = attr.namespaceURI;
      attrValue = attr.value;
      if (attrNamespaceURI) {
        attrName = attr.localName || attrName;
        fromValue = fromNode.getAttributeNS(attrNamespaceURI, attrName);
        if (fromValue !== attrValue) {
          if (attr.prefix === "xmlns") {
            attrName = attr.name;
          }
          fromNode.setAttributeNS(attrNamespaceURI, attrName, attrValue);
        }
      } else {
        fromValue = fromNode.getAttribute(attrName);
        if (fromValue !== attrValue) {
          fromNode.setAttribute(attrName, attrValue);
        }
      }
    }
    var fromNodeAttrs = fromNode.attributes;
    for (var d = fromNodeAttrs.length - 1; d >= 0; d--) {
      attr = fromNodeAttrs[d];
      attrName = attr.name;
      attrNamespaceURI = attr.namespaceURI;
      if (attrNamespaceURI) {
        attrName = attr.localName || attrName;
        if (!toNode.hasAttributeNS(attrNamespaceURI, attrName)) {
          fromNode.removeAttributeNS(attrNamespaceURI, attrName);
        }
      } else {
        if (!toNode.hasAttribute(attrName)) {
          fromNode.removeAttribute(attrName);
        }
      }
    }
  }
  var range;
  var NS_XHTML = "http://www.w3.org/1999/xhtml";
  var doc = typeof document === "undefined" ? void 0 : document;
  var HAS_TEMPLATE_SUPPORT = !!doc && "content" in doc.createElement("template");
  var HAS_RANGE_SUPPORT = !!doc && doc.createRange && "createContextualFragment" in doc.createRange();
  function createFragmentFromTemplate(str) {
    var template = doc.createElement("template");
    template.innerHTML = str;
    return template.content.childNodes[0];
  }
  function createFragmentFromRange(str) {
    if (!range) {
      range = doc.createRange();
      range.selectNode(doc.body);
    }
    var fragment = range.createContextualFragment(str);
    return fragment.childNodes[0];
  }
  function createFragmentFromWrap(str) {
    var fragment = doc.createElement("body");
    fragment.innerHTML = str;
    return fragment.childNodes[0];
  }
  function toElement(str) {
    str = str.trim();
    if (HAS_TEMPLATE_SUPPORT) {
      return createFragmentFromTemplate(str);
    } else if (HAS_RANGE_SUPPORT) {
      return createFragmentFromRange(str);
    }
    return createFragmentFromWrap(str);
  }
  function compareNodeNames(fromEl, toEl) {
    var fromNodeName = fromEl.nodeName;
    var toNodeName = toEl.nodeName;
    var fromCodeStart, toCodeStart;
    if (fromNodeName === toNodeName) {
      return true;
    }
    fromCodeStart = fromNodeName.charCodeAt(0);
    toCodeStart = toNodeName.charCodeAt(0);
    if (fromCodeStart <= 90 && toCodeStart >= 97) {
      return fromNodeName === toNodeName.toUpperCase();
    } else if (toCodeStart <= 90 && fromCodeStart >= 97) {
      return toNodeName === fromNodeName.toUpperCase();
    } else {
      return false;
    }
  }
  function createElementNS(name, namespaceURI) {
    return !namespaceURI || namespaceURI === NS_XHTML ? doc.createElement(name) : doc.createElementNS(namespaceURI, name);
  }
  function moveChildren(fromEl, toEl) {
    var curChild = fromEl.firstChild;
    while (curChild) {
      var nextChild = curChild.nextSibling;
      toEl.appendChild(curChild);
      curChild = nextChild;
    }
    return toEl;
  }
  function syncBooleanAttrProp(fromEl, toEl, name) {
    if (fromEl[name] !== toEl[name]) {
      fromEl[name] = toEl[name];
      if (fromEl[name]) {
        fromEl.setAttribute(name, "");
      } else {
        fromEl.removeAttribute(name);
      }
    }
  }
  var specialElHandlers = {
    OPTION: function(fromEl, toEl) {
      var parentNode = fromEl.parentNode;
      if (parentNode) {
        var parentName = parentNode.nodeName.toUpperCase();
        if (parentName === "OPTGROUP") {
          parentNode = parentNode.parentNode;
          parentName = parentNode && parentNode.nodeName.toUpperCase();
        }
        if (parentName === "SELECT" && !parentNode.hasAttribute("multiple")) {
          if (fromEl.hasAttribute("selected") && !toEl.selected) {
            fromEl.setAttribute("selected", "selected");
            fromEl.removeAttribute("selected");
          }
          parentNode.selectedIndex = -1;
        }
      }
      syncBooleanAttrProp(fromEl, toEl, "selected");
    },
    INPUT: function(fromEl, toEl) {
      syncBooleanAttrProp(fromEl, toEl, "checked");
      syncBooleanAttrProp(fromEl, toEl, "disabled");
      if (fromEl.value !== toEl.value) {
        fromEl.value = toEl.value;
      }
      if (!toEl.hasAttribute("value")) {
        fromEl.removeAttribute("value");
      }
    },
    TEXTAREA: function(fromEl, toEl) {
      var newValue = toEl.value;
      if (fromEl.value !== newValue) {
        fromEl.value = newValue;
      }
      var firstChild = fromEl.firstChild;
      if (firstChild) {
        var oldValue = firstChild.nodeValue;
        if (oldValue == newValue || !newValue && oldValue == fromEl.placeholder) {
          return;
        }
        firstChild.nodeValue = newValue;
      }
    },
    SELECT: function(fromEl, toEl) {
      if (!toEl.hasAttribute("multiple")) {
        var selectedIndex = -1;
        var i = 0;
        var curChild = fromEl.firstChild;
        var optgroup;
        var nodeName;
        while (curChild) {
          nodeName = curChild.nodeName && curChild.nodeName.toUpperCase();
          if (nodeName === "OPTGROUP") {
            optgroup = curChild;
            curChild = optgroup.firstChild;
          } else {
            if (nodeName === "OPTION") {
              if (curChild.hasAttribute("selected")) {
                selectedIndex = i;
                break;
              }
              i++;
            }
            curChild = curChild.nextSibling;
            if (!curChild && optgroup) {
              curChild = optgroup.nextSibling;
              optgroup = null;
            }
          }
        }
        fromEl.selectedIndex = selectedIndex;
      }
    }
  };
  var ELEMENT_NODE = 1;
  var DOCUMENT_FRAGMENT_NODE$1 = 11;
  var TEXT_NODE = 3;
  var COMMENT_NODE = 8;
  function noop() {
  }
  function defaultGetNodeKey(node) {
    if (node) {
      return node.getAttribute && node.getAttribute("id") || node.id;
    }
  }
  function morphdomFactory(morphAttrs2) {
    return function morphdom2(fromNode, toNode, options) {
      if (!options) {
        options = {};
      }
      if (typeof toNode === "string") {
        if (fromNode.nodeName === "#document" || fromNode.nodeName === "HTML" || fromNode.nodeName === "BODY") {
          var toNodeHtml = toNode;
          toNode = doc.createElement("html");
          toNode.innerHTML = toNodeHtml;
        } else {
          toNode = toElement(toNode);
        }
      } else if (toNode.nodeType === DOCUMENT_FRAGMENT_NODE$1) {
        toNode = toNode.firstElementChild;
      }
      var getNodeKey = options.getNodeKey || defaultGetNodeKey;
      var onBeforeNodeAdded = options.onBeforeNodeAdded || noop;
      var onNodeAdded = options.onNodeAdded || noop;
      var onBeforeElUpdated = options.onBeforeElUpdated || noop;
      var onElUpdated = options.onElUpdated || noop;
      var onBeforeNodeDiscarded = options.onBeforeNodeDiscarded || noop;
      var onNodeDiscarded = options.onNodeDiscarded || noop;
      var onBeforeElChildrenUpdated = options.onBeforeElChildrenUpdated || noop;
      var skipFromChildren = options.skipFromChildren || noop;
      var addChild = options.addChild || function(parent, child) {
        return parent.appendChild(child);
      };
      var childrenOnly = options.childrenOnly === true;
      var fromNodesLookup = /* @__PURE__ */ Object.create(null);
      var keyedRemovalList = [];
      function addKeyedRemoval(key) {
        keyedRemovalList.push(key);
      }
      function walkDiscardedChildNodes(node, skipKeyedNodes) {
        if (node.nodeType === ELEMENT_NODE) {
          var curChild = node.firstChild;
          while (curChild) {
            var key = void 0;
            if (skipKeyedNodes && (key = getNodeKey(curChild))) {
              addKeyedRemoval(key);
            } else {
              onNodeDiscarded(curChild);
              if (curChild.firstChild) {
                walkDiscardedChildNodes(curChild, skipKeyedNodes);
              }
            }
            curChild = curChild.nextSibling;
          }
        }
      }
      function removeNode(node, parentNode, skipKeyedNodes) {
        if (onBeforeNodeDiscarded(node) === false) {
          return;
        }
        if (parentNode) {
          parentNode.removeChild(node);
        }
        onNodeDiscarded(node);
        walkDiscardedChildNodes(node, skipKeyedNodes);
      }
      function indexTree(node) {
        if (node.nodeType === ELEMENT_NODE || node.nodeType === DOCUMENT_FRAGMENT_NODE$1) {
          var curChild = node.firstChild;
          while (curChild) {
            var key = getNodeKey(curChild);
            if (key) {
              fromNodesLookup[key] = curChild;
            }
            indexTree(curChild);
            curChild = curChild.nextSibling;
          }
        }
      }
      indexTree(fromNode);
      function handleNodeAdded(el) {
        onNodeAdded(el);
        var curChild = el.firstChild;
        while (curChild) {
          var nextSibling = curChild.nextSibling;
          var key = getNodeKey(curChild);
          if (key) {
            var unmatchedFromEl = fromNodesLookup[key];
            if (unmatchedFromEl && compareNodeNames(curChild, unmatchedFromEl)) {
              curChild.parentNode.replaceChild(unmatchedFromEl, curChild);
              morphEl(unmatchedFromEl, curChild);
            } else {
              handleNodeAdded(curChild);
            }
          } else {
            handleNodeAdded(curChild);
          }
          curChild = nextSibling;
        }
      }
      function cleanupFromEl(fromEl, curFromNodeChild, curFromNodeKey) {
        while (curFromNodeChild) {
          var fromNextSibling = curFromNodeChild.nextSibling;
          if (curFromNodeKey = getNodeKey(curFromNodeChild)) {
            addKeyedRemoval(curFromNodeKey);
          } else {
            removeNode(curFromNodeChild, fromEl, true);
          }
          curFromNodeChild = fromNextSibling;
        }
      }
      function morphEl(fromEl, toEl, childrenOnly2) {
        var toElKey = getNodeKey(toEl);
        if (toElKey) {
          delete fromNodesLookup[toElKey];
        }
        if (!childrenOnly2) {
          if (onBeforeElUpdated(fromEl, toEl) === false) {
            return;
          }
          morphAttrs2(fromEl, toEl);
          onElUpdated(fromEl);
          if (onBeforeElChildrenUpdated(fromEl, toEl) === false) {
            return;
          }
        }
        if (fromEl.nodeName !== "TEXTAREA") {
          morphChildren(fromEl, toEl);
        } else {
          specialElHandlers.TEXTAREA(fromEl, toEl);
        }
      }
      function morphChildren(fromEl, toEl) {
        var skipFrom = skipFromChildren(fromEl);
        var curToNodeChild = toEl.firstChild;
        var curFromNodeChild = fromEl.firstChild;
        var curToNodeKey;
        var curFromNodeKey;
        var fromNextSibling;
        var toNextSibling;
        var matchingFromEl;
        outer:
          while (curToNodeChild) {
            toNextSibling = curToNodeChild.nextSibling;
            curToNodeKey = getNodeKey(curToNodeChild);
            while (!skipFrom && curFromNodeChild) {
              fromNextSibling = curFromNodeChild.nextSibling;
              if (curToNodeChild.isSameNode && curToNodeChild.isSameNode(curFromNodeChild)) {
                curToNodeChild = toNextSibling;
                curFromNodeChild = fromNextSibling;
                continue outer;
              }
              curFromNodeKey = getNodeKey(curFromNodeChild);
              var curFromNodeType = curFromNodeChild.nodeType;
              var isCompatible = void 0;
              if (curFromNodeType === curToNodeChild.nodeType) {
                if (curFromNodeType === ELEMENT_NODE) {
                  if (curToNodeKey) {
                    if (curToNodeKey !== curFromNodeKey) {
                      if (matchingFromEl = fromNodesLookup[curToNodeKey]) {
                        if (fromNextSibling === matchingFromEl) {
                          isCompatible = false;
                        } else {
                          fromEl.insertBefore(matchingFromEl, curFromNodeChild);
                          if (curFromNodeKey) {
                            addKeyedRemoval(curFromNodeKey);
                          } else {
                            removeNode(curFromNodeChild, fromEl, true);
                          }
                          curFromNodeChild = matchingFromEl;
                        }
                      } else {
                        isCompatible = false;
                      }
                    }
                  } else if (curFromNodeKey) {
                    isCompatible = false;
                  }
                  isCompatible = isCompatible !== false && compareNodeNames(curFromNodeChild, curToNodeChild);
                  if (isCompatible) {
                    morphEl(curFromNodeChild, curToNodeChild);
                  }
                } else if (curFromNodeType === TEXT_NODE || curFromNodeType == COMMENT_NODE) {
                  isCompatible = true;
                  if (curFromNodeChild.nodeValue !== curToNodeChild.nodeValue) {
                    curFromNodeChild.nodeValue = curToNodeChild.nodeValue;
                  }
                }
              }
              if (isCompatible) {
                curToNodeChild = toNextSibling;
                curFromNodeChild = fromNextSibling;
                continue outer;
              }
              if (curFromNodeKey) {
                addKeyedRemoval(curFromNodeKey);
              } else {
                removeNode(curFromNodeChild, fromEl, true);
              }
              curFromNodeChild = fromNextSibling;
            }
            if (curToNodeKey && (matchingFromEl = fromNodesLookup[curToNodeKey]) && compareNodeNames(matchingFromEl, curToNodeChild)) {
              if (!skipFrom) {
                addChild(fromEl, matchingFromEl);
              }
              morphEl(matchingFromEl, curToNodeChild);
            } else {
              var onBeforeNodeAddedResult = onBeforeNodeAdded(curToNodeChild);
              if (onBeforeNodeAddedResult !== false) {
                if (onBeforeNodeAddedResult) {
                  curToNodeChild = onBeforeNodeAddedResult;
                }
                if (curToNodeChild.actualize) {
                  curToNodeChild = curToNodeChild.actualize(fromEl.ownerDocument || doc);
                }
                addChild(fromEl, curToNodeChild);
                handleNodeAdded(curToNodeChild);
              }
            }
            curToNodeChild = toNextSibling;
            curFromNodeChild = fromNextSibling;
          }
        cleanupFromEl(fromEl, curFromNodeChild, curFromNodeKey);
        var specialElHandler = specialElHandlers[fromEl.nodeName];
        if (specialElHandler) {
          specialElHandler(fromEl, toEl);
        }
      }
      var morphedNode = fromNode;
      var morphedNodeType = morphedNode.nodeType;
      var toNodeType = toNode.nodeType;
      if (!childrenOnly) {
        if (morphedNodeType === ELEMENT_NODE) {
          if (toNodeType === ELEMENT_NODE) {
            if (!compareNodeNames(fromNode, toNode)) {
              onNodeDiscarded(fromNode);
              morphedNode = moveChildren(fromNode, createElementNS(toNode.nodeName, toNode.namespaceURI));
            }
          } else {
            morphedNode = toNode;
          }
        } else if (morphedNodeType === TEXT_NODE || morphedNodeType === COMMENT_NODE) {
          if (toNodeType === morphedNodeType) {
            if (morphedNode.nodeValue !== toNode.nodeValue) {
              morphedNode.nodeValue = toNode.nodeValue;
            }
            return morphedNode;
          } else {
            morphedNode = toNode;
          }
        }
      }
      if (morphedNode === toNode) {
        onNodeDiscarded(fromNode);
      } else {
        if (toNode.isSameNode && toNode.isSameNode(morphedNode)) {
          return;
        }
        morphEl(morphedNode, toNode, childrenOnly);
        if (keyedRemovalList) {
          for (var i = 0, len = keyedRemovalList.length; i < len; i++) {
            var elToRemove = fromNodesLookup[keyedRemovalList[i]];
            if (elToRemove) {
              removeNode(elToRemove, elToRemove.parentNode, false);
            }
          }
        }
      }
      if (!childrenOnly && morphedNode !== fromNode && fromNode.parentNode) {
        if (morphedNode.actualize) {
          morphedNode = morphedNode.actualize(fromNode.ownerDocument || doc);
        }
        fromNode.parentNode.replaceChild(morphedNode, fromNode);
      }
      return morphedNode;
    };
  }
  var morphdom = morphdomFactory(morphAttrs);
  var morphdom_esm_default = morphdom;
  var DOMPatch = class {
    static patchEl(fromEl, toEl, activeElement) {
      morphdom_esm_default(fromEl, toEl, {
        childrenOnly: false,
        onBeforeElUpdated: (fromEl2, toEl2) => {
          if (activeElement && activeElement.isSameNode(fromEl2) && dom_default.isFormInput(fromEl2)) {
            dom_default.mergeFocusedInput(fromEl2, toEl2);
            return false;
          }
        }
      });
    }
    constructor(view, container, id, html, streams, targetCID) {
      this.view = view;
      this.liveSocket = view.liveSocket;
      this.container = container;
      this.id = id;
      this.rootID = view.root.id;
      this.html = html;
      this.streams = streams;
      this.streamInserts = {};
      this.targetCID = targetCID;
      this.cidPatch = isCid(this.targetCID);
      this.pendingRemoves = [];
      this.phxRemove = this.liveSocket.binding("remove");
      this.callbacks = {
        beforeadded: [],
        beforeupdated: [],
        beforephxChildAdded: [],
        afteradded: [],
        afterupdated: [],
        afterdiscarded: [],
        afterphxChildAdded: [],
        aftertransitionsDiscarded: []
      };
    }
    before(kind, callback) {
      this.callbacks[`before${kind}`].push(callback);
    }
    after(kind, callback) {
      this.callbacks[`after${kind}`].push(callback);
    }
    trackBefore(kind, ...args) {
      this.callbacks[`before${kind}`].forEach((callback) => callback(...args));
    }
    trackAfter(kind, ...args) {
      this.callbacks[`after${kind}`].forEach((callback) => callback(...args));
    }
    markPrunableContentForRemoval() {
      let phxUpdate = this.liveSocket.binding(PHX_UPDATE);
      dom_default.all(this.container, `[${phxUpdate}=${PHX_STREAM}]`, (el) => el.innerHTML = "");
      dom_default.all(this.container, `[${phxUpdate}=append] > *, [${phxUpdate}=prepend] > *`, (el) => {
        el.setAttribute(PHX_PRUNE, "");
      });
    }
    perform() {
      let { view, liveSocket: liveSocket2, container, html } = this;
      let targetContainer = this.isCIDPatch() ? this.targetCIDContainer(html) : container;
      if (this.isCIDPatch() && !targetContainer) {
        return;
      }
      let focused = liveSocket2.getActiveElement();
      let { selectionStart, selectionEnd } = focused && dom_default.hasSelectionRange(focused) ? focused : {};
      let phxUpdate = liveSocket2.binding(PHX_UPDATE);
      let phxFeedbackFor = liveSocket2.binding(PHX_FEEDBACK_FOR);
      let disableWith = liveSocket2.binding(PHX_DISABLE_WITH);
      let phxViewportTop = liveSocket2.binding(PHX_VIEWPORT_TOP);
      let phxViewportBottom = liveSocket2.binding(PHX_VIEWPORT_BOTTOM);
      let phxTriggerExternal = liveSocket2.binding(PHX_TRIGGER_ACTION);
      let added = [];
      let trackedInputs = [];
      let updates = [];
      let appendPrependUpdates = [];
      let externalFormTriggered = null;
      let diffHTML = liveSocket2.time("premorph container prep", () => {
        return this.buildDiffHTML(container, html, phxUpdate, targetContainer);
      });
      this.trackBefore("added", container);
      this.trackBefore("updated", container, container);
      liveSocket2.time("morphdom", () => {
        this.streams.forEach(([ref, inserts, deleteIds, reset]) => {
          Object.entries(inserts).forEach(([key, [streamAt, limit]]) => {
            this.streamInserts[key] = { ref, streamAt, limit };
          });
          if (reset !== void 0) {
            dom_default.all(container, `[${PHX_STREAM_REF}="${ref}"]`, (child) => {
              this.removeStreamChildElement(child);
            });
          }
          deleteIds.forEach((id) => {
            let child = container.querySelector(`[id="${id}"]`);
            if (child) {
              this.removeStreamChildElement(child);
            }
          });
        });
        morphdom_esm_default(targetContainer, diffHTML, {
          childrenOnly: targetContainer.getAttribute(PHX_COMPONENT) === null,
          getNodeKey: (node) => {
            return dom_default.isPhxDestroyed(node) ? null : node.id;
          },
          skipFromChildren: (from) => {
            return from.getAttribute(phxUpdate) === PHX_STREAM;
          },
          addChild: (parent, child) => {
            let { ref, streamAt, limit } = this.getStreamInsert(child);
            if (ref === void 0) {
              return parent.appendChild(child);
            }
            dom_default.putSticky(child, PHX_STREAM_REF, (el) => el.setAttribute(PHX_STREAM_REF, ref));
            if (streamAt === 0) {
              parent.insertAdjacentElement("afterbegin", child);
            } else if (streamAt === -1) {
              parent.appendChild(child);
            } else if (streamAt > 0) {
              let sibling = Array.from(parent.children)[streamAt];
              parent.insertBefore(child, sibling);
            }
            let children = limit !== null && Array.from(parent.children);
            let childrenToRemove = [];
            if (limit && limit < 0 && children.length > limit * -1) {
              childrenToRemove = children.slice(0, children.length + limit);
            } else if (limit && limit >= 0 && children.length > limit) {
              childrenToRemove = children.slice(limit);
            }
            childrenToRemove.forEach((removeChild) => {
              if (!this.streamInserts[removeChild.id]) {
                this.removeStreamChildElement(removeChild);
              }
            });
          },
          onBeforeNodeAdded: (el) => {
            dom_default.maybeAddPrivateHooks(el, phxViewportTop, phxViewportBottom);
            this.trackBefore("added", el);
            return el;
          },
          onNodeAdded: (el) => {
            if (el.getAttribute) {
              this.maybeReOrderStream(el);
            }
            if (el instanceof HTMLImageElement && el.srcset) {
              el.srcset = el.srcset;
            } else if (el instanceof HTMLVideoElement && el.autoplay) {
              el.play();
            }
            if (dom_default.isNowTriggerFormExternal(el, phxTriggerExternal)) {
              externalFormTriggered = el;
            }
            if (el.getAttribute && el.getAttribute("name") && dom_default.isFormInput(el)) {
              trackedInputs.push(el);
            }
            if (dom_default.isPhxChild(el) && view.ownsElement(el) || dom_default.isPhxSticky(el) && view.ownsElement(el.parentNode)) {
              this.trackAfter("phxChildAdded", el);
            }
            added.push(el);
          },
          onNodeDiscarded: (el) => this.onNodeDiscarded(el),
          onBeforeNodeDiscarded: (el) => {
            if (el.getAttribute && el.getAttribute(PHX_PRUNE) !== null) {
              return true;
            }
            if (el.parentElement !== null && el.id && dom_default.isPhxUpdate(el.parentElement, phxUpdate, [PHX_STREAM, "append", "prepend"])) {
              return false;
            }
            if (this.maybePendingRemove(el)) {
              return false;
            }
            if (this.skipCIDSibling(el)) {
              return false;
            }
            return true;
          },
          onElUpdated: (el) => {
            if (dom_default.isNowTriggerFormExternal(el, phxTriggerExternal)) {
              externalFormTriggered = el;
            }
            updates.push(el);
            this.maybeReOrderStream(el);
          },
          onBeforeElUpdated: (fromEl, toEl) => {
            dom_default.maybeAddPrivateHooks(toEl, phxViewportTop, phxViewportBottom);
            dom_default.cleanChildNodes(toEl, phxUpdate);
            if (this.skipCIDSibling(toEl)) {
              return false;
            }
            if (dom_default.isPhxSticky(fromEl)) {
              return false;
            }
            if (dom_default.isIgnored(fromEl, phxUpdate) || fromEl.form && fromEl.form.isSameNode(externalFormTriggered)) {
              this.trackBefore("updated", fromEl, toEl);
              dom_default.mergeAttrs(fromEl, toEl, { isIgnored: true });
              updates.push(fromEl);
              dom_default.applyStickyOperations(fromEl);
              return false;
            }
            if (fromEl.type === "number" && (fromEl.validity && fromEl.validity.badInput)) {
              return false;
            }
            if (!dom_default.syncPendingRef(fromEl, toEl, disableWith)) {
              if (dom_default.isUploadInput(fromEl)) {
                this.trackBefore("updated", fromEl, toEl);
                updates.push(fromEl);
              }
              dom_default.applyStickyOperations(fromEl);
              return false;
            }
            if (dom_default.isPhxChild(toEl)) {
              let prevSession = fromEl.getAttribute(PHX_SESSION);
              dom_default.mergeAttrs(fromEl, toEl, { exclude: [PHX_STATIC] });
              if (prevSession !== "") {
                fromEl.setAttribute(PHX_SESSION, prevSession);
              }
              fromEl.setAttribute(PHX_ROOT_ID, this.rootID);
              dom_default.applyStickyOperations(fromEl);
              return false;
            }
            dom_default.copyPrivates(toEl, fromEl);
            let isFocusedFormEl = focused && fromEl.isSameNode(focused) && dom_default.isFormInput(fromEl);
            if (isFocusedFormEl && fromEl.type !== "hidden") {
              this.trackBefore("updated", fromEl, toEl);
              dom_default.mergeFocusedInput(fromEl, toEl);
              dom_default.syncAttrsToProps(fromEl);
              updates.push(fromEl);
              dom_default.applyStickyOperations(fromEl);
              trackedInputs.push(fromEl);
              return false;
            } else {
              if (dom_default.isPhxUpdate(toEl, phxUpdate, ["append", "prepend"])) {
                appendPrependUpdates.push(new DOMPostMorphRestorer(fromEl, toEl, toEl.getAttribute(phxUpdate)));
              }
              dom_default.syncAttrsToProps(toEl);
              dom_default.applyStickyOperations(toEl);
              if (toEl.getAttribute("name") && dom_default.isFormInput(toEl)) {
                trackedInputs.push(toEl);
              }
              this.trackBefore("updated", fromEl, toEl);
              return true;
            }
          }
        });
      });
      if (liveSocket2.isDebugEnabled()) {
        detectDuplicateIds();
      }
      if (appendPrependUpdates.length > 0) {
        liveSocket2.time("post-morph append/prepend restoration", () => {
          appendPrependUpdates.forEach((update) => update.perform());
        });
      }
      trackedInputs.forEach((input) => {
        dom_default.maybeHideFeedback(targetContainer, input, phxFeedbackFor);
      });
      liveSocket2.silenceEvents(() => dom_default.restoreFocus(focused, selectionStart, selectionEnd));
      dom_default.dispatchEvent(document, "phx:update");
      added.forEach((el) => this.trackAfter("added", el));
      updates.forEach((el) => this.trackAfter("updated", el));
      this.transitionPendingRemoves();
      if (externalFormTriggered) {
        liveSocket2.unload();
        externalFormTriggered.submit();
      }
      return true;
    }
    onNodeDiscarded(el) {
      if (dom_default.isPhxChild(el) || dom_default.isPhxSticky(el)) {
        this.liveSocket.destroyViewByEl(el);
      }
      this.trackAfter("discarded", el);
    }
    maybePendingRemove(node) {
      if (node.getAttribute && node.getAttribute(this.phxRemove) !== null) {
        this.pendingRemoves.push(node);
        return true;
      } else {
        return false;
      }
    }
    removeStreamChildElement(child) {
      if (!this.maybePendingRemove(child)) {
        child.remove();
        this.onNodeDiscarded(child);
      }
    }
    getStreamInsert(el) {
      let insert = el.id ? this.streamInserts[el.id] : {};
      return insert || {};
    }
    maybeReOrderStream(el) {
      let { ref, streamAt, limit } = this.getStreamInsert(el);
      if (streamAt === void 0) {
        return;
      }
      dom_default.putSticky(el, PHX_STREAM_REF, (el2) => el2.setAttribute(PHX_STREAM_REF, ref));
      if (streamAt === 0) {
        el.parentElement.insertBefore(el, el.parentElement.firstElementChild);
      } else if (streamAt > 0) {
        let children = Array.from(el.parentElement.children);
        let oldIndex = children.indexOf(el);
        if (streamAt >= children.length - 1) {
          el.parentElement.appendChild(el);
        } else {
          let sibling = children[streamAt];
          if (oldIndex > streamAt) {
            el.parentElement.insertBefore(el, sibling);
          } else {
            el.parentElement.insertBefore(el, sibling.nextElementSibling);
          }
        }
      }
    }
    transitionPendingRemoves() {
      let { pendingRemoves, liveSocket: liveSocket2 } = this;
      if (pendingRemoves.length > 0) {
        liveSocket2.transitionRemoves(pendingRemoves);
        liveSocket2.requestDOMUpdate(() => {
          pendingRemoves.forEach((el) => {
            let child = dom_default.firstPhxChild(el);
            if (child) {
              liveSocket2.destroyViewByEl(child);
            }
            el.remove();
          });
          this.trackAfter("transitionsDiscarded", pendingRemoves);
        });
      }
    }
    isCIDPatch() {
      return this.cidPatch;
    }
    skipCIDSibling(el) {
      return el.nodeType === Node.ELEMENT_NODE && el.getAttribute(PHX_SKIP) !== null;
    }
    targetCIDContainer(html) {
      if (!this.isCIDPatch()) {
        return;
      }
      let [first, ...rest] = dom_default.findComponentNodeList(this.container, this.targetCID);
      if (rest.length === 0 && dom_default.childNodeLength(html) === 1) {
        return first;
      } else {
        return first && first.parentNode;
      }
    }
    buildDiffHTML(container, html, phxUpdate, targetContainer) {
      let isCIDPatch = this.isCIDPatch();
      let isCIDWithSingleRoot = isCIDPatch && targetContainer.getAttribute(PHX_COMPONENT) === this.targetCID.toString();
      if (!isCIDPatch || isCIDWithSingleRoot) {
        return html;
      } else {
        let diffContainer = null;
        let template = document.createElement("template");
        diffContainer = dom_default.cloneNode(targetContainer);
        let [firstComponent, ...rest] = dom_default.findComponentNodeList(diffContainer, this.targetCID);
        template.innerHTML = html;
        rest.forEach((el) => el.remove());
        Array.from(diffContainer.childNodes).forEach((child) => {
          if (child.id && child.nodeType === Node.ELEMENT_NODE && child.getAttribute(PHX_COMPONENT) !== this.targetCID.toString()) {
            child.setAttribute(PHX_SKIP, "");
            child.innerHTML = "";
          }
        });
        Array.from(template.content.childNodes).forEach((el) => diffContainer.insertBefore(el, firstComponent));
        firstComponent.remove();
        return diffContainer.outerHTML;
      }
    }
    indexOf(parent, child) {
      return Array.from(parent.children).indexOf(child);
    }
  };
  var Rendered = class {
    static extract(diff) {
      let { [REPLY]: reply, [EVENTS]: events, [TITLE]: title } = diff;
      delete diff[REPLY];
      delete diff[EVENTS];
      delete diff[TITLE];
      return { diff, title, reply: reply || null, events: events || [] };
    }
    constructor(viewId, rendered) {
      this.viewId = viewId;
      this.rendered = {};
      this.mergeDiff(rendered);
    }
    parentViewId() {
      return this.viewId;
    }
    toString(onlyCids) {
      let [str, streams] = this.recursiveToString(this.rendered, this.rendered[COMPONENTS], onlyCids);
      return [str, streams];
    }
    recursiveToString(rendered, components = rendered[COMPONENTS], onlyCids) {
      onlyCids = onlyCids ? new Set(onlyCids) : null;
      let output = { buffer: "", components, onlyCids, streams: /* @__PURE__ */ new Set() };
      this.toOutputBuffer(rendered, null, output);
      return [output.buffer, output.streams];
    }
    componentCIDs(diff) {
      return Object.keys(diff[COMPONENTS] || {}).map((i) => parseInt(i));
    }
    isComponentOnlyDiff(diff) {
      if (!diff[COMPONENTS]) {
        return false;
      }
      return Object.keys(diff).length === 1;
    }
    getComponent(diff, cid) {
      return diff[COMPONENTS][cid];
    }
    mergeDiff(diff) {
      let newc = diff[COMPONENTS];
      let cache = {};
      delete diff[COMPONENTS];
      this.rendered = this.mutableMerge(this.rendered, diff);
      this.rendered[COMPONENTS] = this.rendered[COMPONENTS] || {};
      if (newc) {
        let oldc = this.rendered[COMPONENTS];
        for (let cid in newc) {
          newc[cid] = this.cachedFindComponent(cid, newc[cid], oldc, newc, cache);
        }
        for (let cid in newc) {
          oldc[cid] = newc[cid];
        }
        diff[COMPONENTS] = newc;
      }
    }
    cachedFindComponent(cid, cdiff, oldc, newc, cache) {
      if (cache[cid]) {
        return cache[cid];
      } else {
        let ndiff, stat, scid = cdiff[STATIC];
        if (isCid(scid)) {
          let tdiff;
          if (scid > 0) {
            tdiff = this.cachedFindComponent(scid, newc[scid], oldc, newc, cache);
          } else {
            tdiff = oldc[-scid];
          }
          stat = tdiff[STATIC];
          ndiff = this.cloneMerge(tdiff, cdiff);
          ndiff[STATIC] = stat;
        } else {
          ndiff = cdiff[STATIC] !== void 0 ? cdiff : this.cloneMerge(oldc[cid] || {}, cdiff);
        }
        cache[cid] = ndiff;
        return ndiff;
      }
    }
    mutableMerge(target, source) {
      if (source[STATIC] !== void 0) {
        return source;
      } else {
        this.doMutableMerge(target, source);
        return target;
      }
    }
    doMutableMerge(target, source) {
      for (let key in source) {
        let val = source[key];
        let targetVal = target[key];
        let isObjVal = isObject(val);
        if (isObjVal && val[STATIC] === void 0 && isObject(targetVal)) {
          this.doMutableMerge(targetVal, val);
        } else {
          target[key] = val;
        }
      }
    }
    cloneMerge(target, source) {
      let merged = __spreadValues(__spreadValues({}, target), source);
      for (let key in merged) {
        let val = source[key];
        let targetVal = target[key];
        if (isObject(val) && val[STATIC] === void 0 && isObject(targetVal)) {
          merged[key] = this.cloneMerge(targetVal, val);
        }
      }
      return merged;
    }
    componentToString(cid) {
      let [str, streams] = this.recursiveCIDToString(this.rendered[COMPONENTS], cid);
      return [str, streams];
    }
    pruneCIDs(cids) {
      cids.forEach((cid) => delete this.rendered[COMPONENTS][cid]);
    }
    get() {
      return this.rendered;
    }
    isNewFingerprint(diff = {}) {
      return !!diff[STATIC];
    }
    templateStatic(part, templates) {
      if (typeof part === "number") {
        return templates[part];
      } else {
        return part;
      }
    }
    toOutputBuffer(rendered, templates, output) {
      if (rendered[DYNAMICS]) {
        return this.comprehensionToBuffer(rendered, templates, output);
      }
      let { [STATIC]: statics } = rendered;
      statics = this.templateStatic(statics, templates);
      output.buffer += statics[0];
      for (let i = 1; i < statics.length; i++) {
        this.dynamicToBuffer(rendered[i - 1], templates, output);
        output.buffer += statics[i];
      }
    }
    comprehensionToBuffer(rendered, templates, output) {
      let { [DYNAMICS]: dynamics, [STATIC]: statics, [STREAM]: stream } = rendered;
      let [_ref, _inserts, deleteIds, reset] = stream || [null, {}, [], null];
      statics = this.templateStatic(statics, templates);
      let compTemplates = templates || rendered[TEMPLATES];
      for (let d = 0; d < dynamics.length; d++) {
        let dynamic = dynamics[d];
        output.buffer += statics[0];
        for (let i = 1; i < statics.length; i++) {
          this.dynamicToBuffer(dynamic[i - 1], compTemplates, output);
          output.buffer += statics[i];
        }
      }
      if (stream !== void 0 && (rendered[DYNAMICS].length > 0 || deleteIds.length > 0 || reset)) {
        delete rendered[STREAM];
        output.streams.add(stream);
      }
    }
    dynamicToBuffer(rendered, templates, output) {
      if (typeof rendered === "number") {
        let [str, streams] = this.recursiveCIDToString(output.components, rendered, output.onlyCids);
        output.buffer += str;
        output.streams = /* @__PURE__ */ new Set([...output.streams, ...streams]);
      } else if (isObject(rendered)) {
        this.toOutputBuffer(rendered, templates, output);
      } else {
        output.buffer += rendered;
      }
    }
    recursiveCIDToString(components, cid, onlyCids) {
      let component = components[cid] || logError(`no component for CID ${cid}`, components);
      let template = document.createElement("template");
      let [html, streams] = this.recursiveToString(component, components, onlyCids);
      template.innerHTML = html;
      let container = template.content;
      let skip = onlyCids && !onlyCids.has(cid);
      let [hasChildNodes, hasChildComponents] = Array.from(container.childNodes).reduce(([hasNodes, hasComponents], child, i) => {
        if (child.nodeType === Node.ELEMENT_NODE) {
          if (child.getAttribute(PHX_COMPONENT)) {
            return [hasNodes, true];
          }
          child.setAttribute(PHX_COMPONENT, cid);
          if (!child.id) {
            child.id = `${this.parentViewId()}-${cid}-${i}`;
          }
          if (skip) {
            child.setAttribute(PHX_SKIP, "");
            child.innerHTML = "";
          }
          return [true, hasComponents];
        } else {
          if (child.nodeValue.trim() !== "") {
            logError(`only HTML element tags are allowed at the root of components.

got: "${child.nodeValue.trim()}"

within:
`, template.innerHTML.trim());
            child.replaceWith(this.createSpan(child.nodeValue, cid));
            return [true, hasComponents];
          } else {
            child.remove();
            return [hasNodes, hasComponents];
          }
        }
      }, [false, false]);
      if (!hasChildNodes && !hasChildComponents) {
        logError("expected at least one HTML element tag inside a component, but the component is empty:\n", template.innerHTML.trim());
        return [this.createSpan("", cid).outerHTML, streams];
      } else if (!hasChildNodes && hasChildComponents) {
        logError("expected at least one HTML element tag directly inside a component, but only subcomponents were found. A component must render at least one HTML tag directly inside itself.", template.innerHTML.trim());
        return [template.innerHTML, streams];
      } else {
        return [template.innerHTML, streams];
      }
    }
    createSpan(text, cid) {
      let span = document.createElement("span");
      span.innerText = text;
      span.setAttribute(PHX_COMPONENT, cid);
      return span;
    }
  };
  var viewHookID = 1;
  var ViewHook = class {
    static makeID() {
      return viewHookID++;
    }
    static elementID(el) {
      return el.phxHookId;
    }
    constructor(view, el, callbacks) {
      this.__view = view;
      this.liveSocket = view.liveSocket;
      this.__callbacks = callbacks;
      this.__listeners = /* @__PURE__ */ new Set();
      this.__isDisconnected = false;
      this.el = el;
      this.el.phxHookId = this.constructor.makeID();
      for (let key in this.__callbacks) {
        this[key] = this.__callbacks[key];
      }
    }
    __mounted() {
      this.mounted && this.mounted();
    }
    __updated() {
      this.updated && this.updated();
    }
    __beforeUpdate() {
      this.beforeUpdate && this.beforeUpdate();
    }
    __destroyed() {
      this.destroyed && this.destroyed();
    }
    __reconnected() {
      if (this.__isDisconnected) {
        this.__isDisconnected = false;
        this.reconnected && this.reconnected();
      }
    }
    __disconnected() {
      this.__isDisconnected = true;
      this.disconnected && this.disconnected();
    }
    pushEvent(event, payload = {}, onReply = function() {
    }) {
      return this.__view.pushHookEvent(this.el, null, event, payload, onReply);
    }
    pushEventTo(phxTarget, event, payload = {}, onReply = function() {
    }) {
      return this.__view.withinTargets(phxTarget, (view, targetCtx) => {
        return view.pushHookEvent(this.el, targetCtx, event, payload, onReply);
      });
    }
    handleEvent(event, callback) {
      let callbackRef = (customEvent, bypass) => bypass ? event : callback(customEvent.detail);
      window.addEventListener(`phx:${event}`, callbackRef);
      this.__listeners.add(callbackRef);
      return callbackRef;
    }
    removeHandleEvent(callbackRef) {
      let event = callbackRef(null, true);
      window.removeEventListener(`phx:${event}`, callbackRef);
      this.__listeners.delete(callbackRef);
    }
    upload(name, files) {
      return this.__view.dispatchUploads(name, files);
    }
    uploadTo(phxTarget, name, files) {
      return this.__view.withinTargets(phxTarget, (view) => view.dispatchUploads(name, files));
    }
    __cleanup__() {
      this.__listeners.forEach((callbackRef) => this.removeHandleEvent(callbackRef));
    }
  };
  var focusStack = null;
  var JS = {
    exec(eventType, phxEvent, view, sourceEl, defaults) {
      let [defaultKind, defaultArgs] = defaults || [null, { callback: defaults && defaults.callback }];
      let commands = phxEvent.charAt(0) === "[" ? JSON.parse(phxEvent) : [[defaultKind, defaultArgs]];
      commands.forEach(([kind, args]) => {
        if (kind === defaultKind && defaultArgs.data) {
          args.data = Object.assign(args.data || {}, defaultArgs.data);
          args.callback = args.callback || defaultArgs.callback;
        }
        this.filterToEls(sourceEl, args).forEach((el) => {
          this[`exec_${kind}`](eventType, phxEvent, view, sourceEl, el, args);
        });
      });
    },
    isVisible(el) {
      return !!(el.offsetWidth || el.offsetHeight || el.getClientRects().length > 0);
    },
    exec_exec(eventType, phxEvent, view, sourceEl, el, [attr, to]) {
      let nodes = to ? dom_default.all(document, to) : [sourceEl];
      nodes.forEach((node) => {
        let encodedJS = node.getAttribute(attr);
        if (!encodedJS) {
          throw new Error(`expected ${attr} to contain JS command on "${to}"`);
        }
        view.liveSocket.execJS(node, encodedJS, eventType);
      });
    },
    exec_dispatch(eventType, phxEvent, view, sourceEl, el, { to, event, detail, bubbles }) {
      detail = detail || {};
      detail.dispatcher = sourceEl;
      dom_default.dispatchEvent(el, event, { detail, bubbles });
    },
    exec_push(eventType, phxEvent, view, sourceEl, el, args) {
      if (!view.isConnected()) {
        return;
      }
      let { event, data: data2, target, page_loading, loading, value, dispatcher, callback } = args;
      let pushOpts = { loading, value, target, page_loading: !!page_loading };
      let targetSrc = eventType === "change" && dispatcher ? dispatcher : sourceEl;
      let phxTarget = target || targetSrc.getAttribute(view.binding("target")) || targetSrc;
      view.withinTargets(phxTarget, (targetView, targetCtx) => {
        if (eventType === "change") {
          let { newCid, _target } = args;
          _target = _target || (dom_default.isFormInput(sourceEl) ? sourceEl.name : void 0);
          if (_target) {
            pushOpts._target = _target;
          }
          targetView.pushInput(sourceEl, targetCtx, newCid, event || phxEvent, pushOpts, callback);
        } else if (eventType === "submit") {
          let { submitter } = args;
          targetView.submitForm(sourceEl, targetCtx, event || phxEvent, submitter, pushOpts, callback);
        } else {
          targetView.pushEvent(eventType, sourceEl, targetCtx, event || phxEvent, data2, pushOpts, callback);
        }
      });
    },
    exec_navigate(eventType, phxEvent, view, sourceEl, el, { href, replace }) {
      view.liveSocket.historyRedirect(href, replace ? "replace" : "push");
    },
    exec_patch(eventType, phxEvent, view, sourceEl, el, { href, replace }) {
      view.liveSocket.pushHistoryPatch(href, replace ? "replace" : "push", sourceEl);
    },
    exec_focus(eventType, phxEvent, view, sourceEl, el) {
      window.requestAnimationFrame(() => aria_default.attemptFocus(el));
    },
    exec_focus_first(eventType, phxEvent, view, sourceEl, el) {
      window.requestAnimationFrame(() => aria_default.focusFirstInteractive(el) || aria_default.focusFirst(el));
    },
    exec_push_focus(eventType, phxEvent, view, sourceEl, el) {
      window.requestAnimationFrame(() => focusStack = el || sourceEl);
    },
    exec_pop_focus(eventType, phxEvent, view, sourceEl, el) {
      window.requestAnimationFrame(() => {
        if (focusStack) {
          focusStack.focus();
        }
        focusStack = null;
      });
    },
    exec_add_class(eventType, phxEvent, view, sourceEl, el, { names, transition: transition2, time }) {
      this.addOrRemoveClasses(el, names, [], transition2, time, view);
    },
    exec_remove_class(eventType, phxEvent, view, sourceEl, el, { names, transition: transition2, time }) {
      this.addOrRemoveClasses(el, [], names, transition2, time, view);
    },
    exec_transition(eventType, phxEvent, view, sourceEl, el, { time, transition: transition2 }) {
      this.addOrRemoveClasses(el, [], [], transition2, time, view);
    },
    exec_toggle(eventType, phxEvent, view, sourceEl, el, { display, ins, outs, time }) {
      this.toggle(eventType, view, el, display, ins, outs, time);
    },
    exec_show(eventType, phxEvent, view, sourceEl, el, { display, transition: transition2, time }) {
      this.show(eventType, view, el, display, transition2, time);
    },
    exec_hide(eventType, phxEvent, view, sourceEl, el, { display, transition: transition2, time }) {
      this.hide(eventType, view, el, display, transition2, time);
    },
    exec_set_attr(eventType, phxEvent, view, sourceEl, el, { attr: [attr, val] }) {
      this.setOrRemoveAttrs(el, [[attr, val]], []);
    },
    exec_remove_attr(eventType, phxEvent, view, sourceEl, el, { attr }) {
      this.setOrRemoveAttrs(el, [], [attr]);
    },
    show(eventType, view, el, display, transition2, time) {
      if (!this.isVisible(el)) {
        this.toggle(eventType, view, el, display, transition2, null, time);
      }
    },
    hide(eventType, view, el, display, transition2, time) {
      if (this.isVisible(el)) {
        this.toggle(eventType, view, el, display, null, transition2, time);
      }
    },
    toggle(eventType, view, el, display, ins, outs, time) {
      let [inClasses, inStartClasses, inEndClasses] = ins || [[], [], []];
      let [outClasses, outStartClasses, outEndClasses] = outs || [[], [], []];
      if (inClasses.length > 0 || outClasses.length > 0) {
        if (this.isVisible(el)) {
          let onStart = () => {
            this.addOrRemoveClasses(el, outStartClasses, inClasses.concat(inStartClasses).concat(inEndClasses));
            window.requestAnimationFrame(() => {
              this.addOrRemoveClasses(el, outClasses, []);
              window.requestAnimationFrame(() => this.addOrRemoveClasses(el, outEndClasses, outStartClasses));
            });
          };
          el.dispatchEvent(new Event("phx:hide-start"));
          view.transition(time, onStart, () => {
            this.addOrRemoveClasses(el, [], outClasses.concat(outEndClasses));
            dom_default.putSticky(el, "toggle", (currentEl) => currentEl.style.display = "none");
            el.dispatchEvent(new Event("phx:hide-end"));
          });
        } else {
          if (eventType === "remove") {
            return;
          }
          let onStart = () => {
            this.addOrRemoveClasses(el, inStartClasses, outClasses.concat(outStartClasses).concat(outEndClasses));
            let stickyDisplay = display || this.defaultDisplay(el);
            dom_default.putSticky(el, "toggle", (currentEl) => currentEl.style.display = stickyDisplay);
            window.requestAnimationFrame(() => {
              this.addOrRemoveClasses(el, inClasses, []);
              window.requestAnimationFrame(() => this.addOrRemoveClasses(el, inEndClasses, inStartClasses));
            });
          };
          el.dispatchEvent(new Event("phx:show-start"));
          view.transition(time, onStart, () => {
            this.addOrRemoveClasses(el, [], inClasses.concat(inEndClasses));
            el.dispatchEvent(new Event("phx:show-end"));
          });
        }
      } else {
        if (this.isVisible(el)) {
          window.requestAnimationFrame(() => {
            el.dispatchEvent(new Event("phx:hide-start"));
            dom_default.putSticky(el, "toggle", (currentEl) => currentEl.style.display = "none");
            el.dispatchEvent(new Event("phx:hide-end"));
          });
        } else {
          window.requestAnimationFrame(() => {
            el.dispatchEvent(new Event("phx:show-start"));
            let stickyDisplay = display || this.defaultDisplay(el);
            dom_default.putSticky(el, "toggle", (currentEl) => currentEl.style.display = stickyDisplay);
            el.dispatchEvent(new Event("phx:show-end"));
          });
        }
      }
    },
    addOrRemoveClasses(el, adds, removes, transition2, time, view) {
      let [transition_run, transition_start, transition_end] = transition2 || [[], [], []];
      if (transition_run.length > 0) {
        let onStart = () => this.addOrRemoveClasses(el, transition_start.concat(transition_run), []);
        let onDone = () => this.addOrRemoveClasses(el, adds.concat(transition_end), removes.concat(transition_run).concat(transition_start));
        return view.transition(time, onStart, onDone);
      }
      window.requestAnimationFrame(() => {
        let [prevAdds, prevRemoves] = dom_default.getSticky(el, "classes", [[], []]);
        let keepAdds = adds.filter((name) => prevAdds.indexOf(name) < 0 && !el.classList.contains(name));
        let keepRemoves = removes.filter((name) => prevRemoves.indexOf(name) < 0 && el.classList.contains(name));
        let newAdds = prevAdds.filter((name) => removes.indexOf(name) < 0).concat(keepAdds);
        let newRemoves = prevRemoves.filter((name) => adds.indexOf(name) < 0).concat(keepRemoves);
        dom_default.putSticky(el, "classes", (currentEl) => {
          currentEl.classList.remove(...newRemoves);
          currentEl.classList.add(...newAdds);
          return [newAdds, newRemoves];
        });
      });
    },
    setOrRemoveAttrs(el, sets, removes) {
      let [prevSets, prevRemoves] = dom_default.getSticky(el, "attrs", [[], []]);
      let alteredAttrs = sets.map(([attr, _val]) => attr).concat(removes);
      let newSets = prevSets.filter(([attr, _val]) => !alteredAttrs.includes(attr)).concat(sets);
      let newRemoves = prevRemoves.filter((attr) => !alteredAttrs.includes(attr)).concat(removes);
      dom_default.putSticky(el, "attrs", (currentEl) => {
        newRemoves.forEach((attr) => currentEl.removeAttribute(attr));
        newSets.forEach(([attr, val]) => currentEl.setAttribute(attr, val));
        return [newSets, newRemoves];
      });
    },
    hasAllClasses(el, classes) {
      return classes.every((name) => el.classList.contains(name));
    },
    isToggledOut(el, outClasses) {
      return !this.isVisible(el) || this.hasAllClasses(el, outClasses);
    },
    filterToEls(sourceEl, { to }) {
      return to ? dom_default.all(document, to) : [sourceEl];
    },
    defaultDisplay(el) {
      return { tr: "table-row", td: "table-cell" }[el.tagName.toLowerCase()] || "block";
    }
  };
  var js_default = JS;
  var serializeForm = (form, metadata, onlyNames = []) => {
    let _a = metadata, { submitter } = _a, meta = __objRest(_a, ["submitter"]);
    let formData = new FormData(form);
    if (submitter && submitter.hasAttribute("name") && submitter.form && submitter.form === form) {
      formData.append(submitter.name, submitter.value);
    }
    let toRemove = [];
    formData.forEach((val, key, _index) => {
      if (val instanceof File) {
        toRemove.push(key);
      }
    });
    toRemove.forEach((key) => formData.delete(key));
    let params = new URLSearchParams();
    for (let [key, val] of formData.entries()) {
      if (onlyNames.length === 0 || onlyNames.indexOf(key) >= 0) {
        params.append(key, val);
      }
    }
    for (let metaKey in meta) {
      params.append(metaKey, meta[metaKey]);
    }
    return params.toString();
  };
  var View = class {
    constructor(el, liveSocket2, parentView, flash, liveReferer) {
      this.isDead = false;
      this.liveSocket = liveSocket2;
      this.flash = flash;
      this.parent = parentView;
      this.root = parentView ? parentView.root : this;
      this.el = el;
      this.id = this.el.id;
      this.ref = 0;
      this.childJoins = 0;
      this.loaderTimer = null;
      this.pendingDiffs = [];
      this.pruningCIDs = [];
      this.redirect = false;
      this.href = null;
      this.joinCount = this.parent ? this.parent.joinCount - 1 : 0;
      this.joinPending = true;
      this.destroyed = false;
      this.joinCallback = function(onDone) {
        onDone && onDone();
      };
      this.stopCallback = function() {
      };
      this.pendingJoinOps = this.parent ? null : [];
      this.viewHooks = {};
      this.uploaders = {};
      this.formSubmits = [];
      this.children = this.parent ? null : {};
      this.root.children[this.id] = {};
      this.channel = this.liveSocket.channel(`lv:${this.id}`, () => {
        return {
          redirect: this.redirect ? this.href : void 0,
          url: this.redirect ? void 0 : this.href || void 0,
          params: this.connectParams(liveReferer),
          session: this.getSession(),
          static: this.getStatic(),
          flash: this.flash
        };
      });
    }
    setHref(href) {
      this.href = href;
    }
    setRedirect(href) {
      this.redirect = true;
      this.href = href;
    }
    isMain() {
      return this.el.hasAttribute(PHX_MAIN);
    }
    connectParams(liveReferer) {
      let params = this.liveSocket.params(this.el);
      let manifest = dom_default.all(document, `[${this.binding(PHX_TRACK_STATIC)}]`).map((node) => node.src || node.href).filter((url) => typeof url === "string");
      if (manifest.length > 0) {
        params["_track_static"] = manifest;
      }
      params["_mounts"] = this.joinCount;
      params["_live_referer"] = liveReferer;
      return params;
    }
    isConnected() {
      return this.channel.canPush();
    }
    getSession() {
      return this.el.getAttribute(PHX_SESSION);
    }
    getStatic() {
      let val = this.el.getAttribute(PHX_STATIC);
      return val === "" ? null : val;
    }
    destroy(callback = function() {
    }) {
      this.destroyAllChildren();
      this.destroyed = true;
      delete this.root.children[this.id];
      if (this.parent) {
        delete this.root.children[this.parent.id][this.id];
      }
      clearTimeout(this.loaderTimer);
      let onFinished = () => {
        callback();
        for (let id in this.viewHooks) {
          this.destroyHook(this.viewHooks[id]);
        }
      };
      dom_default.markPhxChildDestroyed(this.el);
      this.log("destroyed", () => ["the child has been removed from the parent"]);
      this.channel.leave().receive("ok", onFinished).receive("error", onFinished).receive("timeout", onFinished);
    }
    setContainerClasses(...classes) {
      this.el.classList.remove(PHX_CONNECTED_CLASS, PHX_LOADING_CLASS, PHX_ERROR_CLASS, PHX_CLIENT_ERROR_CLASS, PHX_SERVER_ERROR_CLASS);
      this.el.classList.add(...classes);
    }
    showLoader(timeout) {
      clearTimeout(this.loaderTimer);
      if (timeout) {
        this.loaderTimer = setTimeout(() => this.showLoader(), timeout);
      } else {
        for (let id in this.viewHooks) {
          this.viewHooks[id].__disconnected();
        }
        this.setContainerClasses(PHX_LOADING_CLASS);
      }
    }
    execAll(binding) {
      dom_default.all(this.el, `[${binding}]`, (el) => this.liveSocket.execJS(el, el.getAttribute(binding)));
    }
    hideLoader() {
      clearTimeout(this.loaderTimer);
      this.setContainerClasses(PHX_CONNECTED_CLASS);
      this.execAll(this.binding("connected"));
    }
    triggerReconnected() {
      for (let id in this.viewHooks) {
        this.viewHooks[id].__reconnected();
      }
    }
    log(kind, msgCallback) {
      this.liveSocket.log(this, kind, msgCallback);
    }
    transition(time, onStart, onDone = function() {
    }) {
      this.liveSocket.transition(time, onStart, onDone);
    }
    withinTargets(phxTarget, callback) {
      if (phxTarget instanceof HTMLElement || phxTarget instanceof SVGElement) {
        return this.liveSocket.owner(phxTarget, (view) => callback(view, phxTarget));
      }
      if (isCid(phxTarget)) {
        let targets = dom_default.findComponentNodeList(this.el, phxTarget);
        if (targets.length === 0) {
          logError(`no component found matching phx-target of ${phxTarget}`);
        } else {
          callback(this, parseInt(phxTarget));
        }
      } else {
        let targets = Array.from(document.querySelectorAll(phxTarget));
        if (targets.length === 0) {
          logError(`nothing found matching the phx-target selector "${phxTarget}"`);
        }
        targets.forEach((target) => this.liveSocket.owner(target, (view) => callback(view, target)));
      }
    }
    applyDiff(type, rawDiff, callback) {
      this.log(type, () => ["", clone(rawDiff)]);
      let { diff, reply, events, title } = Rendered.extract(rawDiff);
      callback({ diff, reply, events });
      if (title) {
        window.requestAnimationFrame(() => dom_default.putTitle(title));
      }
    }
    onJoin(resp) {
      let { rendered, container } = resp;
      if (container) {
        let [tag, attrs] = container;
        this.el = dom_default.replaceRootContainer(this.el, tag, attrs);
      }
      this.childJoins = 0;
      this.joinPending = true;
      this.flash = null;
      browser_default.dropLocal(this.liveSocket.localStorage, window.location.pathname, CONSECUTIVE_RELOADS);
      this.applyDiff("mount", rendered, ({ diff, events }) => {
        this.rendered = new Rendered(this.id, diff);
        let [html, streams] = this.renderContainer(null, "join");
        this.dropPendingRefs();
        let forms = this.formsForRecovery(html);
        this.joinCount++;
        if (forms.length > 0) {
          forms.forEach(([form, newForm, newCid], i) => {
            this.pushFormRecovery(form, newCid, (resp2) => {
              if (i === forms.length - 1) {
                this.onJoinComplete(resp2, html, streams, events);
              }
            });
          });
        } else {
          this.onJoinComplete(resp, html, streams, events);
        }
      });
    }
    dropPendingRefs() {
      dom_default.all(document, `[${PHX_REF_SRC}="${this.id}"][${PHX_REF}]`, (el) => {
        el.removeAttribute(PHX_REF);
        el.removeAttribute(PHX_REF_SRC);
      });
    }
    onJoinComplete({ live_patch }, html, streams, events) {
      if (this.joinCount > 1 || this.parent && !this.parent.isJoinPending()) {
        return this.applyJoinPatch(live_patch, html, streams, events);
      }
      let newChildren = dom_default.findPhxChildrenInFragment(html, this.id).filter((toEl) => {
        let fromEl = toEl.id && this.el.querySelector(`[id="${toEl.id}"]`);
        let phxStatic = fromEl && fromEl.getAttribute(PHX_STATIC);
        if (phxStatic) {
          toEl.setAttribute(PHX_STATIC, phxStatic);
        }
        return this.joinChild(toEl);
      });
      if (newChildren.length === 0) {
        if (this.parent) {
          this.root.pendingJoinOps.push([this, () => this.applyJoinPatch(live_patch, html, streams, events)]);
          this.parent.ackJoin(this);
        } else {
          this.onAllChildJoinsComplete();
          this.applyJoinPatch(live_patch, html, streams, events);
        }
      } else {
        this.root.pendingJoinOps.push([this, () => this.applyJoinPatch(live_patch, html, streams, events)]);
      }
    }
    attachTrueDocEl() {
      this.el = dom_default.byId(this.id);
      this.el.setAttribute(PHX_ROOT_ID, this.root.id);
    }
    execNewMounted() {
      let phxViewportTop = this.binding(PHX_VIEWPORT_TOP);
      let phxViewportBottom = this.binding(PHX_VIEWPORT_BOTTOM);
      dom_default.all(this.el, `[${phxViewportTop}], [${phxViewportBottom}]`, (hookEl) => {
        dom_default.maybeAddPrivateHooks(hookEl, phxViewportTop, phxViewportBottom);
        this.maybeAddNewHook(hookEl);
      });
      dom_default.all(this.el, `[${this.binding(PHX_HOOK)}], [data-phx-${PHX_HOOK}]`, (hookEl) => {
        this.maybeAddNewHook(hookEl);
      });
      dom_default.all(this.el, `[${this.binding(PHX_MOUNTED)}]`, (el) => this.maybeMounted(el));
    }
    applyJoinPatch(live_patch, html, streams, events) {
      this.attachTrueDocEl();
      let patch = new DOMPatch(this, this.el, this.id, html, streams, null);
      patch.markPrunableContentForRemoval();
      this.performPatch(patch, false);
      this.joinNewChildren();
      this.execNewMounted();
      this.joinPending = false;
      this.liveSocket.dispatchEvents(events);
      this.applyPendingUpdates();
      if (live_patch) {
        let { kind, to } = live_patch;
        this.liveSocket.historyPatch(to, kind);
      }
      this.hideLoader();
      if (this.joinCount > 1) {
        this.triggerReconnected();
      }
      this.stopCallback();
    }
    triggerBeforeUpdateHook(fromEl, toEl) {
      this.liveSocket.triggerDOM("onBeforeElUpdated", [fromEl, toEl]);
      let hook = this.getHook(fromEl);
      let isIgnored = hook && dom_default.isIgnored(fromEl, this.binding(PHX_UPDATE));
      if (hook && !fromEl.isEqualNode(toEl) && !(isIgnored && isEqualObj(fromEl.dataset, toEl.dataset))) {
        hook.__beforeUpdate();
        return hook;
      }
    }
    maybeMounted(el) {
      let phxMounted = el.getAttribute(this.binding(PHX_MOUNTED));
      let hasBeenInvoked = phxMounted && dom_default.private(el, "mounted");
      if (phxMounted && !hasBeenInvoked) {
        this.liveSocket.execJS(el, phxMounted);
        dom_default.putPrivate(el, "mounted", true);
      }
    }
    maybeAddNewHook(el, force) {
      let newHook = this.addHook(el);
      if (newHook) {
        newHook.__mounted();
      }
    }
    performPatch(patch, pruneCids) {
      let removedEls = [];
      let phxChildrenAdded = false;
      let updatedHookIds = /* @__PURE__ */ new Set();
      patch.after("added", (el) => {
        this.liveSocket.triggerDOM("onNodeAdded", [el]);
        this.maybeAddNewHook(el);
        if (el.getAttribute) {
          this.maybeMounted(el);
        }
      });
      patch.after("phxChildAdded", (el) => {
        if (dom_default.isPhxSticky(el)) {
          this.liveSocket.joinRootViews();
        } else {
          phxChildrenAdded = true;
        }
      });
      patch.before("updated", (fromEl, toEl) => {
        let hook = this.triggerBeforeUpdateHook(fromEl, toEl);
        if (hook) {
          updatedHookIds.add(fromEl.id);
        }
      });
      patch.after("updated", (el) => {
        if (updatedHookIds.has(el.id)) {
          this.getHook(el).__updated();
        }
      });
      patch.after("discarded", (el) => {
        if (el.nodeType === Node.ELEMENT_NODE) {
          removedEls.push(el);
        }
      });
      patch.after("transitionsDiscarded", (els) => this.afterElementsRemoved(els, pruneCids));
      patch.perform();
      this.afterElementsRemoved(removedEls, pruneCids);
      return phxChildrenAdded;
    }
    afterElementsRemoved(elements, pruneCids) {
      let destroyedCIDs = [];
      elements.forEach((parent) => {
        let components = dom_default.all(parent, `[${PHX_COMPONENT}]`);
        let hooks = dom_default.all(parent, `[${this.binding(PHX_HOOK)}]`);
        components.concat(parent).forEach((el) => {
          let cid = this.componentID(el);
          if (isCid(cid) && destroyedCIDs.indexOf(cid) === -1) {
            destroyedCIDs.push(cid);
          }
        });
        hooks.concat(parent).forEach((hookEl) => {
          let hook = this.getHook(hookEl);
          hook && this.destroyHook(hook);
        });
      });
      if (pruneCids) {
        this.maybePushComponentsDestroyed(destroyedCIDs);
      }
    }
    joinNewChildren() {
      dom_default.findPhxChildren(this.el, this.id).forEach((el) => this.joinChild(el));
    }
    getChildById(id) {
      return this.root.children[this.id][id];
    }
    getDescendentByEl(el) {
      if (el.id === this.id) {
        return this;
      } else {
        return this.children[el.getAttribute(PHX_PARENT_ID)][el.id];
      }
    }
    destroyDescendent(id) {
      for (let parentId in this.root.children) {
        for (let childId in this.root.children[parentId]) {
          if (childId === id) {
            return this.root.children[parentId][childId].destroy();
          }
        }
      }
    }
    joinChild(el) {
      let child = this.getChildById(el.id);
      if (!child) {
        let view = new View(el, this.liveSocket, this);
        this.root.children[this.id][view.id] = view;
        view.join();
        this.childJoins++;
        return true;
      }
    }
    isJoinPending() {
      return this.joinPending;
    }
    ackJoin(_child) {
      this.childJoins--;
      if (this.childJoins === 0) {
        if (this.parent) {
          this.parent.ackJoin(this);
        } else {
          this.onAllChildJoinsComplete();
        }
      }
    }
    onAllChildJoinsComplete() {
      this.joinCallback(() => {
        this.pendingJoinOps.forEach(([view, op]) => {
          if (!view.isDestroyed()) {
            op();
          }
        });
        this.pendingJoinOps = [];
      });
    }
    update(diff, events) {
      if (this.isJoinPending() || this.liveSocket.hasPendingLink() && this.root.isMain()) {
        return this.pendingDiffs.push({ diff, events });
      }
      this.rendered.mergeDiff(diff);
      let phxChildrenAdded = false;
      if (this.rendered.isComponentOnlyDiff(diff)) {
        this.liveSocket.time("component patch complete", () => {
          let parentCids = dom_default.findParentCIDs(this.el, this.rendered.componentCIDs(diff));
          parentCids.forEach((parentCID) => {
            if (this.componentPatch(this.rendered.getComponent(diff, parentCID), parentCID)) {
              phxChildrenAdded = true;
            }
          });
        });
      } else if (!isEmpty(diff)) {
        this.liveSocket.time("full patch complete", () => {
          let [html, streams] = this.renderContainer(diff, "update");
          let patch = new DOMPatch(this, this.el, this.id, html, streams, null);
          phxChildrenAdded = this.performPatch(patch, true);
        });
      }
      this.liveSocket.dispatchEvents(events);
      if (phxChildrenAdded) {
        this.joinNewChildren();
      }
    }
    renderContainer(diff, kind) {
      return this.liveSocket.time(`toString diff (${kind})`, () => {
        let tag = this.el.tagName;
        let cids = diff ? this.rendered.componentCIDs(diff).concat(this.pruningCIDs) : null;
        let [html, streams] = this.rendered.toString(cids);
        return [`<${tag}>${html}</${tag}>`, streams];
      });
    }
    componentPatch(diff, cid) {
      if (isEmpty(diff))
        return false;
      let [html, streams] = this.rendered.componentToString(cid);
      let patch = new DOMPatch(this, this.el, this.id, html, streams, cid);
      let childrenAdded = this.performPatch(patch, true);
      return childrenAdded;
    }
    getHook(el) {
      return this.viewHooks[ViewHook.elementID(el)];
    }
    addHook(el) {
      if (ViewHook.elementID(el) || !el.getAttribute) {
        return;
      }
      let hookName = el.getAttribute(`data-phx-${PHX_HOOK}`) || el.getAttribute(this.binding(PHX_HOOK));
      if (hookName && !this.ownsElement(el)) {
        return;
      }
      let callbacks = this.liveSocket.getHookCallbacks(hookName);
      if (callbacks) {
        if (!el.id) {
          logError(`no DOM ID for hook "${hookName}". Hooks require a unique ID on each element.`, el);
        }
        let hook = new ViewHook(this, el, callbacks);
        this.viewHooks[ViewHook.elementID(hook.el)] = hook;
        return hook;
      } else if (hookName !== null) {
        logError(`unknown hook found for "${hookName}"`, el);
      }
    }
    destroyHook(hook) {
      hook.__destroyed();
      hook.__cleanup__();
      delete this.viewHooks[ViewHook.elementID(hook.el)];
    }
    applyPendingUpdates() {
      this.pendingDiffs.forEach(({ diff, events }) => this.update(diff, events));
      this.pendingDiffs = [];
      this.eachChild((child) => child.applyPendingUpdates());
    }
    eachChild(callback) {
      let children = this.root.children[this.id] || {};
      for (let id in children) {
        callback(this.getChildById(id));
      }
    }
    onChannel(event, cb) {
      this.liveSocket.onChannel(this.channel, event, (resp) => {
        if (this.isJoinPending()) {
          this.root.pendingJoinOps.push([this, () => cb(resp)]);
        } else {
          this.liveSocket.requestDOMUpdate(() => cb(resp));
        }
      });
    }
    bindChannel() {
      this.liveSocket.onChannel(this.channel, "diff", (rawDiff) => {
        this.liveSocket.requestDOMUpdate(() => {
          this.applyDiff("update", rawDiff, ({ diff, events }) => this.update(diff, events));
        });
      });
      this.onChannel("redirect", ({ to, flash }) => this.onRedirect({ to, flash }));
      this.onChannel("live_patch", (redir) => this.onLivePatch(redir));
      this.onChannel("live_redirect", (redir) => this.onLiveRedirect(redir));
      this.channel.onError((reason) => this.onError(reason));
      this.channel.onClose((reason) => this.onClose(reason));
    }
    destroyAllChildren() {
      this.eachChild((child) => child.destroy());
    }
    onLiveRedirect(redir) {
      let { to, kind, flash } = redir;
      let url = this.expandURL(to);
      this.liveSocket.historyRedirect(url, kind, flash);
    }
    onLivePatch(redir) {
      let { to, kind } = redir;
      this.href = this.expandURL(to);
      this.liveSocket.historyPatch(to, kind);
    }
    expandURL(to) {
      return to.startsWith("/") ? `${window.location.protocol}//${window.location.host}${to}` : to;
    }
    onRedirect({ to, flash }) {
      this.liveSocket.redirect(to, flash);
    }
    isDestroyed() {
      return this.destroyed;
    }
    joinDead() {
      this.isDead = true;
    }
    join(callback) {
      this.showLoader(this.liveSocket.loaderTimeout);
      this.bindChannel();
      if (this.isMain()) {
        this.stopCallback = this.liveSocket.withPageLoading({ to: this.href, kind: "initial" });
      }
      this.joinCallback = (onDone) => {
        onDone = onDone || function() {
        };
        callback ? callback(this.joinCount, onDone) : onDone();
      };
      this.liveSocket.wrapPush(this, { timeout: false }, () => {
        return this.channel.join().receive("ok", (data2) => {
          if (!this.isDestroyed()) {
            this.liveSocket.requestDOMUpdate(() => this.onJoin(data2));
          }
        }).receive("error", (resp) => !this.isDestroyed() && this.onJoinError(resp)).receive("timeout", () => !this.isDestroyed() && this.onJoinError({ reason: "timeout" }));
      });
    }
    onJoinError(resp) {
      if (resp.reason === "reload") {
        this.log("error", () => [`failed mount with ${resp.status}. Falling back to page request`, resp]);
        return this.onRedirect({ to: this.href });
      } else if (resp.reason === "unauthorized" || resp.reason === "stale") {
        this.log("error", () => ["unauthorized live_redirect. Falling back to page request", resp]);
        return this.onRedirect({ to: this.href });
      }
      if (resp.redirect || resp.live_redirect) {
        this.joinPending = false;
        this.channel.leave();
      }
      if (resp.redirect) {
        return this.onRedirect(resp.redirect);
      }
      if (resp.live_redirect) {
        return this.onLiveRedirect(resp.live_redirect);
      }
      this.displayError([PHX_LOADING_CLASS, PHX_ERROR_CLASS, PHX_SERVER_ERROR_CLASS]);
      this.log("error", () => ["unable to join", resp]);
      if (this.liveSocket.isConnected()) {
        this.liveSocket.reloadWithJitter(this);
      }
    }
    onClose(reason) {
      if (this.isDestroyed()) {
        return;
      }
      if (this.liveSocket.hasPendingLink() && reason !== "leave") {
        return this.liveSocket.reloadWithJitter(this);
      }
      this.destroyAllChildren();
      this.liveSocket.dropActiveElement(this);
      if (document.activeElement) {
        document.activeElement.blur();
      }
      if (this.liveSocket.isUnloaded()) {
        this.showLoader(BEFORE_UNLOAD_LOADER_TIMEOUT);
      }
    }
    onError(reason) {
      this.onClose(reason);
      if (this.liveSocket.isConnected()) {
        this.log("error", () => ["view crashed", reason]);
      }
      if (!this.liveSocket.isUnloaded()) {
        if (this.liveSocket.isConnected()) {
          this.displayError([PHX_LOADING_CLASS, PHX_ERROR_CLASS, PHX_SERVER_ERROR_CLASS]);
        } else {
          this.displayError([PHX_LOADING_CLASS, PHX_ERROR_CLASS, PHX_CLIENT_ERROR_CLASS]);
        }
      }
    }
    displayError(classes) {
      if (this.isMain()) {
        dom_default.dispatchEvent(window, "phx:page-loading-start", { detail: { to: this.href, kind: "error" } });
      }
      this.showLoader();
      this.setContainerClasses(...classes);
      this.execAll(this.binding("disconnected"));
    }
    pushWithReply(refGenerator, event, payload, onReply = function() {
    }) {
      if (!this.isConnected()) {
        return;
      }
      let [ref, [el], opts] = refGenerator ? refGenerator() : [null, [], {}];
      let onLoadingDone = function() {
      };
      if (opts.page_loading || el && el.getAttribute(this.binding(PHX_PAGE_LOADING)) !== null) {
        onLoadingDone = this.liveSocket.withPageLoading({ kind: "element", target: el });
      }
      if (typeof payload.cid !== "number") {
        delete payload.cid;
      }
      return this.liveSocket.wrapPush(this, { timeout: true }, () => {
        return this.channel.push(event, payload, PUSH_TIMEOUT).receive("ok", (resp) => {
          let finish = (hookReply) => {
            if (resp.redirect) {
              this.onRedirect(resp.redirect);
            }
            if (resp.live_patch) {
              this.onLivePatch(resp.live_patch);
            }
            if (resp.live_redirect) {
              this.onLiveRedirect(resp.live_redirect);
            }
            onLoadingDone();
            onReply(resp, hookReply);
          };
          if (resp.diff) {
            this.liveSocket.requestDOMUpdate(() => {
              this.applyDiff("update", resp.diff, ({ diff, reply, events }) => {
                if (ref !== null) {
                  this.undoRefs(ref);
                }
                this.update(diff, events);
                finish(reply);
              });
            });
          } else {
            if (ref !== null) {
              this.undoRefs(ref);
            }
            finish(null);
          }
        });
      });
    }
    undoRefs(ref) {
      if (!this.isConnected()) {
        return;
      }
      dom_default.all(document, `[${PHX_REF_SRC}="${this.id}"][${PHX_REF}="${ref}"]`, (el) => {
        let disabledVal = el.getAttribute(PHX_DISABLED);
        el.removeAttribute(PHX_REF);
        el.removeAttribute(PHX_REF_SRC);
        if (el.getAttribute(PHX_READONLY) !== null) {
          el.readOnly = false;
          el.removeAttribute(PHX_READONLY);
        }
        if (disabledVal !== null) {
          el.disabled = disabledVal === "true" ? true : false;
          el.removeAttribute(PHX_DISABLED);
        }
        PHX_EVENT_CLASSES.forEach((className) => dom_default.removeClass(el, className));
        let disableRestore = el.getAttribute(PHX_DISABLE_WITH_RESTORE);
        if (disableRestore !== null) {
          el.innerText = disableRestore;
          el.removeAttribute(PHX_DISABLE_WITH_RESTORE);
        }
        let toEl = dom_default.private(el, PHX_REF);
        if (toEl) {
          let hook = this.triggerBeforeUpdateHook(el, toEl);
          DOMPatch.patchEl(el, toEl, this.liveSocket.getActiveElement());
          if (hook) {
            hook.__updated();
          }
          dom_default.deletePrivate(el, PHX_REF);
        }
      });
    }
    putRef(elements, event, opts = {}) {
      let newRef = this.ref++;
      let disableWith = this.binding(PHX_DISABLE_WITH);
      if (opts.loading) {
        elements = elements.concat(dom_default.all(document, opts.loading));
      }
      elements.forEach((el) => {
        el.classList.add(`phx-${event}-loading`);
        el.setAttribute(PHX_REF, newRef);
        el.setAttribute(PHX_REF_SRC, this.el.id);
        let disableText = el.getAttribute(disableWith);
        if (disableText !== null) {
          if (!el.getAttribute(PHX_DISABLE_WITH_RESTORE)) {
            el.setAttribute(PHX_DISABLE_WITH_RESTORE, el.innerText);
          }
          if (disableText !== "") {
            el.innerText = disableText;
          }
          el.setAttribute("disabled", "");
        }
      });
      return [newRef, elements, opts];
    }
    componentID(el) {
      let cid = el.getAttribute && el.getAttribute(PHX_COMPONENT);
      return cid ? parseInt(cid) : null;
    }
    targetComponentID(target, targetCtx, opts = {}) {
      if (isCid(targetCtx)) {
        return targetCtx;
      }
      let cidOrSelector = target.getAttribute(this.binding("target"));
      if (isCid(cidOrSelector)) {
        return parseInt(cidOrSelector);
      } else if (targetCtx && (cidOrSelector !== null || opts.target)) {
        return this.closestComponentID(targetCtx);
      } else {
        return null;
      }
    }
    closestComponentID(targetCtx) {
      if (isCid(targetCtx)) {
        return targetCtx;
      } else if (targetCtx) {
        return maybe(targetCtx.closest(`[${PHX_COMPONENT}]`), (el) => this.ownsElement(el) && this.componentID(el));
      } else {
        return null;
      }
    }
    pushHookEvent(el, targetCtx, event, payload, onReply) {
      if (!this.isConnected()) {
        this.log("hook", () => ["unable to push hook event. LiveView not connected", event, payload]);
        return false;
      }
      let [ref, els, opts] = this.putRef([el], "hook");
      this.pushWithReply(() => [ref, els, opts], "event", {
        type: "hook",
        event,
        value: payload,
        cid: this.closestComponentID(targetCtx)
      }, (resp, reply) => onReply(reply, ref));
      return ref;
    }
    extractMeta(el, meta, value) {
      let prefix2 = this.binding("value-");
      for (let i = 0; i < el.attributes.length; i++) {
        if (!meta) {
          meta = {};
        }
        let name = el.attributes[i].name;
        if (name.startsWith(prefix2)) {
          meta[name.replace(prefix2, "")] = el.getAttribute(name);
        }
      }
      if (el.value !== void 0 && !(el instanceof HTMLFormElement)) {
        if (!meta) {
          meta = {};
        }
        meta.value = el.value;
        if (el.tagName === "INPUT" && CHECKABLE_INPUTS.indexOf(el.type) >= 0 && !el.checked) {
          delete meta.value;
        }
      }
      if (value) {
        if (!meta) {
          meta = {};
        }
        for (let key in value) {
          meta[key] = value[key];
        }
      }
      return meta;
    }
    pushEvent(type, el, targetCtx, phxEvent, meta, opts = {}, onReply) {
      this.pushWithReply(() => this.putRef([el], type, opts), "event", {
        type,
        event: phxEvent,
        value: this.extractMeta(el, meta, opts.value),
        cid: this.targetComponentID(el, targetCtx, opts)
      }, (resp, reply) => onReply && onReply(reply));
    }
    pushFileProgress(fileEl, entryRef, progress, onReply = function() {
    }) {
      this.liveSocket.withinOwners(fileEl.form, (view, targetCtx) => {
        view.pushWithReply(null, "progress", {
          event: fileEl.getAttribute(view.binding(PHX_PROGRESS)),
          ref: fileEl.getAttribute(PHX_UPLOAD_REF),
          entry_ref: entryRef,
          progress,
          cid: view.targetComponentID(fileEl.form, targetCtx)
        }, onReply);
      });
    }
    pushInput(inputEl, targetCtx, forceCid, phxEvent, opts, callback) {
      let uploads;
      let cid = isCid(forceCid) ? forceCid : this.targetComponentID(inputEl.form, targetCtx);
      let refGenerator = () => this.putRef([inputEl, inputEl.form], "change", opts);
      let formData;
      let meta = this.extractMeta(inputEl.form);
      if (inputEl.getAttribute(this.binding("change"))) {
        formData = serializeForm(inputEl.form, __spreadValues({ _target: opts._target }, meta), [inputEl.name]);
      } else {
        formData = serializeForm(inputEl.form, __spreadValues({ _target: opts._target }, meta));
      }
      if (dom_default.isUploadInput(inputEl) && inputEl.files && inputEl.files.length > 0) {
        LiveUploader.trackFiles(inputEl, Array.from(inputEl.files));
      }
      uploads = LiveUploader.serializeUploads(inputEl);
      let event = {
        type: "form",
        event: phxEvent,
        value: formData,
        uploads,
        cid
      };
      this.pushWithReply(refGenerator, "event", event, (resp) => {
        dom_default.showError(inputEl, this.liveSocket.binding(PHX_FEEDBACK_FOR));
        if (dom_default.isUploadInput(inputEl) && inputEl.getAttribute("data-phx-auto-upload") !== null) {
          if (LiveUploader.filesAwaitingPreflight(inputEl).length > 0) {
            let [ref, _els] = refGenerator();
            this.uploadFiles(inputEl.form, targetCtx, ref, cid, (_uploads) => {
              callback && callback(resp);
              this.triggerAwaitingSubmit(inputEl.form);
            });
          }
        } else {
          callback && callback(resp);
        }
      });
    }
    triggerAwaitingSubmit(formEl) {
      let awaitingSubmit = this.getScheduledSubmit(formEl);
      if (awaitingSubmit) {
        let [_el, _ref, _opts, callback] = awaitingSubmit;
        this.cancelSubmit(formEl);
        callback();
      }
    }
    getScheduledSubmit(formEl) {
      return this.formSubmits.find(([el, _ref, _opts, _callback]) => el.isSameNode(formEl));
    }
    scheduleSubmit(formEl, ref, opts, callback) {
      if (this.getScheduledSubmit(formEl)) {
        return true;
      }
      this.formSubmits.push([formEl, ref, opts, callback]);
    }
    cancelSubmit(formEl) {
      this.formSubmits = this.formSubmits.filter(([el, ref, _callback]) => {
        if (el.isSameNode(formEl)) {
          this.undoRefs(ref);
          return false;
        } else {
          return true;
        }
      });
    }
    disableForm(formEl, opts = {}) {
      let filterIgnored = (el) => {
        let userIgnored = closestPhxBinding(el, `${this.binding(PHX_UPDATE)}=ignore`, el.form);
        return !(userIgnored || closestPhxBinding(el, "data-phx-update=ignore", el.form));
      };
      let filterDisables = (el) => {
        return el.hasAttribute(this.binding(PHX_DISABLE_WITH));
      };
      let filterButton = (el) => el.tagName == "BUTTON";
      let filterInput = (el) => ["INPUT", "TEXTAREA", "SELECT"].includes(el.tagName);
      let formElements = Array.from(formEl.elements);
      let disables = formElements.filter(filterDisables);
      let buttons = formElements.filter(filterButton).filter(filterIgnored);
      let inputs = formElements.filter(filterInput).filter(filterIgnored);
      buttons.forEach((button) => {
        button.setAttribute(PHX_DISABLED, button.disabled);
        button.disabled = true;
      });
      inputs.forEach((input) => {
        input.setAttribute(PHX_READONLY, input.readOnly);
        input.readOnly = true;
        if (input.files) {
          input.setAttribute(PHX_DISABLED, input.disabled);
          input.disabled = true;
        }
      });
      formEl.setAttribute(this.binding(PHX_PAGE_LOADING), "");
      return this.putRef([formEl].concat(disables).concat(buttons).concat(inputs), "submit", opts);
    }
    pushFormSubmit(formEl, targetCtx, phxEvent, submitter, opts, onReply) {
      let refGenerator = () => this.disableForm(formEl, opts);
      let cid = this.targetComponentID(formEl, targetCtx);
      if (LiveUploader.hasUploadsInProgress(formEl)) {
        let [ref, _els] = refGenerator();
        let push = () => this.pushFormSubmit(formEl, submitter, targetCtx, phxEvent, opts, onReply);
        return this.scheduleSubmit(formEl, ref, opts, push);
      } else if (LiveUploader.inputsAwaitingPreflight(formEl).length > 0) {
        let [ref, els] = refGenerator();
        let proxyRefGen = () => [ref, els, opts];
        this.uploadFiles(formEl, targetCtx, ref, cid, (_uploads) => {
          let meta = this.extractMeta(formEl);
          let formData = serializeForm(formEl, __spreadValues({ submitter }, meta));
          this.pushWithReply(proxyRefGen, "event", {
            type: "form",
            event: phxEvent,
            value: formData,
            cid
          }, onReply);
        });
      } else if (!(formEl.hasAttribute(PHX_REF) && formEl.classList.contains("phx-submit-loading"))) {
        let meta = this.extractMeta(formEl);
        let formData = serializeForm(formEl, __spreadValues({ submitter }, meta));
        this.pushWithReply(refGenerator, "event", {
          type: "form",
          event: phxEvent,
          value: formData,
          cid
        }, onReply);
      }
    }
    uploadFiles(formEl, targetCtx, ref, cid, onComplete) {
      let joinCountAtUpload = this.joinCount;
      let inputEls = LiveUploader.activeFileInputs(formEl);
      let numFileInputsInProgress = inputEls.length;
      inputEls.forEach((inputEl) => {
        let uploader = new LiveUploader(inputEl, this, () => {
          numFileInputsInProgress--;
          if (numFileInputsInProgress === 0) {
            onComplete();
          }
        });
        this.uploaders[inputEl] = uploader;
        let entries = uploader.entries().map((entry) => entry.toPreflightPayload());
        let payload = {
          ref: inputEl.getAttribute(PHX_UPLOAD_REF),
          entries,
          cid: this.targetComponentID(inputEl.form, targetCtx)
        };
        this.log("upload", () => ["sending preflight request", payload]);
        this.pushWithReply(null, "allow_upload", payload, (resp) => {
          this.log("upload", () => ["got preflight response", resp]);
          if (resp.error) {
            this.undoRefs(ref);
            let [entry_ref, reason] = resp.error;
            this.log("upload", () => [`error for entry ${entry_ref}`, reason]);
          } else {
            let onError = (callback) => {
              this.channel.onError(() => {
                if (this.joinCount === joinCountAtUpload) {
                  callback();
                }
              });
            };
            uploader.initAdapterUpload(resp, onError, this.liveSocket);
          }
        });
      });
    }
    dispatchUploads(name, filesOrBlobs) {
      let inputs = dom_default.findUploadInputs(this.el).filter((el) => el.name === name);
      if (inputs.length === 0) {
        logError(`no live file inputs found matching the name "${name}"`);
      } else if (inputs.length > 1) {
        logError(`duplicate live file inputs found matching the name "${name}"`);
      } else {
        dom_default.dispatchEvent(inputs[0], PHX_TRACK_UPLOADS, { detail: { files: filesOrBlobs } });
      }
    }
    pushFormRecovery(form, newCid, callback) {
      this.liveSocket.withinOwners(form, (view, targetCtx) => {
        let phxChange = this.binding("change");
        let inputs = Array.from(form.elements).filter((el) => dom_default.isFormInput(el) && el.name && !el.hasAttribute(phxChange));
        if (inputs.length === 0) {
          return;
        }
        let input = inputs.find((el) => el.type !== "hidden") || input[0];
        let phxEvent = form.getAttribute(this.binding(PHX_AUTO_RECOVER)) || form.getAttribute(this.binding("change"));
        js_default.exec("change", phxEvent, view, input, ["push", { _target: input.name, newCid, callback }]);
      });
    }
    pushLinkPatch(href, targetEl, callback) {
      let linkRef = this.liveSocket.setPendingLink(href);
      let refGen = targetEl ? () => this.putRef([targetEl], "click") : null;
      let fallback = () => this.liveSocket.redirect(window.location.href);
      let url = href.startsWith("/") ? `${location.protocol}//${location.host}${href}` : href;
      let push = this.pushWithReply(refGen, "live_patch", { url }, (resp) => {
        this.liveSocket.requestDOMUpdate(() => {
          if (resp.link_redirect) {
            this.liveSocket.replaceMain(href, null, callback, linkRef);
          } else {
            if (this.liveSocket.commitPendingLink(linkRef)) {
              this.href = href;
            }
            this.applyPendingUpdates();
            callback && callback(linkRef);
          }
        });
      });
      if (push) {
        push.receive("timeout", fallback);
      } else {
        fallback();
      }
    }
    formsForRecovery(html) {
      if (this.joinCount === 0) {
        return [];
      }
      let phxChange = this.binding("change");
      let template = document.createElement("template");
      template.innerHTML = html;
      return dom_default.all(this.el, `form[${phxChange}]`).filter((form) => form.id && this.ownsElement(form)).filter((form) => form.elements.length > 0).filter((form) => form.getAttribute(this.binding(PHX_AUTO_RECOVER)) !== "ignore").map((form) => {
        let newForm = template.content.querySelector(`form[id="${form.id}"][${phxChange}="${form.getAttribute(phxChange)}"]`);
        if (newForm) {
          return [form, newForm, this.targetComponentID(newForm)];
        } else {
          return [form, form, this.targetComponentID(form)];
        }
      }).filter(([form, newForm, newCid]) => newForm);
    }
    maybePushComponentsDestroyed(destroyedCIDs) {
      let willDestroyCIDs = destroyedCIDs.filter((cid) => {
        return dom_default.findComponentNodeList(this.el, cid).length === 0;
      });
      if (willDestroyCIDs.length > 0) {
        this.pruningCIDs.push(...willDestroyCIDs);
        this.pushWithReply(null, "cids_will_destroy", { cids: willDestroyCIDs }, () => {
          this.pruningCIDs = this.pruningCIDs.filter((cid) => willDestroyCIDs.indexOf(cid) !== -1);
          let completelyDestroyCIDs = willDestroyCIDs.filter((cid) => {
            return dom_default.findComponentNodeList(this.el, cid).length === 0;
          });
          if (completelyDestroyCIDs.length > 0) {
            this.pushWithReply(null, "cids_destroyed", { cids: completelyDestroyCIDs }, (resp) => {
              this.rendered.pruneCIDs(resp.cids);
            });
          }
        });
      }
    }
    ownsElement(el) {
      let parentViewEl = el.closest(PHX_VIEW_SELECTOR);
      return el.getAttribute(PHX_PARENT_ID) === this.id || parentViewEl && parentViewEl.id === this.id || !parentViewEl && this.isDead;
    }
    submitForm(form, targetCtx, phxEvent, submitter, opts = {}) {
      dom_default.putPrivate(form, PHX_HAS_SUBMITTED, true);
      let phxFeedback = this.liveSocket.binding(PHX_FEEDBACK_FOR);
      let inputs = Array.from(form.elements);
      inputs.forEach((input) => dom_default.putPrivate(input, PHX_HAS_SUBMITTED, true));
      this.liveSocket.blurActiveElement(this);
      this.pushFormSubmit(form, targetCtx, phxEvent, submitter, opts, () => {
        inputs.forEach((input) => dom_default.showError(input, phxFeedback));
        this.liveSocket.restorePreviouslyActiveFocus();
      });
    }
    binding(kind) {
      return this.liveSocket.binding(kind);
    }
  };
  var LiveSocket = class {
    constructor(url, phxSocket, opts = {}) {
      this.unloaded = false;
      if (!phxSocket || phxSocket.constructor.name === "Object") {
        throw new Error(`
      a phoenix Socket must be provided as the second argument to the LiveSocket constructor. For example:

          import {Socket} from "phoenix"
          import {LiveSocket} from "phoenix_live_view"
          let liveSocket = new LiveSocket("/live", Socket, {...})
      `);
      }
      this.socket = new phxSocket(url, opts);
      this.bindingPrefix = opts.bindingPrefix || BINDING_PREFIX;
      this.opts = opts;
      this.params = closure2(opts.params || {});
      this.viewLogger = opts.viewLogger;
      this.metadataCallbacks = opts.metadata || {};
      this.defaults = Object.assign(clone(DEFAULTS), opts.defaults || {});
      this.activeElement = null;
      this.prevActive = null;
      this.silenced = false;
      this.main = null;
      this.outgoingMainEl = null;
      this.clickStartedAtTarget = null;
      this.linkRef = 1;
      this.roots = {};
      this.href = window.location.href;
      this.pendingLink = null;
      this.currentLocation = clone(window.location);
      this.hooks = opts.hooks || {};
      this.uploaders = opts.uploaders || {};
      this.loaderTimeout = opts.loaderTimeout || LOADER_TIMEOUT;
      this.reloadWithJitterTimer = null;
      this.maxReloads = opts.maxReloads || MAX_RELOADS;
      this.reloadJitterMin = opts.reloadJitterMin || RELOAD_JITTER_MIN;
      this.reloadJitterMax = opts.reloadJitterMax || RELOAD_JITTER_MAX;
      this.failsafeJitter = opts.failsafeJitter || FAILSAFE_JITTER;
      this.localStorage = opts.localStorage || window.localStorage;
      this.sessionStorage = opts.sessionStorage || window.sessionStorage;
      this.boundTopLevelEvents = false;
      this.domCallbacks = Object.assign({ onNodeAdded: closure2(), onBeforeElUpdated: closure2() }, opts.dom || {});
      this.transitions = new TransitionSet();
      window.addEventListener("pagehide", (_e) => {
        this.unloaded = true;
      });
      this.socket.onOpen(() => {
        if (this.isUnloaded()) {
          window.location.reload();
        }
      });
    }
    isProfileEnabled() {
      return this.sessionStorage.getItem(PHX_LV_PROFILE) === "true";
    }
    isDebugEnabled() {
      return this.sessionStorage.getItem(PHX_LV_DEBUG) === "true";
    }
    isDebugDisabled() {
      return this.sessionStorage.getItem(PHX_LV_DEBUG) === "false";
    }
    enableDebug() {
      this.sessionStorage.setItem(PHX_LV_DEBUG, "true");
    }
    enableProfiling() {
      this.sessionStorage.setItem(PHX_LV_PROFILE, "true");
    }
    disableDebug() {
      this.sessionStorage.setItem(PHX_LV_DEBUG, "false");
    }
    disableProfiling() {
      this.sessionStorage.removeItem(PHX_LV_PROFILE);
    }
    enableLatencySim(upperBoundMs) {
      this.enableDebug();
      console.log("latency simulator enabled for the duration of this browser session. Call disableLatencySim() to disable");
      this.sessionStorage.setItem(PHX_LV_LATENCY_SIM, upperBoundMs);
    }
    disableLatencySim() {
      this.sessionStorage.removeItem(PHX_LV_LATENCY_SIM);
    }
    getLatencySim() {
      let str = this.sessionStorage.getItem(PHX_LV_LATENCY_SIM);
      return str ? parseInt(str) : null;
    }
    getSocket() {
      return this.socket;
    }
    connect() {
      if (window.location.hostname === "localhost" && !this.isDebugDisabled()) {
        this.enableDebug();
      }
      let doConnect = () => {
        if (this.joinRootViews()) {
          this.bindTopLevelEvents();
          this.socket.connect();
        } else if (this.main) {
          this.socket.connect();
        } else {
          this.bindTopLevelEvents({ dead: true });
        }
        this.joinDeadView();
      };
      if (["complete", "loaded", "interactive"].indexOf(document.readyState) >= 0) {
        doConnect();
      } else {
        document.addEventListener("DOMContentLoaded", () => doConnect());
      }
    }
    disconnect(callback) {
      clearTimeout(this.reloadWithJitterTimer);
      this.socket.disconnect(callback);
    }
    replaceTransport(transport) {
      clearTimeout(this.reloadWithJitterTimer);
      this.socket.replaceTransport(transport);
      this.connect();
    }
    execJS(el, encodedJS, eventType = null) {
      this.owner(el, (view) => js_default.exec(eventType, encodedJS, view, el));
    }
    execJSHookPush(el, phxEvent, data2, callback) {
      this.withinOwners(el, (view) => {
        js_default.exec("hook", phxEvent, view, el, ["push", { data: data2, callback }]);
      });
    }
    unload() {
      if (this.unloaded) {
        return;
      }
      if (this.main && this.isConnected()) {
        this.log(this.main, "socket", () => ["disconnect for page nav"]);
      }
      this.unloaded = true;
      this.destroyAllViews();
      this.disconnect();
    }
    triggerDOM(kind, args) {
      this.domCallbacks[kind](...args);
    }
    time(name, func) {
      if (!this.isProfileEnabled() || !console.time) {
        return func();
      }
      console.time(name);
      let result = func();
      console.timeEnd(name);
      return result;
    }
    log(view, kind, msgCallback) {
      if (this.viewLogger) {
        let [msg, obj] = msgCallback();
        this.viewLogger(view, kind, msg, obj);
      } else if (this.isDebugEnabled()) {
        let [msg, obj] = msgCallback();
        debug(view, kind, msg, obj);
      }
    }
    requestDOMUpdate(callback) {
      this.transitions.after(callback);
    }
    transition(time, onStart, onDone = function() {
    }) {
      this.transitions.addTransition(time, onStart, onDone);
    }
    onChannel(channel2, event, cb) {
      channel2.on(event, (data2) => {
        let latency = this.getLatencySim();
        if (!latency) {
          cb(data2);
        } else {
          setTimeout(() => cb(data2), latency);
        }
      });
    }
    wrapPush(view, opts, push) {
      let latency = this.getLatencySim();
      let oldJoinCount = view.joinCount;
      if (!latency) {
        if (this.isConnected() && opts.timeout) {
          return push().receive("timeout", () => {
            if (view.joinCount === oldJoinCount && !view.isDestroyed()) {
              this.reloadWithJitter(view, () => {
                this.log(view, "timeout", () => ["received timeout while communicating with server. Falling back to hard refresh for recovery"]);
              });
            }
          });
        } else {
          return push();
        }
      }
      let fakePush = {
        receives: [],
        receive(kind, cb) {
          this.receives.push([kind, cb]);
        }
      };
      setTimeout(() => {
        if (view.isDestroyed()) {
          return;
        }
        fakePush.receives.reduce((acc, [kind, cb]) => acc.receive(kind, cb), push());
      }, latency);
      return fakePush;
    }
    reloadWithJitter(view, log) {
      clearTimeout(this.reloadWithJitterTimer);
      this.disconnect();
      let minMs = this.reloadJitterMin;
      let maxMs = this.reloadJitterMax;
      let afterMs = Math.floor(Math.random() * (maxMs - minMs + 1)) + minMs;
      let tries = browser_default.updateLocal(this.localStorage, window.location.pathname, CONSECUTIVE_RELOADS, 0, (count) => count + 1);
      if (tries > this.maxReloads) {
        afterMs = this.failsafeJitter;
      }
      this.reloadWithJitterTimer = setTimeout(() => {
        if (view.isDestroyed() || view.isConnected()) {
          return;
        }
        view.destroy();
        log ? log() : this.log(view, "join", () => [`encountered ${tries} consecutive reloads`]);
        if (tries > this.maxReloads) {
          this.log(view, "join", () => [`exceeded ${this.maxReloads} consecutive reloads. Entering failsafe mode`]);
        }
        if (this.hasPendingLink()) {
          window.location = this.pendingLink;
        } else {
          window.location.reload();
        }
      }, afterMs);
    }
    getHookCallbacks(name) {
      return name && name.startsWith("Phoenix.") ? hooks_default[name.split(".")[1]] : this.hooks[name];
    }
    isUnloaded() {
      return this.unloaded;
    }
    isConnected() {
      return this.socket.isConnected();
    }
    getBindingPrefix() {
      return this.bindingPrefix;
    }
    binding(kind) {
      return `${this.getBindingPrefix()}${kind}`;
    }
    channel(topic, params) {
      return this.socket.channel(topic, params);
    }
    joinDeadView() {
      let body = document.body;
      if (body && !this.isPhxView(body) && !this.isPhxView(document.firstElementChild)) {
        let view = this.newRootView(body);
        view.setHref(this.getHref());
        view.joinDead();
        if (!this.main) {
          this.main = view;
        }
        window.requestAnimationFrame(() => view.execNewMounted());
      }
    }
    joinRootViews() {
      let rootsFound = false;
      dom_default.all(document, `${PHX_VIEW_SELECTOR}:not([${PHX_PARENT_ID}])`, (rootEl) => {
        if (!this.getRootById(rootEl.id)) {
          let view = this.newRootView(rootEl);
          view.setHref(this.getHref());
          view.join();
          if (rootEl.hasAttribute(PHX_MAIN)) {
            this.main = view;
          }
        }
        rootsFound = true;
      });
      return rootsFound;
    }
    redirect(to, flash) {
      this.unload();
      browser_default.redirect(to, flash);
    }
    replaceMain(href, flash, callback = null, linkRef = this.setPendingLink(href)) {
      let liveReferer = this.currentLocation.href;
      this.outgoingMainEl = this.outgoingMainEl || this.main.el;
      let newMainEl = dom_default.cloneNode(this.outgoingMainEl, "");
      this.main.showLoader(this.loaderTimeout);
      this.main.destroy();
      this.main = this.newRootView(newMainEl, flash, liveReferer);
      this.main.setRedirect(href);
      this.transitionRemoves();
      this.main.join((joinCount, onDone) => {
        if (joinCount === 1 && this.commitPendingLink(linkRef)) {
          this.requestDOMUpdate(() => {
            dom_default.findPhxSticky(document).forEach((el) => newMainEl.appendChild(el));
            this.outgoingMainEl.replaceWith(newMainEl);
            this.outgoingMainEl = null;
            callback && requestAnimationFrame(() => callback(linkRef));
            onDone();
          });
        }
      });
    }
    transitionRemoves(elements) {
      let removeAttr = this.binding("remove");
      elements = elements || dom_default.all(document, `[${removeAttr}]`);
      elements.forEach((el) => {
        this.execJS(el, el.getAttribute(removeAttr), "remove");
      });
    }
    isPhxView(el) {
      return el.getAttribute && el.getAttribute(PHX_SESSION) !== null;
    }
    newRootView(el, flash, liveReferer) {
      let view = new View(el, this, null, flash, liveReferer);
      this.roots[view.id] = view;
      return view;
    }
    owner(childEl, callback) {
      let view = maybe(childEl.closest(PHX_VIEW_SELECTOR), (el) => this.getViewByEl(el)) || this.main;
      if (view) {
        callback(view);
      }
    }
    withinOwners(childEl, callback) {
      this.owner(childEl, (view) => callback(view, childEl));
    }
    getViewByEl(el) {
      let rootId = el.getAttribute(PHX_ROOT_ID);
      return maybe(this.getRootById(rootId), (root) => root.getDescendentByEl(el));
    }
    getRootById(id) {
      return this.roots[id];
    }
    destroyAllViews() {
      for (let id in this.roots) {
        this.roots[id].destroy();
        delete this.roots[id];
      }
      this.main = null;
    }
    destroyViewByEl(el) {
      let root = this.getRootById(el.getAttribute(PHX_ROOT_ID));
      if (root && root.id === el.id) {
        root.destroy();
        delete this.roots[root.id];
      } else if (root) {
        root.destroyDescendent(el.id);
      }
    }
    setActiveElement(target) {
      if (this.activeElement === target) {
        return;
      }
      this.activeElement = target;
      let cancel = () => {
        if (target === this.activeElement) {
          this.activeElement = null;
        }
        target.removeEventListener("mouseup", this);
        target.removeEventListener("touchend", this);
      };
      target.addEventListener("mouseup", cancel);
      target.addEventListener("touchend", cancel);
    }
    getActiveElement() {
      if (document.activeElement === document.body) {
        return this.activeElement || document.activeElement;
      } else {
        return document.activeElement || document.body;
      }
    }
    dropActiveElement(view) {
      if (this.prevActive && view.ownsElement(this.prevActive)) {
        this.prevActive = null;
      }
    }
    restorePreviouslyActiveFocus() {
      if (this.prevActive && this.prevActive !== document.body) {
        this.prevActive.focus();
      }
    }
    blurActiveElement() {
      this.prevActive = this.getActiveElement();
      if (this.prevActive !== document.body) {
        this.prevActive.blur();
      }
    }
    bindTopLevelEvents({ dead } = {}) {
      if (this.boundTopLevelEvents) {
        return;
      }
      this.boundTopLevelEvents = true;
      this.socket.onClose((event) => {
        if (event && event.code === 1e3 && this.main) {
          return this.reloadWithJitter(this.main);
        }
      });
      document.body.addEventListener("click", function() {
      });
      window.addEventListener("pageshow", (e) => {
        if (e.persisted) {
          this.getSocket().disconnect();
          this.withPageLoading({ to: window.location.href, kind: "redirect" });
          window.location.reload();
        }
      }, true);
      if (!dead) {
        this.bindNav();
      }
      this.bindClicks();
      if (!dead) {
        this.bindForms();
      }
      this.bind({ keyup: "keyup", keydown: "keydown" }, (e, type, view, targetEl, phxEvent, eventTarget) => {
        let matchKey = targetEl.getAttribute(this.binding(PHX_KEY));
        let pressedKey = e.key && e.key.toLowerCase();
        if (matchKey && matchKey.toLowerCase() !== pressedKey) {
          return;
        }
        let data2 = __spreadValues({ key: e.key }, this.eventMeta(type, e, targetEl));
        js_default.exec(type, phxEvent, view, targetEl, ["push", { data: data2 }]);
      });
      this.bind({ blur: "focusout", focus: "focusin" }, (e, type, view, targetEl, phxEvent, eventTarget) => {
        if (!eventTarget) {
          let data2 = __spreadValues({ key: e.key }, this.eventMeta(type, e, targetEl));
          js_default.exec(type, phxEvent, view, targetEl, ["push", { data: data2 }]);
        }
      });
      this.bind({ blur: "blur", focus: "focus" }, (e, type, view, targetEl, targetCtx, phxEvent, phxTarget) => {
        if (phxTarget === "window") {
          let data2 = this.eventMeta(type, e, targetEl);
          js_default.exec(type, phxEvent, view, targetEl, ["push", { data: data2 }]);
        }
      });
      window.addEventListener("dragover", (e) => e.preventDefault());
      window.addEventListener("drop", (e) => {
        e.preventDefault();
        let dropTargetId = maybe(closestPhxBinding(e.target, this.binding(PHX_DROP_TARGET)), (trueTarget) => {
          return trueTarget.getAttribute(this.binding(PHX_DROP_TARGET));
        });
        let dropTarget = dropTargetId && document.getElementById(dropTargetId);
        let files = Array.from(e.dataTransfer.files || []);
        if (!dropTarget || dropTarget.disabled || files.length === 0 || !(dropTarget.files instanceof FileList)) {
          return;
        }
        LiveUploader.trackFiles(dropTarget, files, e.dataTransfer);
        dropTarget.dispatchEvent(new Event("input", { bubbles: true }));
      });
      this.on(PHX_TRACK_UPLOADS, (e) => {
        let uploadTarget = e.target;
        if (!dom_default.isUploadInput(uploadTarget)) {
          return;
        }
        let files = Array.from(e.detail.files || []).filter((f) => f instanceof File || f instanceof Blob);
        LiveUploader.trackFiles(uploadTarget, files);
        uploadTarget.dispatchEvent(new Event("input", { bubbles: true }));
      });
    }
    eventMeta(eventName, e, targetEl) {
      let callback = this.metadataCallbacks[eventName];
      return callback ? callback(e, targetEl) : {};
    }
    setPendingLink(href) {
      this.linkRef++;
      this.pendingLink = href;
      return this.linkRef;
    }
    commitPendingLink(linkRef) {
      if (this.linkRef !== linkRef) {
        return false;
      } else {
        this.href = this.pendingLink;
        this.pendingLink = null;
        return true;
      }
    }
    getHref() {
      return this.href;
    }
    hasPendingLink() {
      return !!this.pendingLink;
    }
    bind(events, callback) {
      for (let event in events) {
        let browserEventName = events[event];
        this.on(browserEventName, (e) => {
          let binding = this.binding(event);
          let windowBinding = this.binding(`window-${event}`);
          let targetPhxEvent = e.target.getAttribute && e.target.getAttribute(binding);
          if (targetPhxEvent) {
            this.debounce(e.target, e, browserEventName, () => {
              this.withinOwners(e.target, (view) => {
                callback(e, event, view, e.target, targetPhxEvent, null);
              });
            });
          } else {
            dom_default.all(document, `[${windowBinding}]`, (el) => {
              let phxEvent = el.getAttribute(windowBinding);
              this.debounce(el, e, browserEventName, () => {
                this.withinOwners(el, (view) => {
                  callback(e, event, view, el, phxEvent, "window");
                });
              });
            });
          }
        });
      }
    }
    bindClicks() {
      window.addEventListener("click", (e) => this.clickStartedAtTarget = e.target);
      this.bindClick("click", "click", false);
      this.bindClick("mousedown", "capture-click", true);
    }
    bindClick(eventName, bindingName, capture) {
      let click = this.binding(bindingName);
      window.addEventListener(eventName, (e) => {
        let target = null;
        if (capture) {
          target = e.target.matches(`[${click}]`) ? e.target : e.target.querySelector(`[${click}]`);
        } else {
          let clickStartedAtTarget = this.clickStartedAtTarget || e.target;
          target = closestPhxBinding(clickStartedAtTarget, click);
          this.dispatchClickAway(e, clickStartedAtTarget);
          this.clickStartedAtTarget = null;
        }
        let phxEvent = target && target.getAttribute(click);
        if (!phxEvent) {
          if (!capture && dom_default.isNewPageClick(e, window.location)) {
            this.unload();
          }
          return;
        }
        if (target.getAttribute("href") === "#") {
          e.preventDefault();
        }
        if (target.hasAttribute(PHX_REF)) {
          return;
        }
        this.debounce(target, e, "click", () => {
          this.withinOwners(target, (view) => {
            js_default.exec("click", phxEvent, view, target, ["push", { data: this.eventMeta("click", e, target) }]);
          });
        });
      }, capture);
    }
    dispatchClickAway(e, clickStartedAt) {
      let phxClickAway = this.binding("click-away");
      dom_default.all(document, `[${phxClickAway}]`, (el) => {
        if (!(el.isSameNode(clickStartedAt) || el.contains(clickStartedAt))) {
          this.withinOwners(e.target, (view) => {
            let phxEvent = el.getAttribute(phxClickAway);
            if (js_default.isVisible(el)) {
              js_default.exec("click", phxEvent, view, el, ["push", { data: this.eventMeta("click", e, e.target) }]);
            }
          });
        }
      });
    }
    bindNav() {
      if (!browser_default.canPushState()) {
        return;
      }
      if (history.scrollRestoration) {
        history.scrollRestoration = "manual";
      }
      let scrollTimer = null;
      window.addEventListener("scroll", (_e) => {
        clearTimeout(scrollTimer);
        scrollTimer = setTimeout(() => {
          browser_default.updateCurrentState((state) => Object.assign(state, { scroll: window.scrollY }));
        }, 100);
      });
      window.addEventListener("popstate", (event) => {
        if (!this.registerNewLocation(window.location)) {
          return;
        }
        let { type, id, root, scroll } = event.state || {};
        let href = window.location.href;
        dom_default.dispatchEvent(window, "phx:navigate", { detail: { href, patch: type === "patch", pop: true } });
        this.requestDOMUpdate(() => {
          if (this.main.isConnected() && (type === "patch" && id === this.main.id)) {
            this.main.pushLinkPatch(href, null, () => {
              this.maybeScroll(scroll);
            });
          } else {
            this.replaceMain(href, null, () => {
              if (root) {
                this.replaceRootHistory();
              }
              this.maybeScroll(scroll);
            });
          }
        });
      }, false);
      window.addEventListener("click", (e) => {
        let target = closestPhxBinding(e.target, PHX_LIVE_LINK);
        let type = target && target.getAttribute(PHX_LIVE_LINK);
        if (!type || !this.isConnected() || !this.main || dom_default.wantsNewTab(e)) {
          return;
        }
        let href = target.href;
        let linkState = target.getAttribute(PHX_LINK_STATE);
        e.preventDefault();
        e.stopImmediatePropagation();
        if (this.pendingLink === href) {
          return;
        }
        this.requestDOMUpdate(() => {
          if (type === "patch") {
            this.pushHistoryPatch(href, linkState, target);
          } else if (type === "redirect") {
            this.historyRedirect(href, linkState);
          } else {
            throw new Error(`expected ${PHX_LIVE_LINK} to be "patch" or "redirect", got: ${type}`);
          }
          let phxClick = target.getAttribute(this.binding("click"));
          if (phxClick) {
            this.requestDOMUpdate(() => this.execJS(target, phxClick, "click"));
          }
        });
      }, false);
    }
    maybeScroll(scroll) {
      if (typeof scroll === "number") {
        requestAnimationFrame(() => {
          window.scrollTo(0, scroll);
        });
      }
    }
    dispatchEvent(event, payload = {}) {
      dom_default.dispatchEvent(window, `phx:${event}`, { detail: payload });
    }
    dispatchEvents(events) {
      events.forEach(([event, payload]) => this.dispatchEvent(event, payload));
    }
    withPageLoading(info, callback) {
      dom_default.dispatchEvent(window, "phx:page-loading-start", { detail: info });
      let done = () => dom_default.dispatchEvent(window, "phx:page-loading-stop", { detail: info });
      return callback ? callback(done) : done;
    }
    pushHistoryPatch(href, linkState, targetEl) {
      if (!this.isConnected()) {
        return browser_default.redirect(href);
      }
      this.withPageLoading({ to: href, kind: "patch" }, (done) => {
        this.main.pushLinkPatch(href, targetEl, (linkRef) => {
          this.historyPatch(href, linkState, linkRef);
          done();
        });
      });
    }
    historyPatch(href, linkState, linkRef = this.setPendingLink(href)) {
      if (!this.commitPendingLink(linkRef)) {
        return;
      }
      browser_default.pushState(linkState, { type: "patch", id: this.main.id }, href);
      dom_default.dispatchEvent(window, "phx:navigate", { detail: { patch: true, href, pop: false } });
      this.registerNewLocation(window.location);
    }
    historyRedirect(href, linkState, flash) {
      if (!this.isConnected()) {
        return browser_default.redirect(href, flash);
      }
      if (/^\/$|^\/[^\/]+.*$/.test(href)) {
        let { protocol, host } = window.location;
        href = `${protocol}//${host}${href}`;
      }
      let scroll = window.scrollY;
      this.withPageLoading({ to: href, kind: "redirect" }, (done) => {
        this.replaceMain(href, flash, (linkRef) => {
          if (linkRef === this.linkRef) {
            browser_default.pushState(linkState, { type: "redirect", id: this.main.id, scroll }, href);
            dom_default.dispatchEvent(window, "phx:navigate", { detail: { href, patch: false, pop: false } });
            this.registerNewLocation(window.location);
          }
          done();
        });
      });
    }
    replaceRootHistory() {
      browser_default.pushState("replace", { root: true, type: "patch", id: this.main.id });
    }
    registerNewLocation(newLocation) {
      let { pathname, search } = this.currentLocation;
      if (pathname + search === newLocation.pathname + newLocation.search) {
        return false;
      } else {
        this.currentLocation = clone(newLocation);
        return true;
      }
    }
    bindForms() {
      let iterations = 0;
      let externalFormSubmitted = false;
      this.on("submit", (e) => {
        let phxSubmit = e.target.getAttribute(this.binding("submit"));
        let phxChange = e.target.getAttribute(this.binding("change"));
        if (!externalFormSubmitted && phxChange && !phxSubmit) {
          externalFormSubmitted = true;
          e.preventDefault();
          this.withinOwners(e.target, (view) => {
            view.disableForm(e.target);
            window.requestAnimationFrame(() => {
              if (dom_default.isUnloadableFormSubmit(e)) {
                this.unload();
              }
              e.target.submit();
            });
          });
        }
      }, true);
      this.on("submit", (e) => {
        let phxEvent = e.target.getAttribute(this.binding("submit"));
        if (!phxEvent) {
          if (dom_default.isUnloadableFormSubmit(e)) {
            this.unload();
          }
          return;
        }
        e.preventDefault();
        e.target.disabled = true;
        this.withinOwners(e.target, (view) => {
          js_default.exec("submit", phxEvent, view, e.target, ["push", { submitter: e.submitter }]);
        });
      }, false);
      for (let type of ["change", "input"]) {
        this.on(type, (e) => {
          let phxChange = this.binding("change");
          let input = e.target;
          let inputEvent = input.getAttribute(phxChange);
          let formEvent = input.form && input.form.getAttribute(phxChange);
          let phxEvent = inputEvent || formEvent;
          if (!phxEvent) {
            return;
          }
          if (input.type === "number" && input.validity && input.validity.badInput) {
            return;
          }
          let dispatcher = inputEvent ? input : input.form;
          let currentIterations = iterations;
          iterations++;
          let { at, type: lastType } = dom_default.private(input, "prev-iteration") || {};
          if (at === currentIterations - 1 && type !== lastType) {
            return;
          }
          dom_default.putPrivate(input, "prev-iteration", { at: currentIterations, type });
          this.debounce(input, e, type, () => {
            this.withinOwners(dispatcher, (view) => {
              dom_default.putPrivate(input, PHX_HAS_FOCUSED, true);
              if (!dom_default.isTextualInput(input)) {
                this.setActiveElement(input);
              }
              js_default.exec("change", phxEvent, view, input, ["push", { _target: e.target.name, dispatcher }]);
            });
          });
        }, false);
      }
      this.on("reset", (e) => {
        let form = e.target;
        dom_default.resetForm(form, this.binding(PHX_FEEDBACK_FOR));
        let input = Array.from(form.elements).find((el) => el.type === "reset");
        window.requestAnimationFrame(() => {
          input.dispatchEvent(new Event("input", { bubbles: true, cancelable: false }));
        });
      });
    }
    debounce(el, event, eventType, callback) {
      if (eventType === "blur" || eventType === "focusout") {
        return callback();
      }
      let phxDebounce = this.binding(PHX_DEBOUNCE);
      let phxThrottle = this.binding(PHX_THROTTLE);
      let defaultDebounce = this.defaults.debounce.toString();
      let defaultThrottle = this.defaults.throttle.toString();
      this.withinOwners(el, (view) => {
        let asyncFilter = () => !view.isDestroyed() && document.body.contains(el);
        dom_default.debounce(el, event, phxDebounce, defaultDebounce, phxThrottle, defaultThrottle, asyncFilter, () => {
          callback();
        });
      });
    }
    silenceEvents(callback) {
      this.silenced = true;
      callback();
      this.silenced = false;
    }
    on(event, callback) {
      window.addEventListener(event, (e) => {
        if (!this.silenced) {
          callback(e);
        }
      });
    }
  };
  var TransitionSet = class {
    constructor() {
      this.transitions = /* @__PURE__ */ new Set();
      this.pendingOps = [];
    }
    reset() {
      this.transitions.forEach((timer) => {
        clearTimeout(timer);
        this.transitions.delete(timer);
      });
      this.flushPendingOps();
    }
    after(callback) {
      if (this.size() === 0) {
        callback();
      } else {
        this.pushPendingOp(callback);
      }
    }
    addTransition(time, onStart, onDone) {
      onStart();
      let timer = setTimeout(() => {
        this.transitions.delete(timer);
        onDone();
        this.flushPendingOps();
      }, time);
      this.transitions.add(timer);
    }
    pushPendingOp(op) {
      this.pendingOps.push(op);
    }
    size() {
      return this.transitions.size;
    }
    flushPendingOps() {
      if (this.size() > 0) {
        return;
      }
      let op = this.pendingOps.shift();
      if (op) {
        op();
        this.flushPendingOps();
      }
    }
  };

  // js/app.js
  var import_topbar = __toESM(require_topbar());

  // node_modules/alpinejs/dist/module.esm.js
  var flushPending = false;
  var flushing = false;
  var queue = [];
  var lastFlushedIndex = -1;
  function scheduler(callback) {
    queueJob(callback);
  }
  function queueJob(job) {
    if (!queue.includes(job))
      queue.push(job);
    queueFlush();
  }
  function dequeueJob(job) {
    let index = queue.indexOf(job);
    if (index !== -1 && index > lastFlushedIndex)
      queue.splice(index, 1);
  }
  function queueFlush() {
    if (!flushing && !flushPending) {
      flushPending = true;
      queueMicrotask(flushJobs);
    }
  }
  function flushJobs() {
    flushPending = false;
    flushing = true;
    for (let i = 0; i < queue.length; i++) {
      queue[i]();
      lastFlushedIndex = i;
    }
    queue.length = 0;
    lastFlushedIndex = -1;
    flushing = false;
  }
  var reactive;
  var effect;
  var release;
  var raw;
  var shouldSchedule = true;
  function disableEffectScheduling(callback) {
    shouldSchedule = false;
    callback();
    shouldSchedule = true;
  }
  function setReactivityEngine(engine) {
    reactive = engine.reactive;
    release = engine.release;
    effect = (callback) => engine.effect(callback, { scheduler: (task) => {
      if (shouldSchedule) {
        scheduler(task);
      } else {
        task();
      }
    } });
    raw = engine.raw;
  }
  function overrideEffect(override) {
    effect = override;
  }
  function elementBoundEffect(el) {
    let cleanup2 = () => {
    };
    let wrappedEffect = (callback) => {
      let effectReference = effect(callback);
      if (!el._x_effects) {
        el._x_effects = /* @__PURE__ */ new Set();
        el._x_runEffects = () => {
          el._x_effects.forEach((i) => i());
        };
      }
      el._x_effects.add(effectReference);
      cleanup2 = () => {
        if (effectReference === void 0)
          return;
        el._x_effects.delete(effectReference);
        release(effectReference);
      };
      return effectReference;
    };
    return [wrappedEffect, () => {
      cleanup2();
    }];
  }
  function watch(getter, callback) {
    let firstTime = true;
    let oldValue;
    let effectReference = effect(() => {
      let value = getter();
      JSON.stringify(value);
      if (!firstTime) {
        queueMicrotask(() => {
          callback(value, oldValue);
          oldValue = value;
        });
      } else {
        oldValue = value;
      }
      firstTime = false;
    });
    return () => release(effectReference);
  }
  function dispatch(el, name, detail = {}) {
    el.dispatchEvent(
      new CustomEvent(name, {
        detail,
        bubbles: true,
        // Allows events to pass the shadow DOM barrier.
        composed: true,
        cancelable: true
      })
    );
  }
  function walk(el, callback) {
    if (typeof ShadowRoot === "function" && el instanceof ShadowRoot) {
      Array.from(el.children).forEach((el2) => walk(el2, callback));
      return;
    }
    let skip = false;
    callback(el, () => skip = true);
    if (skip)
      return;
    let node = el.firstElementChild;
    while (node) {
      walk(node, callback, false);
      node = node.nextElementSibling;
    }
  }
  function warn(message, ...args) {
    console.warn(`Alpine Warning: ${message}`, ...args);
  }
  var started = false;
  function start() {
    if (started)
      warn("Alpine has already been initialized on this page. Calling Alpine.start() more than once can cause problems.");
    started = true;
    if (!document.body)
      warn("Unable to initialize. Trying to load Alpine before `<body>` is available. Did you forget to add `defer` in Alpine's `<script>` tag?");
    dispatch(document, "alpine:init");
    dispatch(document, "alpine:initializing");
    startObservingMutations();
    onElAdded((el) => initTree(el, walk));
    onElRemoved((el) => destroyTree(el));
    onAttributesAdded((el, attrs) => {
      directives(el, attrs).forEach((handle) => handle());
    });
    let outNestedComponents = (el) => !closestRoot(el.parentElement, true);
    Array.from(document.querySelectorAll(allSelectors().join(","))).filter(outNestedComponents).forEach((el) => {
      initTree(el);
    });
    dispatch(document, "alpine:initialized");
  }
  var rootSelectorCallbacks = [];
  var initSelectorCallbacks = [];
  function rootSelectors() {
    return rootSelectorCallbacks.map((fn) => fn());
  }
  function allSelectors() {
    return rootSelectorCallbacks.concat(initSelectorCallbacks).map((fn) => fn());
  }
  function addRootSelector(selectorCallback) {
    rootSelectorCallbacks.push(selectorCallback);
  }
  function addInitSelector(selectorCallback) {
    initSelectorCallbacks.push(selectorCallback);
  }
  function closestRoot(el, includeInitSelectors = false) {
    return findClosest(el, (element) => {
      const selectors = includeInitSelectors ? allSelectors() : rootSelectors();
      if (selectors.some((selector) => element.matches(selector)))
        return true;
    });
  }
  function findClosest(el, callback) {
    if (!el)
      return;
    if (callback(el))
      return el;
    if (el._x_teleportBack)
      el = el._x_teleportBack;
    if (!el.parentElement)
      return;
    return findClosest(el.parentElement, callback);
  }
  function isRoot(el) {
    return rootSelectors().some((selector) => el.matches(selector));
  }
  var initInterceptors = [];
  function interceptInit(callback) {
    initInterceptors.push(callback);
  }
  function initTree(el, walker = walk, intercept = () => {
  }) {
    deferHandlingDirectives(() => {
      walker(el, (el2, skip) => {
        intercept(el2, skip);
        initInterceptors.forEach((i) => i(el2, skip));
        directives(el2, el2.attributes).forEach((handle) => handle());
        el2._x_ignore && skip();
      });
    });
  }
  function destroyTree(root) {
    walk(root, (el) => {
      cleanupAttributes(el);
      cleanupElement(el);
    });
  }
  var onAttributeAddeds = [];
  var onElRemoveds = [];
  var onElAddeds = [];
  function onElAdded(callback) {
    onElAddeds.push(callback);
  }
  function onElRemoved(el, callback) {
    if (typeof callback === "function") {
      if (!el._x_cleanups)
        el._x_cleanups = [];
      el._x_cleanups.push(callback);
    } else {
      callback = el;
      onElRemoveds.push(callback);
    }
  }
  function onAttributesAdded(callback) {
    onAttributeAddeds.push(callback);
  }
  function onAttributeRemoved(el, name, callback) {
    if (!el._x_attributeCleanups)
      el._x_attributeCleanups = {};
    if (!el._x_attributeCleanups[name])
      el._x_attributeCleanups[name] = [];
    el._x_attributeCleanups[name].push(callback);
  }
  function cleanupAttributes(el, names) {
    if (!el._x_attributeCleanups)
      return;
    Object.entries(el._x_attributeCleanups).forEach(([name, value]) => {
      if (names === void 0 || names.includes(name)) {
        value.forEach((i) => i());
        delete el._x_attributeCleanups[name];
      }
    });
  }
  function cleanupElement(el) {
    if (el._x_cleanups) {
      while (el._x_cleanups.length)
        el._x_cleanups.pop()();
    }
  }
  var observer = new MutationObserver(onMutate);
  var currentlyObserving = false;
  function startObservingMutations() {
    observer.observe(document, { subtree: true, childList: true, attributes: true, attributeOldValue: true });
    currentlyObserving = true;
  }
  function stopObservingMutations() {
    flushObserver();
    observer.disconnect();
    currentlyObserving = false;
  }
  var queuedMutations = [];
  function flushObserver() {
    let records = observer.takeRecords();
    queuedMutations.push(() => records.length > 0 && onMutate(records));
    let queueLengthWhenTriggered = queuedMutations.length;
    queueMicrotask(() => {
      if (queuedMutations.length === queueLengthWhenTriggered) {
        while (queuedMutations.length > 0)
          queuedMutations.shift()();
      }
    });
  }
  function mutateDom(callback) {
    if (!currentlyObserving)
      return callback();
    stopObservingMutations();
    let result = callback();
    startObservingMutations();
    return result;
  }
  var isCollecting = false;
  var deferredMutations = [];
  function deferMutations() {
    isCollecting = true;
  }
  function flushAndStopDeferringMutations() {
    isCollecting = false;
    onMutate(deferredMutations);
    deferredMutations = [];
  }
  function onMutate(mutations) {
    if (isCollecting) {
      deferredMutations = deferredMutations.concat(mutations);
      return;
    }
    let addedNodes = /* @__PURE__ */ new Set();
    let removedNodes = /* @__PURE__ */ new Set();
    let addedAttributes = /* @__PURE__ */ new Map();
    let removedAttributes = /* @__PURE__ */ new Map();
    for (let i = 0; i < mutations.length; i++) {
      if (mutations[i].target._x_ignoreMutationObserver)
        continue;
      if (mutations[i].type === "childList") {
        mutations[i].addedNodes.forEach((node) => node.nodeType === 1 && addedNodes.add(node));
        mutations[i].removedNodes.forEach((node) => node.nodeType === 1 && removedNodes.add(node));
      }
      if (mutations[i].type === "attributes") {
        let el = mutations[i].target;
        let name = mutations[i].attributeName;
        let oldValue = mutations[i].oldValue;
        let add2 = () => {
          if (!addedAttributes.has(el))
            addedAttributes.set(el, []);
          addedAttributes.get(el).push({ name, value: el.getAttribute(name) });
        };
        let remove = () => {
          if (!removedAttributes.has(el))
            removedAttributes.set(el, []);
          removedAttributes.get(el).push(name);
        };
        if (el.hasAttribute(name) && oldValue === null) {
          add2();
        } else if (el.hasAttribute(name)) {
          remove();
          add2();
        } else {
          remove();
        }
      }
    }
    removedAttributes.forEach((attrs, el) => {
      cleanupAttributes(el, attrs);
    });
    addedAttributes.forEach((attrs, el) => {
      onAttributeAddeds.forEach((i) => i(el, attrs));
    });
    for (let node of removedNodes) {
      if (addedNodes.has(node))
        continue;
      onElRemoveds.forEach((i) => i(node));
      destroyTree(node);
    }
    addedNodes.forEach((node) => {
      node._x_ignoreSelf = true;
      node._x_ignore = true;
    });
    for (let node of addedNodes) {
      if (removedNodes.has(node))
        continue;
      if (!node.isConnected)
        continue;
      delete node._x_ignoreSelf;
      delete node._x_ignore;
      onElAddeds.forEach((i) => i(node));
      node._x_ignore = true;
      node._x_ignoreSelf = true;
    }
    addedNodes.forEach((node) => {
      delete node._x_ignoreSelf;
      delete node._x_ignore;
    });
    addedNodes = null;
    removedNodes = null;
    addedAttributes = null;
    removedAttributes = null;
  }
  function scope(node) {
    return mergeProxies(closestDataStack(node));
  }
  function addScopeToNode(node, data2, referenceNode) {
    node._x_dataStack = [data2, ...closestDataStack(referenceNode || node)];
    return () => {
      node._x_dataStack = node._x_dataStack.filter((i) => i !== data2);
    };
  }
  function closestDataStack(node) {
    if (node._x_dataStack)
      return node._x_dataStack;
    if (typeof ShadowRoot === "function" && node instanceof ShadowRoot) {
      return closestDataStack(node.host);
    }
    if (!node.parentNode) {
      return [];
    }
    return closestDataStack(node.parentNode);
  }
  function mergeProxies(objects) {
    return new Proxy({ objects }, mergeProxyTrap);
  }
  var mergeProxyTrap = {
    ownKeys({ objects }) {
      return Array.from(
        new Set(objects.flatMap((i) => Object.keys(i)))
      );
    },
    has({ objects }, name) {
      if (name == Symbol.unscopables)
        return false;
      return objects.some(
        (obj) => Object.prototype.hasOwnProperty.call(obj, name)
      );
    },
    get({ objects }, name, thisProxy) {
      if (name == "toJSON")
        return collapseProxies;
      return Reflect.get(
        objects.find(
          (obj) => Object.prototype.hasOwnProperty.call(obj, name)
        ) || {},
        name,
        thisProxy
      );
    },
    set({ objects }, name, value, thisProxy) {
      const target = objects.find(
        (obj) => Object.prototype.hasOwnProperty.call(obj, name)
      ) || objects[objects.length - 1];
      const descriptor = Object.getOwnPropertyDescriptor(target, name);
      if ((descriptor == null ? void 0 : descriptor.set) && (descriptor == null ? void 0 : descriptor.get))
        return Reflect.set(target, name, value, thisProxy);
      return Reflect.set(target, name, value);
    }
  };
  function collapseProxies() {
    let keys = Reflect.ownKeys(this);
    return keys.reduce((acc, key) => {
      acc[key] = Reflect.get(this, key);
      return acc;
    }, {});
  }
  function initInterceptors2(data2) {
    let isObject22 = (val) => typeof val === "object" && !Array.isArray(val) && val !== null;
    let recurse = (obj, basePath = "") => {
      Object.entries(Object.getOwnPropertyDescriptors(obj)).forEach(([key, { value, enumerable }]) => {
        if (enumerable === false || value === void 0)
          return;
        let path = basePath === "" ? key : `${basePath}.${key}`;
        if (typeof value === "object" && value !== null && value._x_interceptor) {
          obj[key] = value.initialize(data2, path, key);
        } else {
          if (isObject22(value) && value !== obj && !(value instanceof Element)) {
            recurse(value, path);
          }
        }
      });
    };
    return recurse(data2);
  }
  function interceptor(callback, mutateObj = () => {
  }) {
    let obj = {
      initialValue: void 0,
      _x_interceptor: true,
      initialize(data2, path, key) {
        return callback(this.initialValue, () => get(data2, path), (value) => set(data2, path, value), path, key);
      }
    };
    mutateObj(obj);
    return (initialValue) => {
      if (typeof initialValue === "object" && initialValue !== null && initialValue._x_interceptor) {
        let initialize = obj.initialize.bind(obj);
        obj.initialize = (data2, path, key) => {
          let innerValue = initialValue.initialize(data2, path, key);
          obj.initialValue = innerValue;
          return initialize(data2, path, key);
        };
      } else {
        obj.initialValue = initialValue;
      }
      return obj;
    };
  }
  function get(obj, path) {
    return path.split(".").reduce((carry, segment) => carry[segment], obj);
  }
  function set(obj, path, value) {
    if (typeof path === "string")
      path = path.split(".");
    if (path.length === 1)
      obj[path[0]] = value;
    else if (path.length === 0)
      throw error;
    else {
      if (obj[path[0]])
        return set(obj[path[0]], path.slice(1), value);
      else {
        obj[path[0]] = {};
        return set(obj[path[0]], path.slice(1), value);
      }
    }
  }
  var magics = {};
  function magic(name, callback) {
    magics[name] = callback;
  }
  function injectMagics(obj, el) {
    Object.entries(magics).forEach(([name, callback]) => {
      let memoizedUtilities = null;
      function getUtilities() {
        if (memoizedUtilities) {
          return memoizedUtilities;
        } else {
          let [utilities, cleanup2] = getElementBoundUtilities(el);
          memoizedUtilities = __spreadValues({ interceptor }, utilities);
          onElRemoved(el, cleanup2);
          return memoizedUtilities;
        }
      }
      Object.defineProperty(obj, `$${name}`, {
        get() {
          return callback(el, getUtilities());
        },
        enumerable: false
      });
    });
    return obj;
  }
  function tryCatch(el, expression, callback, ...args) {
    try {
      return callback(...args);
    } catch (e) {
      handleError(e, el, expression);
    }
  }
  function handleError(error2, el, expression = void 0) {
    error2 = Object.assign(
      error2 != null ? error2 : { message: "No error message given." },
      { el, expression }
    );
    console.warn(`Alpine Expression Error: ${error2.message}

${expression ? 'Expression: "' + expression + '"\n\n' : ""}`, el);
    setTimeout(() => {
      throw error2;
    }, 0);
  }
  var shouldAutoEvaluateFunctions = true;
  function dontAutoEvaluateFunctions(callback) {
    let cache = shouldAutoEvaluateFunctions;
    shouldAutoEvaluateFunctions = false;
    let result = callback();
    shouldAutoEvaluateFunctions = cache;
    return result;
  }
  function evaluate(el, expression, extras = {}) {
    let result;
    evaluateLater(el, expression)((value) => result = value, extras);
    return result;
  }
  function evaluateLater(...args) {
    return theEvaluatorFunction(...args);
  }
  var theEvaluatorFunction = normalEvaluator;
  function setEvaluator(newEvaluator) {
    theEvaluatorFunction = newEvaluator;
  }
  function normalEvaluator(el, expression) {
    let overriddenMagics = {};
    injectMagics(overriddenMagics, el);
    let dataStack = [overriddenMagics, ...closestDataStack(el)];
    let evaluator = typeof expression === "function" ? generateEvaluatorFromFunction(dataStack, expression) : generateEvaluatorFromString(dataStack, expression, el);
    return tryCatch.bind(null, el, expression, evaluator);
  }
  function generateEvaluatorFromFunction(dataStack, func) {
    return (receiver = () => {
    }, { scope: scope2 = {}, params = [] } = {}) => {
      let result = func.apply(mergeProxies([scope2, ...dataStack]), params);
      runIfTypeOfFunction(receiver, result);
    };
  }
  var evaluatorMemo = {};
  function generateFunctionFromString(expression, el) {
    if (evaluatorMemo[expression]) {
      return evaluatorMemo[expression];
    }
    let AsyncFunction = Object.getPrototypeOf(async function() {
    }).constructor;
    let rightSideSafeExpression = /^[\n\s]*if.*\(.*\)/.test(expression.trim()) || /^(let|const)\s/.test(expression.trim()) ? `(async()=>{ ${expression} })()` : expression;
    const safeAsyncFunction = () => {
      try {
        let func2 = new AsyncFunction(
          ["__self", "scope"],
          `with (scope) { __self.result = ${rightSideSafeExpression} }; __self.finished = true; return __self.result;`
        );
        Object.defineProperty(func2, "name", {
          value: `[Alpine] ${expression}`
        });
        return func2;
      } catch (error2) {
        handleError(error2, el, expression);
        return Promise.resolve();
      }
    };
    let func = safeAsyncFunction();
    evaluatorMemo[expression] = func;
    return func;
  }
  function generateEvaluatorFromString(dataStack, expression, el) {
    let func = generateFunctionFromString(expression, el);
    return (receiver = () => {
    }, { scope: scope2 = {}, params = [] } = {}) => {
      func.result = void 0;
      func.finished = false;
      let completeScope = mergeProxies([scope2, ...dataStack]);
      if (typeof func === "function") {
        let promise = func(func, completeScope).catch((error2) => handleError(error2, el, expression));
        if (func.finished) {
          runIfTypeOfFunction(receiver, func.result, completeScope, params, el);
          func.result = void 0;
        } else {
          promise.then((result) => {
            runIfTypeOfFunction(receiver, result, completeScope, params, el);
          }).catch((error2) => handleError(error2, el, expression)).finally(() => func.result = void 0);
        }
      }
    };
  }
  function runIfTypeOfFunction(receiver, value, scope2, params, el) {
    if (shouldAutoEvaluateFunctions && typeof value === "function") {
      let result = value.apply(scope2, params);
      if (result instanceof Promise) {
        result.then((i) => runIfTypeOfFunction(receiver, i, scope2, params)).catch((error2) => handleError(error2, el, value));
      } else {
        receiver(result);
      }
    } else if (typeof value === "object" && value instanceof Promise) {
      value.then((i) => receiver(i));
    } else {
      receiver(value);
    }
  }
  var prefixAsString = "x-";
  function prefix(subject = "") {
    return prefixAsString + subject;
  }
  function setPrefix(newPrefix) {
    prefixAsString = newPrefix;
  }
  var directiveHandlers = {};
  function directive(name, callback) {
    directiveHandlers[name] = callback;
    return {
      before(directive2) {
        if (!directiveHandlers[directive2]) {
          console.warn(String.raw`Cannot find directive \`${directive2}\`. \`${name}\` will use the default order of execution`);
          return;
        }
        const pos = directiveOrder.indexOf(directive2);
        directiveOrder.splice(pos >= 0 ? pos : directiveOrder.indexOf("DEFAULT"), 0, name);
      }
    };
  }
  function directives(el, attributes, originalAttributeOverride) {
    attributes = Array.from(attributes);
    if (el._x_virtualDirectives) {
      let vAttributes = Object.entries(el._x_virtualDirectives).map(([name, value]) => ({ name, value }));
      let staticAttributes = attributesOnly(vAttributes);
      vAttributes = vAttributes.map((attribute) => {
        if (staticAttributes.find((attr) => attr.name === attribute.name)) {
          return {
            name: `x-bind:${attribute.name}`,
            value: `"${attribute.value}"`
          };
        }
        return attribute;
      });
      attributes = attributes.concat(vAttributes);
    }
    let transformedAttributeMap = {};
    let directives2 = attributes.map(toTransformedAttributes((newName, oldName) => transformedAttributeMap[newName] = oldName)).filter(outNonAlpineAttributes).map(toParsedDirectives(transformedAttributeMap, originalAttributeOverride)).sort(byPriority);
    return directives2.map((directive2) => {
      return getDirectiveHandler(el, directive2);
    });
  }
  function attributesOnly(attributes) {
    return Array.from(attributes).map(toTransformedAttributes()).filter((attr) => !outNonAlpineAttributes(attr));
  }
  var isDeferringHandlers = false;
  var directiveHandlerStacks = /* @__PURE__ */ new Map();
  var currentHandlerStackKey = Symbol();
  function deferHandlingDirectives(callback) {
    isDeferringHandlers = true;
    let key = Symbol();
    currentHandlerStackKey = key;
    directiveHandlerStacks.set(key, []);
    let flushHandlers = () => {
      while (directiveHandlerStacks.get(key).length)
        directiveHandlerStacks.get(key).shift()();
      directiveHandlerStacks.delete(key);
    };
    let stopDeferring = () => {
      isDeferringHandlers = false;
      flushHandlers();
    };
    callback(flushHandlers);
    stopDeferring();
  }
  function getElementBoundUtilities(el) {
    let cleanups = [];
    let cleanup2 = (callback) => cleanups.push(callback);
    let [effect3, cleanupEffect] = elementBoundEffect(el);
    cleanups.push(cleanupEffect);
    let utilities = {
      Alpine: alpine_default,
      effect: effect3,
      cleanup: cleanup2,
      evaluateLater: evaluateLater.bind(evaluateLater, el),
      evaluate: evaluate.bind(evaluate, el)
    };
    let doCleanup = () => cleanups.forEach((i) => i());
    return [utilities, doCleanup];
  }
  function getDirectiveHandler(el, directive2) {
    let noop2 = () => {
    };
    let handler4 = directiveHandlers[directive2.type] || noop2;
    let [utilities, cleanup2] = getElementBoundUtilities(el);
    onAttributeRemoved(el, directive2.original, cleanup2);
    let fullHandler = () => {
      if (el._x_ignore || el._x_ignoreSelf)
        return;
      handler4.inline && handler4.inline(el, directive2, utilities);
      handler4 = handler4.bind(handler4, el, directive2, utilities);
      isDeferringHandlers ? directiveHandlerStacks.get(currentHandlerStackKey).push(handler4) : handler4();
    };
    fullHandler.runCleanups = cleanup2;
    return fullHandler;
  }
  var startingWith = (subject, replacement) => ({ name, value }) => {
    if (name.startsWith(subject))
      name = name.replace(subject, replacement);
    return { name, value };
  };
  var into = (i) => i;
  function toTransformedAttributes(callback = () => {
  }) {
    return ({ name, value }) => {
      let { name: newName, value: newValue } = attributeTransformers.reduce((carry, transform) => {
        return transform(carry);
      }, { name, value });
      if (newName !== name)
        callback(newName, name);
      return { name: newName, value: newValue };
    };
  }
  var attributeTransformers = [];
  function mapAttributes(callback) {
    attributeTransformers.push(callback);
  }
  function outNonAlpineAttributes({ name }) {
    return alpineAttributeRegex().test(name);
  }
  var alpineAttributeRegex = () => new RegExp(`^${prefixAsString}([^:^.]+)\\b`);
  function toParsedDirectives(transformedAttributeMap, originalAttributeOverride) {
    return ({ name, value }) => {
      let typeMatch = name.match(alpineAttributeRegex());
      let valueMatch = name.match(/:([a-zA-Z0-9\-_:]+)/);
      let modifiers = name.match(/\.[^.\]]+(?=[^\]]*$)/g) || [];
      let original = originalAttributeOverride || transformedAttributeMap[name] || name;
      return {
        type: typeMatch ? typeMatch[1] : null,
        value: valueMatch ? valueMatch[1] : null,
        modifiers: modifiers.map((i) => i.replace(".", "")),
        expression: value,
        original
      };
    };
  }
  var DEFAULT = "DEFAULT";
  var directiveOrder = [
    "ignore",
    "ref",
    "data",
    "id",
    "anchor",
    "bind",
    "init",
    "for",
    "model",
    "modelable",
    "transition",
    "show",
    "if",
    DEFAULT,
    "teleport"
  ];
  function byPriority(a, b) {
    let typeA = directiveOrder.indexOf(a.type) === -1 ? DEFAULT : a.type;
    let typeB = directiveOrder.indexOf(b.type) === -1 ? DEFAULT : b.type;
    return directiveOrder.indexOf(typeA) - directiveOrder.indexOf(typeB);
  }
  var tickStack = [];
  var isHolding = false;
  function nextTick(callback = () => {
  }) {
    queueMicrotask(() => {
      isHolding || setTimeout(() => {
        releaseNextTicks();
      });
    });
    return new Promise((res) => {
      tickStack.push(() => {
        callback();
        res();
      });
    });
  }
  function releaseNextTicks() {
    isHolding = false;
    while (tickStack.length)
      tickStack.shift()();
  }
  function holdNextTicks() {
    isHolding = true;
  }
  function setClasses(el, value) {
    if (Array.isArray(value)) {
      return setClassesFromString(el, value.join(" "));
    } else if (typeof value === "object" && value !== null) {
      return setClassesFromObject(el, value);
    } else if (typeof value === "function") {
      return setClasses(el, value());
    }
    return setClassesFromString(el, value);
  }
  function setClassesFromString(el, classString) {
    let split = (classString2) => classString2.split(" ").filter(Boolean);
    let missingClasses = (classString2) => classString2.split(" ").filter((i) => !el.classList.contains(i)).filter(Boolean);
    let addClassesAndReturnUndo = (classes) => {
      el.classList.add(...classes);
      return () => {
        el.classList.remove(...classes);
      };
    };
    classString = classString === true ? classString = "" : classString || "";
    return addClassesAndReturnUndo(missingClasses(classString));
  }
  function setClassesFromObject(el, classObject) {
    let split = (classString) => classString.split(" ").filter(Boolean);
    let forAdd = Object.entries(classObject).flatMap(([classString, bool]) => bool ? split(classString) : false).filter(Boolean);
    let forRemove = Object.entries(classObject).flatMap(([classString, bool]) => !bool ? split(classString) : false).filter(Boolean);
    let added = [];
    let removed = [];
    forRemove.forEach((i) => {
      if (el.classList.contains(i)) {
        el.classList.remove(i);
        removed.push(i);
      }
    });
    forAdd.forEach((i) => {
      if (!el.classList.contains(i)) {
        el.classList.add(i);
        added.push(i);
      }
    });
    return () => {
      removed.forEach((i) => el.classList.add(i));
      added.forEach((i) => el.classList.remove(i));
    };
  }
  function setStyles(el, value) {
    if (typeof value === "object" && value !== null) {
      return setStylesFromObject(el, value);
    }
    return setStylesFromString(el, value);
  }
  function setStylesFromObject(el, value) {
    let previousStyles = {};
    Object.entries(value).forEach(([key, value2]) => {
      previousStyles[key] = el.style[key];
      if (!key.startsWith("--")) {
        key = kebabCase(key);
      }
      el.style.setProperty(key, value2);
    });
    setTimeout(() => {
      if (el.style.length === 0) {
        el.removeAttribute("style");
      }
    });
    return () => {
      setStyles(el, previousStyles);
    };
  }
  function setStylesFromString(el, value) {
    let cache = el.getAttribute("style", value);
    el.setAttribute("style", value);
    return () => {
      el.setAttribute("style", cache || "");
    };
  }
  function kebabCase(subject) {
    return subject.replace(/([a-z])([A-Z])/g, "$1-$2").toLowerCase();
  }
  function once(callback, fallback = () => {
  }) {
    let called = false;
    return function() {
      if (!called) {
        called = true;
        callback.apply(this, arguments);
      } else {
        fallback.apply(this, arguments);
      }
    };
  }
  directive("transition", (el, { value, modifiers, expression }, { evaluate: evaluate2 }) => {
    if (typeof expression === "function")
      expression = evaluate2(expression);
    if (expression === false)
      return;
    if (!expression || typeof expression === "boolean") {
      registerTransitionsFromHelper(el, modifiers, value);
    } else {
      registerTransitionsFromClassString(el, expression, value);
    }
  });
  function registerTransitionsFromClassString(el, classString, stage) {
    registerTransitionObject(el, setClasses, "");
    let directiveStorageMap = {
      "enter": (classes) => {
        el._x_transition.enter.during = classes;
      },
      "enter-start": (classes) => {
        el._x_transition.enter.start = classes;
      },
      "enter-end": (classes) => {
        el._x_transition.enter.end = classes;
      },
      "leave": (classes) => {
        el._x_transition.leave.during = classes;
      },
      "leave-start": (classes) => {
        el._x_transition.leave.start = classes;
      },
      "leave-end": (classes) => {
        el._x_transition.leave.end = classes;
      }
    };
    directiveStorageMap[stage](classString);
  }
  function registerTransitionsFromHelper(el, modifiers, stage) {
    registerTransitionObject(el, setStyles);
    let doesntSpecify = !modifiers.includes("in") && !modifiers.includes("out") && !stage;
    let transitioningIn = doesntSpecify || modifiers.includes("in") || ["enter"].includes(stage);
    let transitioningOut = doesntSpecify || modifiers.includes("out") || ["leave"].includes(stage);
    if (modifiers.includes("in") && !doesntSpecify) {
      modifiers = modifiers.filter((i, index) => index < modifiers.indexOf("out"));
    }
    if (modifiers.includes("out") && !doesntSpecify) {
      modifiers = modifiers.filter((i, index) => index > modifiers.indexOf("out"));
    }
    let wantsAll = !modifiers.includes("opacity") && !modifiers.includes("scale");
    let wantsOpacity = wantsAll || modifiers.includes("opacity");
    let wantsScale = wantsAll || modifiers.includes("scale");
    let opacityValue = wantsOpacity ? 0 : 1;
    let scaleValue = wantsScale ? modifierValue(modifiers, "scale", 95) / 100 : 1;
    let delay = modifierValue(modifiers, "delay", 0) / 1e3;
    let origin = modifierValue(modifiers, "origin", "center");
    let property = "opacity, transform";
    let durationIn = modifierValue(modifiers, "duration", 150) / 1e3;
    let durationOut = modifierValue(modifiers, "duration", 75) / 1e3;
    let easing = `cubic-bezier(0.4, 0.0, 0.2, 1)`;
    if (transitioningIn) {
      el._x_transition.enter.during = {
        transformOrigin: origin,
        transitionDelay: `${delay}s`,
        transitionProperty: property,
        transitionDuration: `${durationIn}s`,
        transitionTimingFunction: easing
      };
      el._x_transition.enter.start = {
        opacity: opacityValue,
        transform: `scale(${scaleValue})`
      };
      el._x_transition.enter.end = {
        opacity: 1,
        transform: `scale(1)`
      };
    }
    if (transitioningOut) {
      el._x_transition.leave.during = {
        transformOrigin: origin,
        transitionDelay: `${delay}s`,
        transitionProperty: property,
        transitionDuration: `${durationOut}s`,
        transitionTimingFunction: easing
      };
      el._x_transition.leave.start = {
        opacity: 1,
        transform: `scale(1)`
      };
      el._x_transition.leave.end = {
        opacity: opacityValue,
        transform: `scale(${scaleValue})`
      };
    }
  }
  function registerTransitionObject(el, setFunction, defaultValue = {}) {
    if (!el._x_transition)
      el._x_transition = {
        enter: { during: defaultValue, start: defaultValue, end: defaultValue },
        leave: { during: defaultValue, start: defaultValue, end: defaultValue },
        in(before = () => {
        }, after = () => {
        }) {
          transition(el, setFunction, {
            during: this.enter.during,
            start: this.enter.start,
            end: this.enter.end
          }, before, after);
        },
        out(before = () => {
        }, after = () => {
        }) {
          transition(el, setFunction, {
            during: this.leave.during,
            start: this.leave.start,
            end: this.leave.end
          }, before, after);
        }
      };
  }
  window.Element.prototype._x_toggleAndCascadeWithTransitions = function(el, value, show, hide) {
    const nextTick2 = document.visibilityState === "visible" ? requestAnimationFrame : setTimeout;
    let clickAwayCompatibleShow = () => nextTick2(show);
    if (value) {
      if (el._x_transition && (el._x_transition.enter || el._x_transition.leave)) {
        el._x_transition.enter && (Object.entries(el._x_transition.enter.during).length || Object.entries(el._x_transition.enter.start).length || Object.entries(el._x_transition.enter.end).length) ? el._x_transition.in(show) : clickAwayCompatibleShow();
      } else {
        el._x_transition ? el._x_transition.in(show) : clickAwayCompatibleShow();
      }
      return;
    }
    el._x_hidePromise = el._x_transition ? new Promise((resolve, reject) => {
      el._x_transition.out(() => {
      }, () => resolve(hide));
      el._x_transitioning && el._x_transitioning.beforeCancel(() => reject({ isFromCancelledTransition: true }));
    }) : Promise.resolve(hide);
    queueMicrotask(() => {
      let closest = closestHide(el);
      if (closest) {
        if (!closest._x_hideChildren)
          closest._x_hideChildren = [];
        closest._x_hideChildren.push(el);
      } else {
        nextTick2(() => {
          let hideAfterChildren = (el2) => {
            let carry = Promise.all([
              el2._x_hidePromise,
              ...(el2._x_hideChildren || []).map(hideAfterChildren)
            ]).then(([i]) => i());
            delete el2._x_hidePromise;
            delete el2._x_hideChildren;
            return carry;
          };
          hideAfterChildren(el).catch((e) => {
            if (!e.isFromCancelledTransition)
              throw e;
          });
        });
      }
    });
  };
  function closestHide(el) {
    let parent = el.parentNode;
    if (!parent)
      return;
    return parent._x_hidePromise ? parent : closestHide(parent);
  }
  function transition(el, setFunction, { during, start: start2, end } = {}, before = () => {
  }, after = () => {
  }) {
    if (el._x_transitioning)
      el._x_transitioning.cancel();
    if (Object.keys(during).length === 0 && Object.keys(start2).length === 0 && Object.keys(end).length === 0) {
      before();
      after();
      return;
    }
    let undoStart, undoDuring, undoEnd;
    performTransition(el, {
      start() {
        undoStart = setFunction(el, start2);
      },
      during() {
        undoDuring = setFunction(el, during);
      },
      before,
      end() {
        undoStart();
        undoEnd = setFunction(el, end);
      },
      after,
      cleanup() {
        undoDuring();
        undoEnd();
      }
    });
  }
  function performTransition(el, stages) {
    let interrupted, reachedBefore, reachedEnd;
    let finish = once(() => {
      mutateDom(() => {
        interrupted = true;
        if (!reachedBefore)
          stages.before();
        if (!reachedEnd) {
          stages.end();
          releaseNextTicks();
        }
        stages.after();
        if (el.isConnected)
          stages.cleanup();
        delete el._x_transitioning;
      });
    });
    el._x_transitioning = {
      beforeCancels: [],
      beforeCancel(callback) {
        this.beforeCancels.push(callback);
      },
      cancel: once(function() {
        while (this.beforeCancels.length) {
          this.beforeCancels.shift()();
        }
        ;
        finish();
      }),
      finish
    };
    mutateDom(() => {
      stages.start();
      stages.during();
    });
    holdNextTicks();
    requestAnimationFrame(() => {
      if (interrupted)
        return;
      let duration = Number(getComputedStyle(el).transitionDuration.replace(/,.*/, "").replace("s", "")) * 1e3;
      let delay = Number(getComputedStyle(el).transitionDelay.replace(/,.*/, "").replace("s", "")) * 1e3;
      if (duration === 0)
        duration = Number(getComputedStyle(el).animationDuration.replace("s", "")) * 1e3;
      mutateDom(() => {
        stages.before();
      });
      reachedBefore = true;
      requestAnimationFrame(() => {
        if (interrupted)
          return;
        mutateDom(() => {
          stages.end();
        });
        releaseNextTicks();
        setTimeout(el._x_transitioning.finish, duration + delay);
        reachedEnd = true;
      });
    });
  }
  function modifierValue(modifiers, key, fallback) {
    if (modifiers.indexOf(key) === -1)
      return fallback;
    const rawValue = modifiers[modifiers.indexOf(key) + 1];
    if (!rawValue)
      return fallback;
    if (key === "scale") {
      if (isNaN(rawValue))
        return fallback;
    }
    if (key === "duration" || key === "delay") {
      let match = rawValue.match(/([0-9]+)ms/);
      if (match)
        return match[1];
    }
    if (key === "origin") {
      if (["top", "right", "left", "center", "bottom"].includes(modifiers[modifiers.indexOf(key) + 2])) {
        return [rawValue, modifiers[modifiers.indexOf(key) + 2]].join(" ");
      }
    }
    return rawValue;
  }
  var isCloning = false;
  function skipDuringClone(callback, fallback = () => {
  }) {
    return (...args) => isCloning ? fallback(...args) : callback(...args);
  }
  function onlyDuringClone(callback) {
    return (...args) => isCloning && callback(...args);
  }
  var interceptors = [];
  function interceptClone(callback) {
    interceptors.push(callback);
  }
  function cloneNode(from, to) {
    interceptors.forEach((i) => i(from, to));
    isCloning = true;
    dontRegisterReactiveSideEffects(() => {
      initTree(to, (el, callback) => {
        callback(el, () => {
        });
      });
    });
    isCloning = false;
  }
  var isCloningLegacy = false;
  function clone2(oldEl, newEl) {
    if (!newEl._x_dataStack)
      newEl._x_dataStack = oldEl._x_dataStack;
    isCloning = true;
    isCloningLegacy = true;
    dontRegisterReactiveSideEffects(() => {
      cloneTree(newEl);
    });
    isCloning = false;
    isCloningLegacy = false;
  }
  function cloneTree(el) {
    let hasRunThroughFirstEl = false;
    let shallowWalker = (el2, callback) => {
      walk(el2, (el3, skip) => {
        if (hasRunThroughFirstEl && isRoot(el3))
          return skip();
        hasRunThroughFirstEl = true;
        callback(el3, skip);
      });
    };
    initTree(el, shallowWalker);
  }
  function dontRegisterReactiveSideEffects(callback) {
    let cache = effect;
    overrideEffect((callback2, el) => {
      let storedEffect = cache(callback2);
      release(storedEffect);
      return () => {
      };
    });
    callback();
    overrideEffect(cache);
  }
  function bind(el, name, value, modifiers = []) {
    if (!el._x_bindings)
      el._x_bindings = reactive({});
    el._x_bindings[name] = value;
    name = modifiers.includes("camel") ? camelCase(name) : name;
    switch (name) {
      case "value":
        bindInputValue(el, value);
        break;
      case "style":
        bindStyles(el, value);
        break;
      case "class":
        bindClasses(el, value);
        break;
      case "selected":
      case "checked":
        bindAttributeAndProperty(el, name, value);
        break;
      default:
        bindAttribute(el, name, value);
        break;
    }
  }
  function bindInputValue(el, value) {
    if (el.type === "radio") {
      if (el.attributes.value === void 0) {
        el.value = value;
      }
      if (window.fromModel) {
        if (typeof value === "boolean") {
          el.checked = safeParseBoolean(el.value) === value;
        } else {
          el.checked = checkedAttrLooseCompare(el.value, value);
        }
      }
    } else if (el.type === "checkbox") {
      if (Number.isInteger(value)) {
        el.value = value;
      } else if (!Array.isArray(value) && typeof value !== "boolean" && ![null, void 0].includes(value)) {
        el.value = String(value);
      } else {
        if (Array.isArray(value)) {
          el.checked = value.some((val) => checkedAttrLooseCompare(val, el.value));
        } else {
          el.checked = !!value;
        }
      }
    } else if (el.tagName === "SELECT") {
      updateSelect(el, value);
    } else {
      if (el.value === value)
        return;
      el.value = value === void 0 ? "" : value;
    }
  }
  function bindClasses(el, value) {
    if (el._x_undoAddedClasses)
      el._x_undoAddedClasses();
    el._x_undoAddedClasses = setClasses(el, value);
  }
  function bindStyles(el, value) {
    if (el._x_undoAddedStyles)
      el._x_undoAddedStyles();
    el._x_undoAddedStyles = setStyles(el, value);
  }
  function bindAttributeAndProperty(el, name, value) {
    bindAttribute(el, name, value);
    setPropertyIfChanged(el, name, value);
  }
  function bindAttribute(el, name, value) {
    if ([null, void 0, false].includes(value) && attributeShouldntBePreservedIfFalsy(name)) {
      el.removeAttribute(name);
    } else {
      if (isBooleanAttr(name))
        value = name;
      setIfChanged(el, name, value);
    }
  }
  function setIfChanged(el, attrName, value) {
    if (el.getAttribute(attrName) != value) {
      el.setAttribute(attrName, value);
    }
  }
  function setPropertyIfChanged(el, propName, value) {
    if (el[propName] !== value) {
      el[propName] = value;
    }
  }
  function updateSelect(el, value) {
    const arrayWrappedValue = [].concat(value).map((value2) => {
      return value2 + "";
    });
    Array.from(el.options).forEach((option) => {
      option.selected = arrayWrappedValue.includes(option.value);
    });
  }
  function camelCase(subject) {
    return subject.toLowerCase().replace(/-(\w)/g, (match, char) => char.toUpperCase());
  }
  function checkedAttrLooseCompare(valueA, valueB) {
    return valueA == valueB;
  }
  function safeParseBoolean(rawValue) {
    if ([1, "1", "true", "on", "yes", true].includes(rawValue)) {
      return true;
    }
    if ([0, "0", "false", "off", "no", false].includes(rawValue)) {
      return false;
    }
    return rawValue ? Boolean(rawValue) : null;
  }
  function isBooleanAttr(attrName) {
    const booleanAttributes = [
      "disabled",
      "checked",
      "required",
      "readonly",
      "hidden",
      "open",
      "selected",
      "autofocus",
      "itemscope",
      "multiple",
      "novalidate",
      "allowfullscreen",
      "allowpaymentrequest",
      "formnovalidate",
      "autoplay",
      "controls",
      "loop",
      "muted",
      "playsinline",
      "default",
      "ismap",
      "reversed",
      "async",
      "defer",
      "nomodule"
    ];
    return booleanAttributes.includes(attrName);
  }
  function attributeShouldntBePreservedIfFalsy(name) {
    return !["aria-pressed", "aria-checked", "aria-expanded", "aria-selected"].includes(name);
  }
  function getBinding(el, name, fallback) {
    if (el._x_bindings && el._x_bindings[name] !== void 0)
      return el._x_bindings[name];
    return getAttributeBinding(el, name, fallback);
  }
  function extractProp(el, name, fallback, extract = true) {
    if (el._x_bindings && el._x_bindings[name] !== void 0)
      return el._x_bindings[name];
    if (el._x_inlineBindings && el._x_inlineBindings[name] !== void 0) {
      let binding = el._x_inlineBindings[name];
      binding.extract = extract;
      return dontAutoEvaluateFunctions(() => {
        return evaluate(el, binding.expression);
      });
    }
    return getAttributeBinding(el, name, fallback);
  }
  function getAttributeBinding(el, name, fallback) {
    let attr = el.getAttribute(name);
    if (attr === null)
      return typeof fallback === "function" ? fallback() : fallback;
    if (attr === "")
      return true;
    if (isBooleanAttr(name)) {
      return !![name, "true"].includes(attr);
    }
    return attr;
  }
  function debounce(func, wait) {
    var timeout;
    return function() {
      var context = this, args = arguments;
      var later = function() {
        timeout = null;
        func.apply(context, args);
      };
      clearTimeout(timeout);
      timeout = setTimeout(later, wait);
    };
  }
  function throttle(func, limit) {
    let inThrottle;
    return function() {
      let context = this, args = arguments;
      if (!inThrottle) {
        func.apply(context, args);
        inThrottle = true;
        setTimeout(() => inThrottle = false, limit);
      }
    };
  }
  function entangle({ get: outerGet, set: outerSet }, { get: innerGet, set: innerSet }) {
    let firstRun = true;
    let outerHash;
    let innerHash;
    let reference = effect(() => {
      let outer = outerGet();
      let inner = innerGet();
      if (firstRun) {
        innerSet(cloneIfObject(outer));
        firstRun = false;
      } else {
        let outerHashLatest = JSON.stringify(outer);
        let innerHashLatest = JSON.stringify(inner);
        if (outerHashLatest !== outerHash) {
          innerSet(cloneIfObject(outer));
        } else if (outerHashLatest !== innerHashLatest) {
          outerSet(cloneIfObject(inner));
        } else {
        }
      }
      outerHash = JSON.stringify(outerGet());
      innerHash = JSON.stringify(innerGet());
    });
    return () => {
      release(reference);
    };
  }
  function cloneIfObject(value) {
    return typeof value === "object" ? JSON.parse(JSON.stringify(value)) : value;
  }
  function plugin(callback) {
    let callbacks = Array.isArray(callback) ? callback : [callback];
    callbacks.forEach((i) => i(alpine_default));
  }
  var stores = {};
  var isReactive = false;
  function store(name, value) {
    if (!isReactive) {
      stores = reactive(stores);
      isReactive = true;
    }
    if (value === void 0) {
      return stores[name];
    }
    stores[name] = value;
    if (typeof value === "object" && value !== null && value.hasOwnProperty("init") && typeof value.init === "function") {
      stores[name].init();
    }
    initInterceptors2(stores[name]);
  }
  function getStores() {
    return stores;
  }
  var binds = {};
  function bind2(name, bindings) {
    let getBindings = typeof bindings !== "function" ? () => bindings : bindings;
    if (name instanceof Element) {
      return applyBindingsObject(name, getBindings());
    } else {
      binds[name] = getBindings;
    }
    return () => {
    };
  }
  function injectBindingProviders(obj) {
    Object.entries(binds).forEach(([name, callback]) => {
      Object.defineProperty(obj, name, {
        get() {
          return (...args) => {
            return callback(...args);
          };
        }
      });
    });
    return obj;
  }
  function applyBindingsObject(el, obj, original) {
    let cleanupRunners = [];
    while (cleanupRunners.length)
      cleanupRunners.pop()();
    let attributes = Object.entries(obj).map(([name, value]) => ({ name, value }));
    let staticAttributes = attributesOnly(attributes);
    attributes = attributes.map((attribute) => {
      if (staticAttributes.find((attr) => attr.name === attribute.name)) {
        return {
          name: `x-bind:${attribute.name}`,
          value: `"${attribute.value}"`
        };
      }
      return attribute;
    });
    directives(el, attributes, original).map((handle) => {
      cleanupRunners.push(handle.runCleanups);
      handle();
    });
    return () => {
      while (cleanupRunners.length)
        cleanupRunners.pop()();
    };
  }
  var datas = {};
  function data(name, callback) {
    datas[name] = callback;
  }
  function injectDataProviders(obj, context) {
    Object.entries(datas).forEach(([name, callback]) => {
      Object.defineProperty(obj, name, {
        get() {
          return (...args) => {
            return callback.bind(context)(...args);
          };
        },
        enumerable: false
      });
    });
    return obj;
  }
  var Alpine = {
    get reactive() {
      return reactive;
    },
    get release() {
      return release;
    },
    get effect() {
      return effect;
    },
    get raw() {
      return raw;
    },
    version: "3.13.5",
    flushAndStopDeferringMutations,
    dontAutoEvaluateFunctions,
    disableEffectScheduling,
    startObservingMutations,
    stopObservingMutations,
    setReactivityEngine,
    onAttributeRemoved,
    onAttributesAdded,
    closestDataStack,
    skipDuringClone,
    onlyDuringClone,
    addRootSelector,
    addInitSelector,
    interceptClone,
    addScopeToNode,
    deferMutations,
    mapAttributes,
    evaluateLater,
    interceptInit,
    setEvaluator,
    mergeProxies,
    extractProp,
    findClosest,
    onElRemoved,
    closestRoot,
    destroyTree,
    interceptor,
    // INTERNAL: not public API and is subject to change without major release.
    transition,
    // INTERNAL
    setStyles,
    // INTERNAL
    mutateDom,
    directive,
    entangle,
    throttle,
    debounce,
    evaluate,
    initTree,
    nextTick,
    prefixed: prefix,
    prefix: setPrefix,
    plugin,
    magic,
    store,
    start,
    clone: clone2,
    // INTERNAL
    cloneNode,
    // INTERNAL
    bound: getBinding,
    $data: scope,
    watch,
    walk,
    data,
    bind: bind2
  };
  var alpine_default = Alpine;
  function makeMap(str, expectsLowerCase) {
    const map = /* @__PURE__ */ Object.create(null);
    const list = str.split(",");
    for (let i = 0; i < list.length; i++) {
      map[list[i]] = true;
    }
    return expectsLowerCase ? (val) => !!map[val.toLowerCase()] : (val) => !!map[val];
  }
  var specialBooleanAttrs = `itemscope,allowfullscreen,formnovalidate,ismap,nomodule,novalidate,readonly`;
  var isBooleanAttr2 = /* @__PURE__ */ makeMap(specialBooleanAttrs + `,async,autofocus,autoplay,controls,default,defer,disabled,hidden,loop,open,required,reversed,scoped,seamless,checked,muted,multiple,selected`);
  var EMPTY_OBJ = true ? Object.freeze({}) : {};
  var EMPTY_ARR = true ? Object.freeze([]) : [];
  var hasOwnProperty = Object.prototype.hasOwnProperty;
  var hasOwn = (val, key) => hasOwnProperty.call(val, key);
  var isArray = Array.isArray;
  var isMap = (val) => toTypeString(val) === "[object Map]";
  var isString = (val) => typeof val === "string";
  var isSymbol = (val) => typeof val === "symbol";
  var isObject2 = (val) => val !== null && typeof val === "object";
  var objectToString = Object.prototype.toString;
  var toTypeString = (value) => objectToString.call(value);
  var toRawType = (value) => {
    return toTypeString(value).slice(8, -1);
  };
  var isIntegerKey = (key) => isString(key) && key !== "NaN" && key[0] !== "-" && "" + parseInt(key, 10) === key;
  var cacheStringFunction = (fn) => {
    const cache = /* @__PURE__ */ Object.create(null);
    return (str) => {
      const hit = cache[str];
      return hit || (cache[str] = fn(str));
    };
  };
  var camelizeRE = /-(\w)/g;
  var camelize = cacheStringFunction((str) => {
    return str.replace(camelizeRE, (_, c) => c ? c.toUpperCase() : "");
  });
  var hyphenateRE = /\B([A-Z])/g;
  var hyphenate = cacheStringFunction((str) => str.replace(hyphenateRE, "-$1").toLowerCase());
  var capitalize = cacheStringFunction((str) => str.charAt(0).toUpperCase() + str.slice(1));
  var toHandlerKey = cacheStringFunction((str) => str ? `on${capitalize(str)}` : ``);
  var hasChanged = (value, oldValue) => value !== oldValue && (value === value || oldValue === oldValue);
  var targetMap = /* @__PURE__ */ new WeakMap();
  var effectStack = [];
  var activeEffect;
  var ITERATE_KEY = Symbol(true ? "iterate" : "");
  var MAP_KEY_ITERATE_KEY = Symbol(true ? "Map key iterate" : "");
  function isEffect(fn) {
    return fn && fn._isEffect === true;
  }
  function effect2(fn, options = EMPTY_OBJ) {
    if (isEffect(fn)) {
      fn = fn.raw;
    }
    const effect3 = createReactiveEffect(fn, options);
    if (!options.lazy) {
      effect3();
    }
    return effect3;
  }
  function stop(effect3) {
    if (effect3.active) {
      cleanup(effect3);
      if (effect3.options.onStop) {
        effect3.options.onStop();
      }
      effect3.active = false;
    }
  }
  var uid = 0;
  function createReactiveEffect(fn, options) {
    const effect3 = function reactiveEffect() {
      if (!effect3.active) {
        return fn();
      }
      if (!effectStack.includes(effect3)) {
        cleanup(effect3);
        try {
          enableTracking();
          effectStack.push(effect3);
          activeEffect = effect3;
          return fn();
        } finally {
          effectStack.pop();
          resetTracking();
          activeEffect = effectStack[effectStack.length - 1];
        }
      }
    };
    effect3.id = uid++;
    effect3.allowRecurse = !!options.allowRecurse;
    effect3._isEffect = true;
    effect3.active = true;
    effect3.raw = fn;
    effect3.deps = [];
    effect3.options = options;
    return effect3;
  }
  function cleanup(effect3) {
    const { deps } = effect3;
    if (deps.length) {
      for (let i = 0; i < deps.length; i++) {
        deps[i].delete(effect3);
      }
      deps.length = 0;
    }
  }
  var shouldTrack = true;
  var trackStack = [];
  function pauseTracking() {
    trackStack.push(shouldTrack);
    shouldTrack = false;
  }
  function enableTracking() {
    trackStack.push(shouldTrack);
    shouldTrack = true;
  }
  function resetTracking() {
    const last = trackStack.pop();
    shouldTrack = last === void 0 ? true : last;
  }
  function track(target, type, key) {
    if (!shouldTrack || activeEffect === void 0) {
      return;
    }
    let depsMap = targetMap.get(target);
    if (!depsMap) {
      targetMap.set(target, depsMap = /* @__PURE__ */ new Map());
    }
    let dep = depsMap.get(key);
    if (!dep) {
      depsMap.set(key, dep = /* @__PURE__ */ new Set());
    }
    if (!dep.has(activeEffect)) {
      dep.add(activeEffect);
      activeEffect.deps.push(dep);
      if (activeEffect.options.onTrack) {
        activeEffect.options.onTrack({
          effect: activeEffect,
          target,
          type,
          key
        });
      }
    }
  }
  function trigger(target, type, key, newValue, oldValue, oldTarget) {
    const depsMap = targetMap.get(target);
    if (!depsMap) {
      return;
    }
    const effects = /* @__PURE__ */ new Set();
    const add2 = (effectsToAdd) => {
      if (effectsToAdd) {
        effectsToAdd.forEach((effect3) => {
          if (effect3 !== activeEffect || effect3.allowRecurse) {
            effects.add(effect3);
          }
        });
      }
    };
    if (type === "clear") {
      depsMap.forEach(add2);
    } else if (key === "length" && isArray(target)) {
      depsMap.forEach((dep, key2) => {
        if (key2 === "length" || key2 >= newValue) {
          add2(dep);
        }
      });
    } else {
      if (key !== void 0) {
        add2(depsMap.get(key));
      }
      switch (type) {
        case "add":
          if (!isArray(target)) {
            add2(depsMap.get(ITERATE_KEY));
            if (isMap(target)) {
              add2(depsMap.get(MAP_KEY_ITERATE_KEY));
            }
          } else if (isIntegerKey(key)) {
            add2(depsMap.get("length"));
          }
          break;
        case "delete":
          if (!isArray(target)) {
            add2(depsMap.get(ITERATE_KEY));
            if (isMap(target)) {
              add2(depsMap.get(MAP_KEY_ITERATE_KEY));
            }
          }
          break;
        case "set":
          if (isMap(target)) {
            add2(depsMap.get(ITERATE_KEY));
          }
          break;
      }
    }
    const run = (effect3) => {
      if (effect3.options.onTrigger) {
        effect3.options.onTrigger({
          effect: effect3,
          target,
          key,
          type,
          newValue,
          oldValue,
          oldTarget
        });
      }
      if (effect3.options.scheduler) {
        effect3.options.scheduler(effect3);
      } else {
        effect3();
      }
    };
    effects.forEach(run);
  }
  var isNonTrackableKeys = /* @__PURE__ */ makeMap(`__proto__,__v_isRef,__isVue`);
  var builtInSymbols = new Set(Object.getOwnPropertyNames(Symbol).map((key) => Symbol[key]).filter(isSymbol));
  var get2 = /* @__PURE__ */ createGetter();
  var readonlyGet = /* @__PURE__ */ createGetter(true);
  var arrayInstrumentations = /* @__PURE__ */ createArrayInstrumentations();
  function createArrayInstrumentations() {
    const instrumentations = {};
    ["includes", "indexOf", "lastIndexOf"].forEach((key) => {
      instrumentations[key] = function(...args) {
        const arr = toRaw(this);
        for (let i = 0, l = this.length; i < l; i++) {
          track(arr, "get", i + "");
        }
        const res = arr[key](...args);
        if (res === -1 || res === false) {
          return arr[key](...args.map(toRaw));
        } else {
          return res;
        }
      };
    });
    ["push", "pop", "shift", "unshift", "splice"].forEach((key) => {
      instrumentations[key] = function(...args) {
        pauseTracking();
        const res = toRaw(this)[key].apply(this, args);
        resetTracking();
        return res;
      };
    });
    return instrumentations;
  }
  function createGetter(isReadonly = false, shallow = false) {
    return function get3(target, key, receiver) {
      if (key === "__v_isReactive") {
        return !isReadonly;
      } else if (key === "__v_isReadonly") {
        return isReadonly;
      } else if (key === "__v_raw" && receiver === (isReadonly ? shallow ? shallowReadonlyMap : readonlyMap : shallow ? shallowReactiveMap : reactiveMap).get(target)) {
        return target;
      }
      const targetIsArray = isArray(target);
      if (!isReadonly && targetIsArray && hasOwn(arrayInstrumentations, key)) {
        return Reflect.get(arrayInstrumentations, key, receiver);
      }
      const res = Reflect.get(target, key, receiver);
      if (isSymbol(key) ? builtInSymbols.has(key) : isNonTrackableKeys(key)) {
        return res;
      }
      if (!isReadonly) {
        track(target, "get", key);
      }
      if (shallow) {
        return res;
      }
      if (isRef(res)) {
        const shouldUnwrap = !targetIsArray || !isIntegerKey(key);
        return shouldUnwrap ? res.value : res;
      }
      if (isObject2(res)) {
        return isReadonly ? readonly(res) : reactive2(res);
      }
      return res;
    };
  }
  var set2 = /* @__PURE__ */ createSetter();
  function createSetter(shallow = false) {
    return function set3(target, key, value, receiver) {
      let oldValue = target[key];
      if (!shallow) {
        value = toRaw(value);
        oldValue = toRaw(oldValue);
        if (!isArray(target) && isRef(oldValue) && !isRef(value)) {
          oldValue.value = value;
          return true;
        }
      }
      const hadKey = isArray(target) && isIntegerKey(key) ? Number(key) < target.length : hasOwn(target, key);
      const result = Reflect.set(target, key, value, receiver);
      if (target === toRaw(receiver)) {
        if (!hadKey) {
          trigger(target, "add", key, value);
        } else if (hasChanged(value, oldValue)) {
          trigger(target, "set", key, value, oldValue);
        }
      }
      return result;
    };
  }
  function deleteProperty(target, key) {
    const hadKey = hasOwn(target, key);
    const oldValue = target[key];
    const result = Reflect.deleteProperty(target, key);
    if (result && hadKey) {
      trigger(target, "delete", key, void 0, oldValue);
    }
    return result;
  }
  function has(target, key) {
    const result = Reflect.has(target, key);
    if (!isSymbol(key) || !builtInSymbols.has(key)) {
      track(target, "has", key);
    }
    return result;
  }
  function ownKeys(target) {
    track(target, "iterate", isArray(target) ? "length" : ITERATE_KEY);
    return Reflect.ownKeys(target);
  }
  var mutableHandlers = {
    get: get2,
    set: set2,
    deleteProperty,
    has,
    ownKeys
  };
  var readonlyHandlers = {
    get: readonlyGet,
    set(target, key) {
      if (true) {
        console.warn(`Set operation on key "${String(key)}" failed: target is readonly.`, target);
      }
      return true;
    },
    deleteProperty(target, key) {
      if (true) {
        console.warn(`Delete operation on key "${String(key)}" failed: target is readonly.`, target);
      }
      return true;
    }
  };
  var toReactive = (value) => isObject2(value) ? reactive2(value) : value;
  var toReadonly = (value) => isObject2(value) ? readonly(value) : value;
  var toShallow = (value) => value;
  var getProto = (v) => Reflect.getPrototypeOf(v);
  function get$1(target, key, isReadonly = false, isShallow = false) {
    target = target[
      "__v_raw"
      /* RAW */
    ];
    const rawTarget = toRaw(target);
    const rawKey = toRaw(key);
    if (key !== rawKey) {
      !isReadonly && track(rawTarget, "get", key);
    }
    !isReadonly && track(rawTarget, "get", rawKey);
    const { has: has2 } = getProto(rawTarget);
    const wrap = isShallow ? toShallow : isReadonly ? toReadonly : toReactive;
    if (has2.call(rawTarget, key)) {
      return wrap(target.get(key));
    } else if (has2.call(rawTarget, rawKey)) {
      return wrap(target.get(rawKey));
    } else if (target !== rawTarget) {
      target.get(key);
    }
  }
  function has$1(key, isReadonly = false) {
    const target = this[
      "__v_raw"
      /* RAW */
    ];
    const rawTarget = toRaw(target);
    const rawKey = toRaw(key);
    if (key !== rawKey) {
      !isReadonly && track(rawTarget, "has", key);
    }
    !isReadonly && track(rawTarget, "has", rawKey);
    return key === rawKey ? target.has(key) : target.has(key) || target.has(rawKey);
  }
  function size(target, isReadonly = false) {
    target = target[
      "__v_raw"
      /* RAW */
    ];
    !isReadonly && track(toRaw(target), "iterate", ITERATE_KEY);
    return Reflect.get(target, "size", target);
  }
  function add(value) {
    value = toRaw(value);
    const target = toRaw(this);
    const proto = getProto(target);
    const hadKey = proto.has.call(target, value);
    if (!hadKey) {
      target.add(value);
      trigger(target, "add", value, value);
    }
    return this;
  }
  function set$1(key, value) {
    value = toRaw(value);
    const target = toRaw(this);
    const { has: has2, get: get3 } = getProto(target);
    let hadKey = has2.call(target, key);
    if (!hadKey) {
      key = toRaw(key);
      hadKey = has2.call(target, key);
    } else if (true) {
      checkIdentityKeys(target, has2, key);
    }
    const oldValue = get3.call(target, key);
    target.set(key, value);
    if (!hadKey) {
      trigger(target, "add", key, value);
    } else if (hasChanged(value, oldValue)) {
      trigger(target, "set", key, value, oldValue);
    }
    return this;
  }
  function deleteEntry(key) {
    const target = toRaw(this);
    const { has: has2, get: get3 } = getProto(target);
    let hadKey = has2.call(target, key);
    if (!hadKey) {
      key = toRaw(key);
      hadKey = has2.call(target, key);
    } else if (true) {
      checkIdentityKeys(target, has2, key);
    }
    const oldValue = get3 ? get3.call(target, key) : void 0;
    const result = target.delete(key);
    if (hadKey) {
      trigger(target, "delete", key, void 0, oldValue);
    }
    return result;
  }
  function clear() {
    const target = toRaw(this);
    const hadItems = target.size !== 0;
    const oldTarget = true ? isMap(target) ? new Map(target) : new Set(target) : void 0;
    const result = target.clear();
    if (hadItems) {
      trigger(target, "clear", void 0, void 0, oldTarget);
    }
    return result;
  }
  function createForEach(isReadonly, isShallow) {
    return function forEach(callback, thisArg) {
      const observed = this;
      const target = observed[
        "__v_raw"
        /* RAW */
      ];
      const rawTarget = toRaw(target);
      const wrap = isShallow ? toShallow : isReadonly ? toReadonly : toReactive;
      !isReadonly && track(rawTarget, "iterate", ITERATE_KEY);
      return target.forEach((value, key) => {
        return callback.call(thisArg, wrap(value), wrap(key), observed);
      });
    };
  }
  function createIterableMethod(method, isReadonly, isShallow) {
    return function(...args) {
      const target = this[
        "__v_raw"
        /* RAW */
      ];
      const rawTarget = toRaw(target);
      const targetIsMap = isMap(rawTarget);
      const isPair = method === "entries" || method === Symbol.iterator && targetIsMap;
      const isKeyOnly = method === "keys" && targetIsMap;
      const innerIterator = target[method](...args);
      const wrap = isShallow ? toShallow : isReadonly ? toReadonly : toReactive;
      !isReadonly && track(rawTarget, "iterate", isKeyOnly ? MAP_KEY_ITERATE_KEY : ITERATE_KEY);
      return {
        // iterator protocol
        next() {
          const { value, done } = innerIterator.next();
          return done ? { value, done } : {
            value: isPair ? [wrap(value[0]), wrap(value[1])] : wrap(value),
            done
          };
        },
        // iterable protocol
        [Symbol.iterator]() {
          return this;
        }
      };
    };
  }
  function createReadonlyMethod(type) {
    return function(...args) {
      if (true) {
        const key = args[0] ? `on key "${args[0]}" ` : ``;
        console.warn(`${capitalize(type)} operation ${key}failed: target is readonly.`, toRaw(this));
      }
      return type === "delete" ? false : this;
    };
  }
  function createInstrumentations() {
    const mutableInstrumentations2 = {
      get(key) {
        return get$1(this, key);
      },
      get size() {
        return size(this);
      },
      has: has$1,
      add,
      set: set$1,
      delete: deleteEntry,
      clear,
      forEach: createForEach(false, false)
    };
    const shallowInstrumentations2 = {
      get(key) {
        return get$1(this, key, false, true);
      },
      get size() {
        return size(this);
      },
      has: has$1,
      add,
      set: set$1,
      delete: deleteEntry,
      clear,
      forEach: createForEach(false, true)
    };
    const readonlyInstrumentations2 = {
      get(key) {
        return get$1(this, key, true);
      },
      get size() {
        return size(this, true);
      },
      has(key) {
        return has$1.call(this, key, true);
      },
      add: createReadonlyMethod(
        "add"
        /* ADD */
      ),
      set: createReadonlyMethod(
        "set"
        /* SET */
      ),
      delete: createReadonlyMethod(
        "delete"
        /* DELETE */
      ),
      clear: createReadonlyMethod(
        "clear"
        /* CLEAR */
      ),
      forEach: createForEach(true, false)
    };
    const shallowReadonlyInstrumentations2 = {
      get(key) {
        return get$1(this, key, true, true);
      },
      get size() {
        return size(this, true);
      },
      has(key) {
        return has$1.call(this, key, true);
      },
      add: createReadonlyMethod(
        "add"
        /* ADD */
      ),
      set: createReadonlyMethod(
        "set"
        /* SET */
      ),
      delete: createReadonlyMethod(
        "delete"
        /* DELETE */
      ),
      clear: createReadonlyMethod(
        "clear"
        /* CLEAR */
      ),
      forEach: createForEach(true, true)
    };
    const iteratorMethods = ["keys", "values", "entries", Symbol.iterator];
    iteratorMethods.forEach((method) => {
      mutableInstrumentations2[method] = createIterableMethod(method, false, false);
      readonlyInstrumentations2[method] = createIterableMethod(method, true, false);
      shallowInstrumentations2[method] = createIterableMethod(method, false, true);
      shallowReadonlyInstrumentations2[method] = createIterableMethod(method, true, true);
    });
    return [
      mutableInstrumentations2,
      readonlyInstrumentations2,
      shallowInstrumentations2,
      shallowReadonlyInstrumentations2
    ];
  }
  var [mutableInstrumentations, readonlyInstrumentations, shallowInstrumentations, shallowReadonlyInstrumentations] = /* @__PURE__ */ createInstrumentations();
  function createInstrumentationGetter(isReadonly, shallow) {
    const instrumentations = shallow ? isReadonly ? shallowReadonlyInstrumentations : shallowInstrumentations : isReadonly ? readonlyInstrumentations : mutableInstrumentations;
    return (target, key, receiver) => {
      if (key === "__v_isReactive") {
        return !isReadonly;
      } else if (key === "__v_isReadonly") {
        return isReadonly;
      } else if (key === "__v_raw") {
        return target;
      }
      return Reflect.get(hasOwn(instrumentations, key) && key in target ? instrumentations : target, key, receiver);
    };
  }
  var mutableCollectionHandlers = {
    get: /* @__PURE__ */ createInstrumentationGetter(false, false)
  };
  var readonlyCollectionHandlers = {
    get: /* @__PURE__ */ createInstrumentationGetter(true, false)
  };
  function checkIdentityKeys(target, has2, key) {
    const rawKey = toRaw(key);
    if (rawKey !== key && has2.call(target, rawKey)) {
      const type = toRawType(target);
      console.warn(`Reactive ${type} contains both the raw and reactive versions of the same object${type === `Map` ? ` as keys` : ``}, which can lead to inconsistencies. Avoid differentiating between the raw and reactive versions of an object and only use the reactive version if possible.`);
    }
  }
  var reactiveMap = /* @__PURE__ */ new WeakMap();
  var shallowReactiveMap = /* @__PURE__ */ new WeakMap();
  var readonlyMap = /* @__PURE__ */ new WeakMap();
  var shallowReadonlyMap = /* @__PURE__ */ new WeakMap();
  function targetTypeMap(rawType) {
    switch (rawType) {
      case "Object":
      case "Array":
        return 1;
      case "Map":
      case "Set":
      case "WeakMap":
      case "WeakSet":
        return 2;
      default:
        return 0;
    }
  }
  function getTargetType(value) {
    return value[
      "__v_skip"
      /* SKIP */
    ] || !Object.isExtensible(value) ? 0 : targetTypeMap(toRawType(value));
  }
  function reactive2(target) {
    if (target && target[
      "__v_isReadonly"
      /* IS_READONLY */
    ]) {
      return target;
    }
    return createReactiveObject(target, false, mutableHandlers, mutableCollectionHandlers, reactiveMap);
  }
  function readonly(target) {
    return createReactiveObject(target, true, readonlyHandlers, readonlyCollectionHandlers, readonlyMap);
  }
  function createReactiveObject(target, isReadonly, baseHandlers, collectionHandlers, proxyMap) {
    if (!isObject2(target)) {
      if (true) {
        console.warn(`value cannot be made reactive: ${String(target)}`);
      }
      return target;
    }
    if (target[
      "__v_raw"
      /* RAW */
    ] && !(isReadonly && target[
      "__v_isReactive"
      /* IS_REACTIVE */
    ])) {
      return target;
    }
    const existingProxy = proxyMap.get(target);
    if (existingProxy) {
      return existingProxy;
    }
    const targetType = getTargetType(target);
    if (targetType === 0) {
      return target;
    }
    const proxy = new Proxy(target, targetType === 2 ? collectionHandlers : baseHandlers);
    proxyMap.set(target, proxy);
    return proxy;
  }
  function toRaw(observed) {
    return observed && toRaw(observed[
      "__v_raw"
      /* RAW */
    ]) || observed;
  }
  function isRef(r) {
    return Boolean(r && r.__v_isRef === true);
  }
  magic("nextTick", () => nextTick);
  magic("dispatch", (el) => dispatch.bind(dispatch, el));
  magic("watch", (el, { evaluateLater: evaluateLater2, cleanup: cleanup2 }) => (key, callback) => {
    let evaluate2 = evaluateLater2(key);
    let getter = () => {
      let value;
      evaluate2((i) => value = i);
      return value;
    };
    let unwatch = watch(getter, callback);
    cleanup2(unwatch);
  });
  magic("store", getStores);
  magic("data", (el) => scope(el));
  magic("root", (el) => closestRoot(el));
  magic("refs", (el) => {
    if (el._x_refs_proxy)
      return el._x_refs_proxy;
    el._x_refs_proxy = mergeProxies(getArrayOfRefObject(el));
    return el._x_refs_proxy;
  });
  function getArrayOfRefObject(el) {
    let refObjects = [];
    let currentEl = el;
    while (currentEl) {
      if (currentEl._x_refs)
        refObjects.push(currentEl._x_refs);
      currentEl = currentEl.parentNode;
    }
    return refObjects;
  }
  var globalIdMemo = {};
  function findAndIncrementId(name) {
    if (!globalIdMemo[name])
      globalIdMemo[name] = 0;
    return ++globalIdMemo[name];
  }
  function closestIdRoot(el, name) {
    return findClosest(el, (element) => {
      if (element._x_ids && element._x_ids[name])
        return true;
    });
  }
  function setIdRoot(el, name) {
    if (!el._x_ids)
      el._x_ids = {};
    if (!el._x_ids[name])
      el._x_ids[name] = findAndIncrementId(name);
  }
  magic("id", (el, { cleanup: cleanup2 }) => (name, key = null) => {
    let cacheKey = `${name}${key ? `-${key}` : ""}`;
    return cacheIdByNameOnElement(el, cacheKey, cleanup2, () => {
      let root = closestIdRoot(el, name);
      let id = root ? root._x_ids[name] : findAndIncrementId(name);
      return key ? `${name}-${id}-${key}` : `${name}-${id}`;
    });
  });
  interceptClone((from, to) => {
    if (from._x_id) {
      to._x_id = from._x_id;
    }
  });
  function cacheIdByNameOnElement(el, cacheKey, cleanup2, callback) {
    if (!el._x_id)
      el._x_id = {};
    if (el._x_id[cacheKey])
      return el._x_id[cacheKey];
    let output = callback();
    el._x_id[cacheKey] = output;
    cleanup2(() => {
      delete el._x_id[cacheKey];
    });
    return output;
  }
  magic("el", (el) => el);
  warnMissingPluginMagic("Focus", "focus", "focus");
  warnMissingPluginMagic("Persist", "persist", "persist");
  function warnMissingPluginMagic(name, magicName, slug) {
    magic(magicName, (el) => warn(`You can't use [$${magicName}] without first installing the "${name}" plugin here: https://alpinejs.dev/plugins/${slug}`, el));
  }
  directive("modelable", (el, { expression }, { effect: effect3, evaluateLater: evaluateLater2, cleanup: cleanup2 }) => {
    let func = evaluateLater2(expression);
    let innerGet = () => {
      let result;
      func((i) => result = i);
      return result;
    };
    let evaluateInnerSet = evaluateLater2(`${expression} = __placeholder`);
    let innerSet = (val) => evaluateInnerSet(() => {
    }, { scope: { "__placeholder": val } });
    let initialValue = innerGet();
    innerSet(initialValue);
    queueMicrotask(() => {
      if (!el._x_model)
        return;
      el._x_removeModelListeners["default"]();
      let outerGet = el._x_model.get;
      let outerSet = el._x_model.set;
      let releaseEntanglement = entangle(
        {
          get() {
            return outerGet();
          },
          set(value) {
            outerSet(value);
          }
        },
        {
          get() {
            return innerGet();
          },
          set(value) {
            innerSet(value);
          }
        }
      );
      cleanup2(releaseEntanglement);
    });
  });
  directive("teleport", (el, { modifiers, expression }, { cleanup: cleanup2 }) => {
    if (el.tagName.toLowerCase() !== "template")
      warn("x-teleport can only be used on a <template> tag", el);
    let target = getTarget(expression);
    let clone22 = el.content.cloneNode(true).firstElementChild;
    el._x_teleport = clone22;
    clone22._x_teleportBack = el;
    el.setAttribute("data-teleport-template", true);
    clone22.setAttribute("data-teleport-target", true);
    if (el._x_forwardEvents) {
      el._x_forwardEvents.forEach((eventName) => {
        clone22.addEventListener(eventName, (e) => {
          e.stopPropagation();
          el.dispatchEvent(new e.constructor(e.type, e));
        });
      });
    }
    addScopeToNode(clone22, {}, el);
    let placeInDom = (clone3, target2, modifiers2) => {
      if (modifiers2.includes("prepend")) {
        target2.parentNode.insertBefore(clone3, target2);
      } else if (modifiers2.includes("append")) {
        target2.parentNode.insertBefore(clone3, target2.nextSibling);
      } else {
        target2.appendChild(clone3);
      }
    };
    mutateDom(() => {
      placeInDom(clone22, target, modifiers);
      initTree(clone22);
      clone22._x_ignore = true;
    });
    el._x_teleportPutBack = () => {
      let target2 = getTarget(expression);
      mutateDom(() => {
        placeInDom(el._x_teleport, target2, modifiers);
      });
    };
    cleanup2(() => clone22.remove());
  });
  var teleportContainerDuringClone = document.createElement("div");
  function getTarget(expression) {
    let target = skipDuringClone(() => {
      return document.querySelector(expression);
    }, () => {
      return teleportContainerDuringClone;
    })();
    if (!target)
      warn(`Cannot find x-teleport element for selector: "${expression}"`);
    return target;
  }
  var handler = () => {
  };
  handler.inline = (el, { modifiers }, { cleanup: cleanup2 }) => {
    modifiers.includes("self") ? el._x_ignoreSelf = true : el._x_ignore = true;
    cleanup2(() => {
      modifiers.includes("self") ? delete el._x_ignoreSelf : delete el._x_ignore;
    });
  };
  directive("ignore", handler);
  directive("effect", skipDuringClone((el, { expression }, { effect: effect3 }) => {
    effect3(evaluateLater(el, expression));
  }));
  function on(el, event, modifiers, callback) {
    let listenerTarget = el;
    let handler4 = (e) => callback(e);
    let options = {};
    let wrapHandler = (callback2, wrapper) => (e) => wrapper(callback2, e);
    if (modifiers.includes("dot"))
      event = dotSyntax(event);
    if (modifiers.includes("camel"))
      event = camelCase2(event);
    if (modifiers.includes("passive"))
      options.passive = true;
    if (modifiers.includes("capture"))
      options.capture = true;
    if (modifiers.includes("window"))
      listenerTarget = window;
    if (modifiers.includes("document"))
      listenerTarget = document;
    if (modifiers.includes("debounce")) {
      let nextModifier = modifiers[modifiers.indexOf("debounce") + 1] || "invalid-wait";
      let wait = isNumeric(nextModifier.split("ms")[0]) ? Number(nextModifier.split("ms")[0]) : 250;
      handler4 = debounce(handler4, wait);
    }
    if (modifiers.includes("throttle")) {
      let nextModifier = modifiers[modifiers.indexOf("throttle") + 1] || "invalid-wait";
      let wait = isNumeric(nextModifier.split("ms")[0]) ? Number(nextModifier.split("ms")[0]) : 250;
      handler4 = throttle(handler4, wait);
    }
    if (modifiers.includes("prevent"))
      handler4 = wrapHandler(handler4, (next, e) => {
        e.preventDefault();
        next(e);
      });
    if (modifiers.includes("stop"))
      handler4 = wrapHandler(handler4, (next, e) => {
        e.stopPropagation();
        next(e);
      });
    if (modifiers.includes("self"))
      handler4 = wrapHandler(handler4, (next, e) => {
        e.target === el && next(e);
      });
    if (modifiers.includes("away") || modifiers.includes("outside")) {
      listenerTarget = document;
      handler4 = wrapHandler(handler4, (next, e) => {
        if (el.contains(e.target))
          return;
        if (e.target.isConnected === false)
          return;
        if (el.offsetWidth < 1 && el.offsetHeight < 1)
          return;
        if (el._x_isShown === false)
          return;
        next(e);
      });
    }
    if (modifiers.includes("once")) {
      handler4 = wrapHandler(handler4, (next, e) => {
        next(e);
        listenerTarget.removeEventListener(event, handler4, options);
      });
    }
    handler4 = wrapHandler(handler4, (next, e) => {
      if (isKeyEvent(event)) {
        if (isListeningForASpecificKeyThatHasntBeenPressed(e, modifiers)) {
          return;
        }
      }
      next(e);
    });
    listenerTarget.addEventListener(event, handler4, options);
    return () => {
      listenerTarget.removeEventListener(event, handler4, options);
    };
  }
  function dotSyntax(subject) {
    return subject.replace(/-/g, ".");
  }
  function camelCase2(subject) {
    return subject.toLowerCase().replace(/-(\w)/g, (match, char) => char.toUpperCase());
  }
  function isNumeric(subject) {
    return !Array.isArray(subject) && !isNaN(subject);
  }
  function kebabCase2(subject) {
    if ([" ", "_"].includes(
      subject
    ))
      return subject;
    return subject.replace(/([a-z])([A-Z])/g, "$1-$2").replace(/[_\s]/, "-").toLowerCase();
  }
  function isKeyEvent(event) {
    return ["keydown", "keyup"].includes(event);
  }
  function isListeningForASpecificKeyThatHasntBeenPressed(e, modifiers) {
    let keyModifiers = modifiers.filter((i) => {
      return !["window", "document", "prevent", "stop", "once", "capture"].includes(i);
    });
    if (keyModifiers.includes("debounce")) {
      let debounceIndex = keyModifiers.indexOf("debounce");
      keyModifiers.splice(debounceIndex, isNumeric((keyModifiers[debounceIndex + 1] || "invalid-wait").split("ms")[0]) ? 2 : 1);
    }
    if (keyModifiers.includes("throttle")) {
      let debounceIndex = keyModifiers.indexOf("throttle");
      keyModifiers.splice(debounceIndex, isNumeric((keyModifiers[debounceIndex + 1] || "invalid-wait").split("ms")[0]) ? 2 : 1);
    }
    if (keyModifiers.length === 0)
      return false;
    if (keyModifiers.length === 1 && keyToModifiers(e.key).includes(keyModifiers[0]))
      return false;
    const systemKeyModifiers = ["ctrl", "shift", "alt", "meta", "cmd", "super"];
    const selectedSystemKeyModifiers = systemKeyModifiers.filter((modifier) => keyModifiers.includes(modifier));
    keyModifiers = keyModifiers.filter((i) => !selectedSystemKeyModifiers.includes(i));
    if (selectedSystemKeyModifiers.length > 0) {
      const activelyPressedKeyModifiers = selectedSystemKeyModifiers.filter((modifier) => {
        if (modifier === "cmd" || modifier === "super")
          modifier = "meta";
        return e[`${modifier}Key`];
      });
      if (activelyPressedKeyModifiers.length === selectedSystemKeyModifiers.length) {
        if (keyToModifiers(e.key).includes(keyModifiers[0]))
          return false;
      }
    }
    return true;
  }
  function keyToModifiers(key) {
    if (!key)
      return [];
    key = kebabCase2(key);
    let modifierToKeyMap = {
      "ctrl": "control",
      "slash": "/",
      "space": " ",
      "spacebar": " ",
      "cmd": "meta",
      "esc": "escape",
      "up": "arrow-up",
      "down": "arrow-down",
      "left": "arrow-left",
      "right": "arrow-right",
      "period": ".",
      "equal": "=",
      "minus": "-",
      "underscore": "_"
    };
    modifierToKeyMap[key] = key;
    return Object.keys(modifierToKeyMap).map((modifier) => {
      if (modifierToKeyMap[modifier] === key)
        return modifier;
    }).filter((modifier) => modifier);
  }
  directive("model", (el, { modifiers, expression }, { effect: effect3, cleanup: cleanup2 }) => {
    let scopeTarget = el;
    if (modifiers.includes("parent")) {
      scopeTarget = el.parentNode;
    }
    let evaluateGet = evaluateLater(scopeTarget, expression);
    let evaluateSet;
    if (typeof expression === "string") {
      evaluateSet = evaluateLater(scopeTarget, `${expression} = __placeholder`);
    } else if (typeof expression === "function" && typeof expression() === "string") {
      evaluateSet = evaluateLater(scopeTarget, `${expression()} = __placeholder`);
    } else {
      evaluateSet = () => {
      };
    }
    let getValue = () => {
      let result;
      evaluateGet((value) => result = value);
      return isGetterSetter(result) ? result.get() : result;
    };
    let setValue = (value) => {
      let result;
      evaluateGet((value2) => result = value2);
      if (isGetterSetter(result)) {
        result.set(value);
      } else {
        evaluateSet(() => {
        }, {
          scope: { "__placeholder": value }
        });
      }
    };
    if (typeof expression === "string" && el.type === "radio") {
      mutateDom(() => {
        if (!el.hasAttribute("name"))
          el.setAttribute("name", expression);
      });
    }
    var event = el.tagName.toLowerCase() === "select" || ["checkbox", "radio"].includes(el.type) || modifiers.includes("lazy") ? "change" : "input";
    let removeListener = isCloning ? () => {
    } : on(el, event, modifiers, (e) => {
      setValue(getInputValue(el, modifiers, e, getValue()));
    });
    if (modifiers.includes("fill")) {
      if ([void 0, null, ""].includes(getValue()) || el.type === "checkbox" && Array.isArray(getValue())) {
        el.dispatchEvent(new Event(event, {}));
      }
    }
    if (!el._x_removeModelListeners)
      el._x_removeModelListeners = {};
    el._x_removeModelListeners["default"] = removeListener;
    cleanup2(() => el._x_removeModelListeners["default"]());
    if (el.form) {
      let removeResetListener = on(el.form, "reset", [], (e) => {
        nextTick(() => el._x_model && el._x_model.set(el.value));
      });
      cleanup2(() => removeResetListener());
    }
    el._x_model = {
      get() {
        return getValue();
      },
      set(value) {
        setValue(value);
      }
    };
    el._x_forceModelUpdate = (value) => {
      if (value === void 0 && typeof expression === "string" && expression.match(/\./))
        value = "";
      window.fromModel = true;
      mutateDom(() => bind(el, "value", value));
      delete window.fromModel;
    };
    effect3(() => {
      let value = getValue();
      if (modifiers.includes("unintrusive") && document.activeElement.isSameNode(el))
        return;
      el._x_forceModelUpdate(value);
    });
  });
  function getInputValue(el, modifiers, event, currentValue) {
    return mutateDom(() => {
      if (event instanceof CustomEvent && event.detail !== void 0)
        return event.detail !== null && event.detail !== void 0 ? event.detail : event.target.value;
      else if (el.type === "checkbox") {
        if (Array.isArray(currentValue)) {
          let newValue = null;
          if (modifiers.includes("number")) {
            newValue = safeParseNumber(event.target.value);
          } else if (modifiers.includes("boolean")) {
            newValue = safeParseBoolean(event.target.value);
          } else {
            newValue = event.target.value;
          }
          return event.target.checked ? currentValue.concat([newValue]) : currentValue.filter((el2) => !checkedAttrLooseCompare2(el2, newValue));
        } else {
          return event.target.checked;
        }
      } else if (el.tagName.toLowerCase() === "select" && el.multiple) {
        if (modifiers.includes("number")) {
          return Array.from(event.target.selectedOptions).map((option) => {
            let rawValue = option.value || option.text;
            return safeParseNumber(rawValue);
          });
        } else if (modifiers.includes("boolean")) {
          return Array.from(event.target.selectedOptions).map((option) => {
            let rawValue = option.value || option.text;
            return safeParseBoolean(rawValue);
          });
        }
        return Array.from(event.target.selectedOptions).map((option) => {
          return option.value || option.text;
        });
      } else {
        if (modifiers.includes("number")) {
          return safeParseNumber(event.target.value);
        } else if (modifiers.includes("boolean")) {
          return safeParseBoolean(event.target.value);
        }
        return modifiers.includes("trim") ? event.target.value.trim() : event.target.value;
      }
    });
  }
  function safeParseNumber(rawValue) {
    let number = rawValue ? parseFloat(rawValue) : null;
    return isNumeric2(number) ? number : rawValue;
  }
  function checkedAttrLooseCompare2(valueA, valueB) {
    return valueA == valueB;
  }
  function isNumeric2(subject) {
    return !Array.isArray(subject) && !isNaN(subject);
  }
  function isGetterSetter(value) {
    return value !== null && typeof value === "object" && typeof value.get === "function" && typeof value.set === "function";
  }
  directive("cloak", (el) => queueMicrotask(() => mutateDom(() => el.removeAttribute(prefix("cloak")))));
  addInitSelector(() => `[${prefix("init")}]`);
  directive("init", skipDuringClone((el, { expression }, { evaluate: evaluate2 }) => {
    if (typeof expression === "string") {
      return !!expression.trim() && evaluate2(expression, {}, false);
    }
    return evaluate2(expression, {}, false);
  }));
  directive("text", (el, { expression }, { effect: effect3, evaluateLater: evaluateLater2 }) => {
    let evaluate2 = evaluateLater2(expression);
    effect3(() => {
      evaluate2((value) => {
        mutateDom(() => {
          el.textContent = value;
        });
      });
    });
  });
  directive("html", (el, { expression }, { effect: effect3, evaluateLater: evaluateLater2 }) => {
    let evaluate2 = evaluateLater2(expression);
    effect3(() => {
      evaluate2((value) => {
        mutateDom(() => {
          el.innerHTML = value;
          el._x_ignoreSelf = true;
          initTree(el);
          delete el._x_ignoreSelf;
        });
      });
    });
  });
  mapAttributes(startingWith(":", into(prefix("bind:"))));
  var handler2 = (el, { value, modifiers, expression, original }, { effect: effect3 }) => {
    if (!value) {
      let bindingProviders = {};
      injectBindingProviders(bindingProviders);
      let getBindings = evaluateLater(el, expression);
      getBindings((bindings) => {
        applyBindingsObject(el, bindings, original);
      }, { scope: bindingProviders });
      return;
    }
    if (value === "key")
      return storeKeyForXFor(el, expression);
    if (el._x_inlineBindings && el._x_inlineBindings[value] && el._x_inlineBindings[value].extract) {
      return;
    }
    let evaluate2 = evaluateLater(el, expression);
    effect3(() => evaluate2((result) => {
      if (result === void 0 && typeof expression === "string" && expression.match(/\./)) {
        result = "";
      }
      mutateDom(() => bind(el, value, result, modifiers));
    }));
  };
  handler2.inline = (el, { value, modifiers, expression }) => {
    if (!value)
      return;
    if (!el._x_inlineBindings)
      el._x_inlineBindings = {};
    el._x_inlineBindings[value] = { expression, extract: false };
  };
  directive("bind", handler2);
  function storeKeyForXFor(el, expression) {
    el._x_keyExpression = expression;
  }
  addRootSelector(() => `[${prefix("data")}]`);
  directive("data", (el, { expression }, { cleanup: cleanup2 }) => {
    if (shouldSkipRegisteringDataDuringClone(el))
      return;
    expression = expression === "" ? "{}" : expression;
    let magicContext = {};
    injectMagics(magicContext, el);
    let dataProviderContext = {};
    injectDataProviders(dataProviderContext, magicContext);
    let data2 = evaluate(el, expression, { scope: dataProviderContext });
    if (data2 === void 0 || data2 === true)
      data2 = {};
    injectMagics(data2, el);
    let reactiveData = reactive(data2);
    initInterceptors2(reactiveData);
    let undo = addScopeToNode(el, reactiveData);
    reactiveData["init"] && evaluate(el, reactiveData["init"]);
    cleanup2(() => {
      reactiveData["destroy"] && evaluate(el, reactiveData["destroy"]);
      undo();
    });
  });
  interceptClone((from, to) => {
    if (from._x_dataStack) {
      to._x_dataStack = from._x_dataStack;
      to.setAttribute("data-has-alpine-state", true);
    }
  });
  function shouldSkipRegisteringDataDuringClone(el) {
    if (!isCloning)
      return false;
    if (isCloningLegacy)
      return true;
    return el.hasAttribute("data-has-alpine-state");
  }
  directive("show", (el, { modifiers, expression }, { effect: effect3 }) => {
    let evaluate2 = evaluateLater(el, expression);
    if (!el._x_doHide)
      el._x_doHide = () => {
        mutateDom(() => {
          el.style.setProperty("display", "none", modifiers.includes("important") ? "important" : void 0);
        });
      };
    if (!el._x_doShow)
      el._x_doShow = () => {
        mutateDom(() => {
          if (el.style.length === 1 && el.style.display === "none") {
            el.removeAttribute("style");
          } else {
            el.style.removeProperty("display");
          }
        });
      };
    let hide = () => {
      el._x_doHide();
      el._x_isShown = false;
    };
    let show = () => {
      el._x_doShow();
      el._x_isShown = true;
    };
    let clickAwayCompatibleShow = () => setTimeout(show);
    let toggle = once(
      (value) => value ? show() : hide(),
      (value) => {
        if (typeof el._x_toggleAndCascadeWithTransitions === "function") {
          el._x_toggleAndCascadeWithTransitions(el, value, show, hide);
        } else {
          value ? clickAwayCompatibleShow() : hide();
        }
      }
    );
    let oldValue;
    let firstTime = true;
    effect3(() => evaluate2((value) => {
      if (!firstTime && value === oldValue)
        return;
      if (modifiers.includes("immediate"))
        value ? clickAwayCompatibleShow() : hide();
      toggle(value);
      oldValue = value;
      firstTime = false;
    }));
  });
  directive("for", (el, { expression }, { effect: effect3, cleanup: cleanup2 }) => {
    let iteratorNames = parseForExpression(expression);
    let evaluateItems = evaluateLater(el, iteratorNames.items);
    let evaluateKey = evaluateLater(
      el,
      // the x-bind:key expression is stored for our use instead of evaluated.
      el._x_keyExpression || "index"
    );
    el._x_prevKeys = [];
    el._x_lookup = {};
    effect3(() => loop(el, iteratorNames, evaluateItems, evaluateKey));
    cleanup2(() => {
      Object.values(el._x_lookup).forEach((el2) => el2.remove());
      delete el._x_prevKeys;
      delete el._x_lookup;
    });
  });
  function loop(el, iteratorNames, evaluateItems, evaluateKey) {
    let isObject22 = (i) => typeof i === "object" && !Array.isArray(i);
    let templateEl = el;
    evaluateItems((items) => {
      if (isNumeric3(items) && items >= 0) {
        items = Array.from(Array(items).keys(), (i) => i + 1);
      }
      if (items === void 0)
        items = [];
      let lookup = el._x_lookup;
      let prevKeys = el._x_prevKeys;
      let scopes = [];
      let keys = [];
      if (isObject22(items)) {
        items = Object.entries(items).map(([key, value]) => {
          let scope2 = getIterationScopeVariables(iteratorNames, value, key, items);
          evaluateKey((value2) => keys.push(value2), { scope: __spreadValues({ index: key }, scope2) });
          scopes.push(scope2);
        });
      } else {
        for (let i = 0; i < items.length; i++) {
          let scope2 = getIterationScopeVariables(iteratorNames, items[i], i, items);
          evaluateKey((value) => keys.push(value), { scope: __spreadValues({ index: i }, scope2) });
          scopes.push(scope2);
        }
      }
      let adds = [];
      let moves = [];
      let removes = [];
      let sames = [];
      for (let i = 0; i < prevKeys.length; i++) {
        let key = prevKeys[i];
        if (keys.indexOf(key) === -1)
          removes.push(key);
      }
      prevKeys = prevKeys.filter((key) => !removes.includes(key));
      let lastKey = "template";
      for (let i = 0; i < keys.length; i++) {
        let key = keys[i];
        let prevIndex = prevKeys.indexOf(key);
        if (prevIndex === -1) {
          prevKeys.splice(i, 0, key);
          adds.push([lastKey, i]);
        } else if (prevIndex !== i) {
          let keyInSpot = prevKeys.splice(i, 1)[0];
          let keyForSpot = prevKeys.splice(prevIndex - 1, 1)[0];
          prevKeys.splice(i, 0, keyForSpot);
          prevKeys.splice(prevIndex, 0, keyInSpot);
          moves.push([keyInSpot, keyForSpot]);
        } else {
          sames.push(key);
        }
        lastKey = key;
      }
      for (let i = 0; i < removes.length; i++) {
        let key = removes[i];
        if (!!lookup[key]._x_effects) {
          lookup[key]._x_effects.forEach(dequeueJob);
        }
        lookup[key].remove();
        lookup[key] = null;
        delete lookup[key];
      }
      for (let i = 0; i < moves.length; i++) {
        let [keyInSpot, keyForSpot] = moves[i];
        let elInSpot = lookup[keyInSpot];
        let elForSpot = lookup[keyForSpot];
        let marker = document.createElement("div");
        mutateDom(() => {
          if (!elForSpot)
            warn(`x-for ":key" is undefined or invalid`, templateEl);
          elForSpot.after(marker);
          elInSpot.after(elForSpot);
          elForSpot._x_currentIfEl && elForSpot.after(elForSpot._x_currentIfEl);
          marker.before(elInSpot);
          elInSpot._x_currentIfEl && elInSpot.after(elInSpot._x_currentIfEl);
          marker.remove();
        });
        elForSpot._x_refreshXForScope(scopes[keys.indexOf(keyForSpot)]);
      }
      for (let i = 0; i < adds.length; i++) {
        let [lastKey2, index] = adds[i];
        let lastEl = lastKey2 === "template" ? templateEl : lookup[lastKey2];
        if (lastEl._x_currentIfEl)
          lastEl = lastEl._x_currentIfEl;
        let scope2 = scopes[index];
        let key = keys[index];
        let clone22 = document.importNode(templateEl.content, true).firstElementChild;
        let reactiveScope = reactive(scope2);
        addScopeToNode(clone22, reactiveScope, templateEl);
        clone22._x_refreshXForScope = (newScope) => {
          Object.entries(newScope).forEach(([key2, value]) => {
            reactiveScope[key2] = value;
          });
        };
        mutateDom(() => {
          lastEl.after(clone22);
          initTree(clone22);
        });
        if (typeof key === "object") {
          warn("x-for key cannot be an object, it must be a string or an integer", templateEl);
        }
        lookup[key] = clone22;
      }
      for (let i = 0; i < sames.length; i++) {
        lookup[sames[i]]._x_refreshXForScope(scopes[keys.indexOf(sames[i])]);
      }
      templateEl._x_prevKeys = keys;
    });
  }
  function parseForExpression(expression) {
    let forIteratorRE = /,([^,\}\]]*)(?:,([^,\}\]]*))?$/;
    let stripParensRE = /^\s*\(|\)\s*$/g;
    let forAliasRE = /([\s\S]*?)\s+(?:in|of)\s+([\s\S]*)/;
    let inMatch = expression.match(forAliasRE);
    if (!inMatch)
      return;
    let res = {};
    res.items = inMatch[2].trim();
    let item = inMatch[1].replace(stripParensRE, "").trim();
    let iteratorMatch = item.match(forIteratorRE);
    if (iteratorMatch) {
      res.item = item.replace(forIteratorRE, "").trim();
      res.index = iteratorMatch[1].trim();
      if (iteratorMatch[2]) {
        res.collection = iteratorMatch[2].trim();
      }
    } else {
      res.item = item;
    }
    return res;
  }
  function getIterationScopeVariables(iteratorNames, item, index, items) {
    let scopeVariables = {};
    if (/^\[.*\]$/.test(iteratorNames.item) && Array.isArray(item)) {
      let names = iteratorNames.item.replace("[", "").replace("]", "").split(",").map((i) => i.trim());
      names.forEach((name, i) => {
        scopeVariables[name] = item[i];
      });
    } else if (/^\{.*\}$/.test(iteratorNames.item) && !Array.isArray(item) && typeof item === "object") {
      let names = iteratorNames.item.replace("{", "").replace("}", "").split(",").map((i) => i.trim());
      names.forEach((name) => {
        scopeVariables[name] = item[name];
      });
    } else {
      scopeVariables[iteratorNames.item] = item;
    }
    if (iteratorNames.index)
      scopeVariables[iteratorNames.index] = index;
    if (iteratorNames.collection)
      scopeVariables[iteratorNames.collection] = items;
    return scopeVariables;
  }
  function isNumeric3(subject) {
    return !Array.isArray(subject) && !isNaN(subject);
  }
  function handler3() {
  }
  handler3.inline = (el, { expression }, { cleanup: cleanup2 }) => {
    let root = closestRoot(el);
    if (!root._x_refs)
      root._x_refs = {};
    root._x_refs[expression] = el;
    cleanup2(() => delete root._x_refs[expression]);
  };
  directive("ref", handler3);
  directive("if", (el, { expression }, { effect: effect3, cleanup: cleanup2 }) => {
    if (el.tagName.toLowerCase() !== "template")
      warn("x-if can only be used on a <template> tag", el);
    let evaluate2 = evaluateLater(el, expression);
    let show = () => {
      if (el._x_currentIfEl)
        return el._x_currentIfEl;
      let clone22 = el.content.cloneNode(true).firstElementChild;
      addScopeToNode(clone22, {}, el);
      mutateDom(() => {
        el.after(clone22);
        initTree(clone22);
      });
      el._x_currentIfEl = clone22;
      el._x_undoIf = () => {
        walk(clone22, (node) => {
          if (!!node._x_effects) {
            node._x_effects.forEach(dequeueJob);
          }
        });
        clone22.remove();
        delete el._x_currentIfEl;
      };
      return clone22;
    };
    let hide = () => {
      if (!el._x_undoIf)
        return;
      el._x_undoIf();
      delete el._x_undoIf;
    };
    effect3(() => evaluate2((value) => {
      value ? show() : hide();
    }));
    cleanup2(() => el._x_undoIf && el._x_undoIf());
  });
  directive("id", (el, { expression }, { evaluate: evaluate2 }) => {
    let names = evaluate2(expression);
    names.forEach((name) => setIdRoot(el, name));
  });
  interceptClone((from, to) => {
    if (from._x_ids) {
      to._x_ids = from._x_ids;
    }
  });
  mapAttributes(startingWith("@", into(prefix("on:"))));
  directive("on", skipDuringClone((el, { value, modifiers, expression }, { cleanup: cleanup2 }) => {
    let evaluate2 = expression ? evaluateLater(el, expression) : () => {
    };
    if (el.tagName.toLowerCase() === "template") {
      if (!el._x_forwardEvents)
        el._x_forwardEvents = [];
      if (!el._x_forwardEvents.includes(value))
        el._x_forwardEvents.push(value);
    }
    let removeListener = on(el, value, modifiers, (e) => {
      evaluate2(() => {
      }, { scope: { "$event": e }, params: [e] });
    });
    cleanup2(() => removeListener());
  }));
  warnMissingPluginDirective("Collapse", "collapse", "collapse");
  warnMissingPluginDirective("Intersect", "intersect", "intersect");
  warnMissingPluginDirective("Focus", "trap", "focus");
  warnMissingPluginDirective("Mask", "mask", "mask");
  function warnMissingPluginDirective(name, directiveName, slug) {
    directive(directiveName, (el) => warn(`You can't use [x-${directiveName}] without first installing the "${name}" plugin here: https://alpinejs.dev/plugins/${slug}`, el));
  }
  alpine_default.setEvaluator(normalEvaluator);
  alpine_default.setReactivityEngine({ reactive: reactive2, effect: effect2, release: stop, raw: toRaw });
  var src_default = alpine_default;
  var module_default = src_default;

  // node_modules/@alpinejs/collapse/dist/module.esm.js
  function src_default2(Alpine2) {
    Alpine2.directive("collapse", collapse);
    collapse.inline = (el, { modifiers }) => {
      if (!modifiers.includes("min"))
        return;
      el._x_doShow = () => {
      };
      el._x_doHide = () => {
      };
    };
    function collapse(el, { modifiers }) {
      let duration = modifierValue2(modifiers, "duration", 250) / 1e3;
      let floor = modifierValue2(modifiers, "min", 0);
      let fullyHide = !modifiers.includes("min");
      if (!el._x_isShown)
        el.style.height = `${floor}px`;
      if (!el._x_isShown && fullyHide)
        el.hidden = true;
      if (!el._x_isShown)
        el.style.overflow = "hidden";
      let setFunction = (el2, styles) => {
        let revertFunction = Alpine2.setStyles(el2, styles);
        return styles.height ? () => {
        } : revertFunction;
      };
      let transitionStyles = {
        transitionProperty: "height",
        transitionDuration: `${duration}s`,
        transitionTimingFunction: "cubic-bezier(0.4, 0.0, 0.2, 1)"
      };
      el._x_transition = {
        in(before = () => {
        }, after = () => {
        }) {
          if (fullyHide)
            el.hidden = false;
          if (fullyHide)
            el.style.display = null;
          let current2 = el.getBoundingClientRect().height;
          el.style.height = "auto";
          let full = el.getBoundingClientRect().height;
          if (current2 === full) {
            current2 = floor;
          }
          Alpine2.transition(el, Alpine2.setStyles, {
            during: transitionStyles,
            start: { height: current2 + "px" },
            end: { height: full + "px" }
          }, () => el._x_isShown = true, () => {
            if (el.getBoundingClientRect().height == full) {
              el.style.overflow = null;
            }
          });
        },
        out(before = () => {
        }, after = () => {
        }) {
          let full = el.getBoundingClientRect().height;
          Alpine2.transition(el, setFunction, {
            during: transitionStyles,
            start: { height: full + "px" },
            end: { height: floor + "px" }
          }, () => el.style.overflow = "hidden", () => {
            el._x_isShown = false;
            if (el.style.height == `${floor}px` && fullyHide) {
              el.style.display = "none";
              el.hidden = true;
            }
          });
        }
      };
    }
  }
  function modifierValue2(modifiers, key, fallback) {
    if (modifiers.indexOf(key) === -1)
      return fallback;
    const rawValue = modifiers[modifiers.indexOf(key) + 1];
    if (!rawValue)
      return fallback;
    if (key === "duration") {
      let match = rawValue.match(/([0-9]+)ms/);
      if (match)
        return match[1];
    }
    if (key === "min") {
      let match = rawValue.match(/([0-9]+)px/);
      if (match)
        return match[1];
    }
    return rawValue;
  }
  var module_default2 = src_default2;

  // js/enchant.min.js
  (function(t, e) {
    "function" != typeof Object.defineProperty && (Object.defineProperty = function(t2, e2, n2) {
      return "value" in n2 && (t2[e2] = n2.value), "get" in n2 && t2.__defineGetter__(e2, n2.get), "set" in n2 && t2.__defineSetter__(e2, n2.set), t2;
    }), "function" != typeof Object.defineProperties && (Object.defineProperties = function(t2, e2) {
      for (var n2 in e2)
        e2.hasOwnProperty(n2) && Object.defineProperty(t2, n2, e2[n2]);
      return t2;
    }), "function" != typeof Object.create && (Object.create = function(t2, e2) {
      function n2() {
      }
      n2.prototype = t2;
      var i2 = new n2();
      return null != e2 && Object.defineProperties(i2, e2), i2;
    }), "function" != typeof Object.getPrototypeOf && (Object.getPrototypeOf = function(t2) {
      return t2.__proto__;
    }), "function" != typeof Function.prototype.bind && (Function.prototype.bind = function(e2) {
      var n2 = this, i2 = Array.prototype.slice.call(arguments, 1), s2 = function() {
      }, r2 = function() {
        var r3 = i2.concat(Array.prototype.slice.call(arguments));
        return n2.apply(this instanceof s2 ? this : e2 || t, r3);
      };
      return s2.prototype = n2.prototype, r2.prototype = new s2(), r2;
    }), t.getTime = function() {
      var e2;
      return t.performance && t.performance.now ? (e2 = Date.now(), function() {
        return e2 + t.performance.now();
      }) : t.performance && t.performance.webkitNow ? (e2 = Date.now(), function() {
        return e2 + t.performance.webkitNow();
      }) : Date.now;
    }(), t.requestAnimationFrame = t.requestAnimationFrame || t.mozRequestAnimationFrame || t.webkitRequestAnimationFrame || t.msRequestAnimationFrame || function() {
      var e2 = t.getTime(), n2 = 1e3 / 60;
      return function(i2) {
        var s2 = setTimeout(function() {
          e2 = t.getTime(), i2(e2);
        }, Math.max(0, e2 + n2 - t.getTime()));
        return s2;
      };
    }();
    var n = function(e2) {
      if (null != e2 && (e2 instanceof Array || (e2 = Array.prototype.slice.call(arguments)), e2 = e2.filter(function(t2) {
        return [t2].join();
      })), function i2(n2, s2) {
        var r2, a2, o2 = [];
        for (var h2 in n2)
          n2.hasOwnProperty(h2) && ("function" == typeof n2[h2] ? t[h2] = n2[h2] : "object" == typeof n2[h2] && null !== n2[h2] && Object.getPrototypeOf(n2[h2]) === Object.prototype && (null == e2 ? o2.push(h2) : (r2 = e2.indexOf(s2 + h2), -1 !== r2 && (o2.push(h2), e2.splice(r2, 1)))));
        for (r2 = 0, a2 = o2.length; a2 > r2; r2++)
          i2(n2[o2[r2]], s2 + o2[r2] + ".");
      }(n, ""), n.Class.getInheritanceTree(t.Game).length <= n.Class.getInheritanceTree(t.Core).length && (t.Game = t.Core), null != e2 && e2.length)
        throw Error("Cannot load module: " + e2.join(", "));
    };
    t.enchant = n, t.addEventListener("message", function(t2) {
      try {
        var e2 = JSON.parse(t2.data);
        if ("event" === e2.type)
          n.Core.instance.dispatchEvent(new n.Event(e2.value));
        else if ("debug" === e2.type)
          switch (e2.value) {
            case "start":
              n.Core.instance.start();
              break;
            case "pause":
              n.Core.instance.pause();
              break;
            case "resume":
              n.Core.instance.resume();
              break;
            case "tick":
              n.Core.instance._tick();
              break;
            default:
          }
      } catch (i2) {
      }
    }, false), n.Class = function(t2, e2) {
      return n.Class.create(t2, e2);
    }, n.Class.create = function(t2, i2) {
      if (null == t2 && i2)
        throw Error("superclass is undefined (enchant.Class.create)");
      if (null == t2)
        throw Error("definition is undefined (enchant.Class.create)");
      if (0 === arguments.length)
        return n.Class.create(Object, i2);
      if (1 === arguments.length && "function" != typeof arguments[0])
        return n.Class.create(Object, arguments[0]);
      for (var s2 in i2)
        i2.hasOwnProperty(s2) && ("object" == typeof i2[s2] && null !== i2[s2] && Object.getPrototypeOf(i2[s2]) === Object.prototype ? "enumerable" in i2[s2] || (i2[s2].enumerable = true) : i2[s2] = { value: i2[s2], enumerable: true, writable: true });
      var r2 = function() {
        return this instanceof r2 ? (r2.prototype.initialize.apply(this, arguments), e) : new r2();
      };
      r2.prototype = Object.create(t2.prototype, i2), r2.prototype.constructor = r2, null == r2.prototype.initialize && (r2.prototype.initialize = function() {
        t2.apply(this, arguments);
      });
      for (var a2 = this.getInheritanceTree(t2), o2 = 0, h2 = a2.length; h2 > o2; o2++)
        if ("function" == typeof a2[o2]._inherited) {
          a2[o2]._inherited(r2);
          break;
        }
      return r2;
    }, n.Class.getInheritanceTree = function(t2) {
      for (var e2 = [], n2 = t2, i2 = n2.prototype; n2 !== Object; )
        e2.push(n2), i2 = Object.getPrototypeOf(i2), n2 = i2.constructor;
      return e2;
    }, n.ENV = { VERSION: "0.8.3", BROWSER: function(t2) {
      return /Eagle/.test(t2) ? "eagle" : /Opera/.test(t2) ? "opera" : /MSIE|Trident/.test(t2) ? "ie" : /Chrome/.test(t2) ? "chrome" : /(?:Macintosh|Windows).*AppleWebKit/.test(t2) ? "safari" : /(?:iPhone|iPad|iPod).*AppleWebKit/.test(t2) ? "mobilesafari" : /Firefox/.test(t2) ? "firefox" : /Android/.test(t2) ? "android" : "";
    }(navigator.userAgent), VENDOR_PREFIX: function() {
      var t2 = navigator.userAgent;
      return -1 !== t2.indexOf("Opera") ? "O" : /MSIE|Trident/.test(t2) ? "ms" : -1 !== t2.indexOf("WebKit") ? "webkit" : "Gecko" === navigator.product ? "Moz" : "";
    }(), TOUCH_ENABLED: function() {
      var t2 = document.createElement("div");
      return t2.setAttribute("ontouchstart", "return"), "function" == typeof t2.ontouchstart;
    }(), RETINA_DISPLAY: function() {
      if (-1 !== navigator.userAgent.indexOf("iPhone") && 2 === t.devicePixelRatio) {
        var e2 = document.querySelector('meta[name="viewport"]');
        return null == e2 && (e2 = document.createElement("meta"), document.head.appendChild(e2)), e2.setAttribute("content", "width=640"), true;
      }
      return false;
    }(), USE_FLASH_SOUND: function() {
      var t2 = navigator.userAgent, e2 = navigator.vendor || "";
      return 0 === location.href.indexOf("http") && -1 === t2.indexOf("Mobile") && -1 !== e2.indexOf("Apple");
    }(), USE_DEFAULT_EVENT_TAGS: ["input", "textarea", "select", "area"], CANVAS_DRAWING_METHODS: ["putImageData", "drawImage", "drawFocusRing", "fill", "stroke", "clearRect", "fillRect", "strokeRect", "fillText", "strokeText"], KEY_BIND_TABLE: { 37: "left", 38: "up", 39: "right", 40: "down" }, PREVENT_DEFAULT_KEY_CODES: [37, 38, 39, 40], SOUND_ENABLED_ON_MOBILE_SAFARI: true, USE_TOUCH_TO_START_SCENE: true, USE_WEBAUDIO: function() {
      return "file:" !== location.protocol;
    }(), USE_ANIMATION: true, COLOR_DETECTION_LEVEL: 2 }, n.Event = n.Class.create({ initialize: function(t2) {
      this.type = t2, this.target = null, this.x = 0, this.y = 0, this.localX = 0, this.localY = 0;
    }, _initPosition: function(t2, e2) {
      var i2 = n.Core.instance;
      this.x = this.localX = (t2 - i2._pageX) / i2.scale, this.y = this.localY = (e2 - i2._pageY) / i2.scale;
    } }), n.Event.LOAD = "load", n.Event.ERROR = "error", n.Event.CORE_RESIZE = "coreresize", n.Event.PROGRESS = "progress", n.Event.ENTER_FRAME = "enterframe", n.Event.EXIT_FRAME = "exitframe", n.Event.ENTER = "enter", n.Event.EXIT = "exit", n.Event.CHILD_ADDED = "childadded", n.Event.ADDED = "added", n.Event.ADDED_TO_SCENE = "addedtoscene", n.Event.CHILD_REMOVED = "childremoved", n.Event.REMOVED = "removed", n.Event.REMOVED_FROM_SCENE = "removedfromscene", n.Event.TOUCH_START = "touchstart", n.Event.TOUCH_MOVE = "touchmove", n.Event.TOUCH_END = "touchend", n.Event.RENDER = "render", n.Event.INPUT_START = "inputstart", n.Event.INPUT_CHANGE = "inputchange", n.Event.INPUT_END = "inputend", n.Event.INPUT_STATE_CHANGED = "inputstatechanged", n.Event.LEFT_BUTTON_DOWN = "leftbuttondown", n.Event.LEFT_BUTTON_UP = "leftbuttonup", n.Event.RIGHT_BUTTON_DOWN = "rightbuttondown", n.Event.RIGHT_BUTTON_UP = "rightbuttonup", n.Event.UP_BUTTON_DOWN = "upbuttondown", n.Event.UP_BUTTON_UP = "upbuttonup", n.Event.DOWN_BUTTON_DOWN = "downbuttondown", n.Event.DOWN_BUTTON_UP = "downbuttonup", n.Event.A_BUTTON_DOWN = "abuttondown", n.Event.A_BUTTON_UP = "abuttonup", n.Event.B_BUTTON_DOWN = "bbuttondown", n.Event.B_BUTTON_UP = "bbuttonup", n.Event.ADDED_TO_TIMELINE = "addedtotimeline", n.Event.REMOVED_FROM_TIMELINE = "removedfromtimeline", n.Event.ACTION_START = "actionstart", n.Event.ACTION_END = "actionend", n.Event.ACTION_TICK = "actiontick", n.Event.ACTION_ADDED = "actionadded", n.Event.ACTION_REMOVED = "actionremoved", n.Event.ANIMATION_END = "animationend", n.EventTarget = n.Class.create({ initialize: function() {
      this._listeners = {};
    }, addEventListener: function(t2, e2) {
      var n2 = this._listeners[t2];
      null == n2 ? this._listeners[t2] = [e2] : -1 === n2.indexOf(e2) && n2.unshift(e2);
    }, on: function() {
      this.addEventListener.apply(this, arguments);
    }, removeEventListener: function(t2, e2) {
      var n2 = this._listeners[t2];
      if (null != n2) {
        var i2 = n2.indexOf(e2);
        -1 !== i2 && n2.splice(i2, 1);
      }
    }, clearEventListener: function(t2) {
      null != t2 ? delete this._listeners[t2] : this._listeners = {};
    }, dispatchEvent: function(t2) {
      t2.target = this, t2.localX = t2.x - this._offsetX, t2.localY = t2.y - this._offsetY, null != this["on" + t2.type] && this["on" + t2.type](t2);
      var e2 = this._listeners[t2.type];
      if (null != e2) {
        e2 = e2.slice();
        for (var n2 = 0, i2 = e2.length; i2 > n2; n2++)
          e2[n2].call(this, t2);
      }
    } }), function() {
      var e2;
      n.Core = n.Class.create(n.EventTarget, { initialize: function(i2, s2) {
        if (null === t.document.body)
          throw Error("document.body is null. Please excute 'new Core()' in window.onload.");
        n.EventTarget.call(this);
        var r2 = true;
        e2 && (r2 = false, e2.stop()), e2 = n.Core.instance = this, this._calledTime = 0, this._mousedownID = 0, this._surfaceID = 0, this._soundID = 0, this._scenes = [], i2 = i2 || 320, s2 = s2 || 320;
        var a2, o2, h2, c2 = document.getElementById("enchant-stage");
        if (c2) {
          var u2 = t.getComputedStyle(c2);
          for (o2 = parseInt(u2.width, 10), h2 = parseInt(u2.height, 10), a2 = o2 && h2 ? Math.min(o2 / i2, h2 / s2) : 1; c2.firstChild; )
            c2.removeChild(c2.firstChild);
          c2.style.position = "relative";
          var d = c2.getBoundingClientRect();
          this._pageX = Math.round(t.scrollX || t.pageXOffset + d.left), this._pageY = Math.round(t.scrollY || t.pageYOffset + d.top);
        } else
          c2 = document.createElement("div"), c2.id = "enchant-stage", c2.style.position = "absolute", document.body.firstChild ? document.body.insertBefore(c2, document.body.firstChild) : document.body.appendChild(c2), a2 = Math.min(t.innerWidth / i2, t.innerHeight / s2), this._pageX = c2.getBoundingClientRect().left, this._pageY = c2.getBoundingClientRect().top;
        c2.style.fontSize = "12px", c2.style.webkitTextSizeAdjust = "none", c2.style.webkitTapHighlightColor = "rgba(0, 0, 0, 0)", this._element = c2, this.addEventListener("coreresize", this._oncoreresize), this._width = i2, this._height = s2, this.scale = a2, this.fps = 30, this.frame = 0, this.ready = false, this.running = false, this.assets = {}, this._assets = [], function l(t2) {
          t2.assets && n.Core.instance.preload(t2.assets);
          for (var e3 in t2)
            t2.hasOwnProperty(e3) && "object" == typeof t2[e3] && null !== t2[e3] && Object.getPrototypeOf(t2[e3]) === Object.prototype && l(t2[e3]);
        }(n), this.currentScene = null, this.rootScene = new n.Scene(), this.pushScene(this.rootScene), this.loadingScene = new n.LoadingScene(), this._activated = false, this._offsetX = 0, this._offsetY = 0, this.input = {}, this.keyboardInputManager = new n.KeyboardInputManager(t.document, this.input), this.keyboardInputManager.addBroadcastTarget(this), this._keybind = this.keyboardInputManager._binds, n.ENV.KEY_BIND_TABLE || (n.ENV.KEY_BIND_TABLE = {});
        for (var f in n.ENV.KEY_BIND_TABLE)
          this.keybind(f, n.ENV.KEY_BIND_TABLE[f]);
        r2 && (c2 = n.Core.instance._element, document.addEventListener("keydown", function(t2) {
          e2.dispatchEvent(new n.Event("keydown")), -1 !== n.ENV.PREVENT_DEFAULT_KEY_CODES.indexOf(t2.keyCode) && (t2.preventDefault(), t2.stopPropagation());
        }, true), n.ENV.TOUCH_ENABLED && (c2.addEventListener("touchstart", function(t2) {
          var i3 = t2.target.tagName.toLowerCase();
          -1 === n.ENV.USE_DEFAULT_EVENT_TAGS.indexOf(i3) && (t2.preventDefault(), e2.running || t2.stopPropagation());
        }, true), c2.addEventListener("touchmove", function(t2) {
          var i3 = t2.target.tagName.toLowerCase();
          -1 === n.ENV.USE_DEFAULT_EVENT_TAGS.indexOf(i3) && (t2.preventDefault(), e2.running || t2.stopPropagation());
        }, true), c2.addEventListener("touchend", function(t2) {
          var i3 = t2.target.tagName.toLowerCase();
          -1 === n.ENV.USE_DEFAULT_EVENT_TAGS.indexOf(i3) && (t2.preventDefault(), e2.running || t2.stopPropagation());
        }, true)), c2.addEventListener("mousedown", function(t2) {
          var i3 = t2.target.tagName.toLowerCase();
          -1 === n.ENV.USE_DEFAULT_EVENT_TAGS.indexOf(i3) && (t2.preventDefault(), e2._mousedownID++, e2.running || t2.stopPropagation());
        }, true), c2.addEventListener("mousemove", function(t2) {
          var i3 = t2.target.tagName.toLowerCase();
          -1 === n.ENV.USE_DEFAULT_EVENT_TAGS.indexOf(i3) && (t2.preventDefault(), e2.running || t2.stopPropagation());
        }, true), c2.addEventListener("mouseup", function(t2) {
          var i3 = t2.target.tagName.toLowerCase();
          -1 === n.ENV.USE_DEFAULT_EVENT_TAGS.indexOf(i3) && (t2.preventDefault(), e2.running || t2.stopPropagation());
        }, true), e2._touchEventTarget = {}, n.ENV.TOUCH_ENABLED && (c2.addEventListener("touchstart", function(t2) {
          for (var e3, i3, s3 = n.Core.instance, r3 = new n.Event(n.Event.TOUCH_START), a3 = t2.changedTouches, o3 = 0, h3 = a3.length; h3 > o3; o3++)
            e3 = a3[o3], r3._initPosition(e3.pageX, e3.pageY), i3 = s3.currentScene._determineEventTarget(r3), s3._touchEventTarget[e3.identifier] = i3, i3.dispatchEvent(r3);
        }, false), c2.addEventListener("touchmove", function(t2) {
          for (var e3, i3, s3 = n.Core.instance, r3 = new n.Event(n.Event.TOUCH_MOVE), a3 = t2.changedTouches, o3 = 0, h3 = a3.length; h3 > o3; o3++)
            e3 = a3[o3], i3 = s3._touchEventTarget[e3.identifier], i3 && (r3._initPosition(e3.pageX, e3.pageY), i3.dispatchEvent(r3));
        }, false), c2.addEventListener("touchend", function(t2) {
          for (var e3, i3, s3 = n.Core.instance, r3 = new n.Event(n.Event.TOUCH_END), a3 = t2.changedTouches, o3 = 0, h3 = a3.length; h3 > o3; o3++)
            e3 = a3[o3], i3 = s3._touchEventTarget[e3.identifier], i3 && (r3._initPosition(e3.pageX, e3.pageY), i3.dispatchEvent(r3), delete s3._touchEventTarget[e3.identifier]);
        }, false)), c2.addEventListener("mousedown", function(t2) {
          var e3 = n.Core.instance, i3 = new n.Event(n.Event.TOUCH_START);
          i3._initPosition(t2.pageX, t2.pageY);
          var s3 = e3.currentScene._determineEventTarget(i3);
          e3._touchEventTarget[e3._mousedownID] = s3, s3.dispatchEvent(i3);
        }, false), c2.addEventListener("mousemove", function(t2) {
          var e3 = n.Core.instance, i3 = new n.Event(n.Event.TOUCH_MOVE);
          i3._initPosition(t2.pageX, t2.pageY);
          var s3 = e3._touchEventTarget[e3._mousedownID];
          s3 && s3.dispatchEvent(i3);
        }, false), c2.addEventListener("mouseup", function(t2) {
          var e3 = n.Core.instance, i3 = new n.Event(n.Event.TOUCH_END);
          i3._initPosition(t2.pageX, t2.pageY);
          var s3 = e3._touchEventTarget[e3._mousedownID];
          s3 && s3.dispatchEvent(i3), delete e3._touchEventTarget[e3._mousedownID];
        }, false));
      }, width: { get: function() {
        return this._width;
      }, set: function(t2) {
        this._width = t2, this._dispatchCoreResizeEvent();
      } }, height: { get: function() {
        return this._height;
      }, set: function(t2) {
        this._height = t2, this._dispatchCoreResizeEvent();
      } }, scale: { get: function() {
        return this._scale;
      }, set: function(t2) {
        this._scale = t2, this._dispatchCoreResizeEvent();
      } }, _dispatchCoreResizeEvent: function() {
        var t2 = new n.Event("coreresize");
        t2.width = this._width, t2.height = this._height, t2.scale = this._scale, this.dispatchEvent(t2);
      }, _oncoreresize: function(t2) {
        this._element.style.width = Math.floor(this._width * this._scale) + "px", this._element.style.height = Math.floor(this._height * this._scale) + "px";
        for (var e3, n2 = 0, i2 = this._scenes.length; i2 > n2; n2++)
          e3 = this._scenes[n2], e3.dispatchEvent(t2);
      }, preload: function(t2) {
        var e3;
        if (!(t2 instanceof Array))
          if ("object" == typeof t2) {
            e3 = [];
            for (var n2 in t2)
              t2.hasOwnProperty(n2) && e3.push([t2[n2], n2]);
            t2 = e3;
          } else
            t2 = Array.prototype.slice.call(arguments);
        return Array.prototype.push.apply(this._assets, t2), this;
      }, load: function(t2, i2, s2, r2) {
        var a2;
        if ("string" == typeof arguments[1])
          a2 = i2, s2 = s2 || function() {
          }, r2 = r2 || function() {
          };
        else {
          a2 = t2;
          var o2 = s2;
          s2 = arguments[1] || function() {
          }, r2 = o2 || function() {
          };
        }
        var h2 = n.Core.findExt(t2);
        return n.Deferred.next(function() {
          var i3 = new n.Deferred(), o3 = function(t3) {
            i3.call(t3), s2.call(this, t3);
          }, c2 = function(t3) {
            i3.fail(t3), r2.call(this, t3);
          };
          if (n.Core._loadFuncs[h2])
            n.Core.instance.assets[a2] = n.Core._loadFuncs[h2](t2, h2, o3, c2);
          else {
            var u2 = new XMLHttpRequest();
            u2.open("GET", t2, true), u2.onreadystatechange = function() {
              if (4 === u2.readyState) {
                if (200 !== u2.status && 0 !== u2.status) {
                  var i4 = new n.Event("error");
                  i4.message = u2.status + ": Cannot load an asset: " + t2, c2.call(n.Core.instance, i4);
                }
                var s3 = u2.getResponseHeader("Content-Type") || "";
                s3.match(/^image/) ? e2.assets[a2] = n.Surface.load(t2, o3, c2) : s3.match(/^audio/) ? e2.assets[a2] = n.Sound.load(t2, s3, o3, c2) : (e2.assets[a2] = u2.responseText, o3.call(n.Core.instance, new n.Event("load")));
              }
            }, u2.send(null);
          }
          return i3;
        });
      }, start: function(i2) {
        var s2 = function() {
          this.frame = 0, this.removeEventListener("load", s2);
        };
        if (this.addEventListener("load", s2), this.currentTime = t.getTime(), this.running = true, this.ready = true, !this._activated && (this._activated = true, "mobilesafari" === n.ENV.BROWSER && n.ENV.USE_WEBAUDIO && n.ENV.USE_TOUCH_TO_START_SCENE)) {
          var r2 = new n.Deferred(), a2 = this._createTouchToStartScene();
          return a2.addEventListener(n.Event.TOUCH_START, function o2() {
            this.removeEventListener(n.Event.TOUCH_START, o2);
            var t2 = new n.WebAudioSound();
            t2.buffer = n.WebAudioSound.audioContext.createBuffer(1, 1, 48e3), t2.play(), e2.removeScene(a2), e2.start(r2);
          }, false), e2.pushScene(a2), r2;
        }
        this._requestNextFrame(0);
        var h2 = this._requestPreload().next(function() {
          n.Core.instance.loadingScene.dispatchEvent(new n.Event(n.Event.LOAD));
        });
        return i2 && h2.next(function(t2) {
          i2.call(t2);
        }).error(function(t2) {
          i2.fail(t2);
        }), h2;
      }, _requestPreload: function() {
        var t2 = {}, i2 = 0, s2 = 0, r2 = function() {
          var t3 = new n.Event("progress");
          t3.loaded = ++i2, t3.total = s2, e2.loadingScene.dispatchEvent(t3);
        };
        return this._assets.reverse().forEach(function(e3) {
          var n2, i3;
          e3 instanceof Array ? (n2 = e3[0], i3 = e3[1]) : n2 = i3 = e3, t2[i3] || (t2[i3] = this.load(n2, i3, r2), s2++);
        }, this), this.pushScene(this.loadingScene), n.Deferred.parallel(t2);
      }, _createTouchToStartScene: function() {
        var t2 = new n.Label("Touch to Start"), i2 = Math.round(e2.width / 10), s2 = new n.Scene();
        return t2.color = "#fff", t2.font = i2 - 1 + "px bold Helvetica,Arial,sans-serif", t2.textAlign = "center", t2.width = e2.width, t2.height = t2._boundHeight, t2.y = (e2.height - t2.height) / 2, s2.backgroundColor = "#000", s2.addChild(t2), s2;
      }, debug: function() {
        return this._debug = true, this.start();
      }, actualFps: { get: function() {
        return this._actualFps || this.fps;
      } }, _requestNextFrame: function(e3) {
        this.ready && (this.fps >= 60 || 16 >= e3 ? (this._calledTime = t.getTime(), t.requestAnimationFrame(this._callTick)) : setTimeout(function() {
          var e4 = n.Core.instance;
          e4._calledTime = t.getTime(), t.requestAnimationFrame(e4._callTick);
        }, Math.max(0, e3)));
      }, _callTick: function(t2) {
        n.Core.instance._tick(t2);
      }, _tick: function() {
        var e3 = new n.Event("enterframe"), i2 = t.getTime(), s2 = e3.elapsed = i2 - this.currentTime;
        this.currentTime = i2, this._actualFps = s2 > 0 ? 1e3 / s2 : 0;
        for (var r2 = this.currentScene.childNodes.slice(), a2 = Array.prototype.push; r2.length; ) {
          var o2 = r2.pop();
          o2.age++, o2.dispatchEvent(e3), o2.childNodes && a2.apply(r2, o2.childNodes);
        }
        this.currentScene.age++, this.currentScene.dispatchEvent(e3), this.dispatchEvent(e3), this.dispatchEvent(new n.Event("exitframe")), this.frame++, i2 = t.getTime(), this._requestNextFrame(1e3 / this.fps - (i2 - this._calledTime));
      }, getTime: function() {
        return t.getTime();
      }, stop: function() {
        this.ready = false, this.running = false;
      }, pause: function() {
        this.ready = false;
      }, resume: function() {
        this.ready || (this.currentTime = t.getTime(), this.ready = true, this.running = true, this._requestNextFrame(0));
      }, pushScene: function(t2) {
        return this._element.appendChild(t2._element), this.currentScene && this.currentScene.dispatchEvent(new n.Event("exit")), this.currentScene = t2, this.currentScene.dispatchEvent(new n.Event("enter")), this._scenes.push(t2);
      }, popScene: function() {
        return this.currentScene === this.rootScene ? this.currentScene : (this._element.removeChild(this.currentScene._element), this.currentScene.dispatchEvent(new n.Event("exit")), this.currentScene = this._scenes[this._scenes.length - 2], this.currentScene.dispatchEvent(new n.Event("enter")), this._scenes.pop());
      }, replaceScene: function(t2) {
        return this.popScene(), this.pushScene(t2);
      }, removeScene: function(t2) {
        if (this.currentScene === t2)
          return this.popScene();
        var e3 = this._scenes.indexOf(t2);
        return -1 !== e3 ? (this._scenes.splice(e3, 1), this._element.removeChild(t2._element), t2) : null;
      }, _buttonListener: function(t2) {
        this.currentScene.dispatchEvent(t2);
      }, keybind: function(t2, e3) {
        return this.keyboardInputManager.keybind(t2, e3), this.addEventListener(e3 + "buttondown", this._buttonListener), this.addEventListener(e3 + "buttonup", this._buttonListener), this;
      }, keyunbind: function(t2) {
        var e3 = this._keybind[t2];
        return this.keyboardInputManager.keyunbind(t2), this.removeEventListener(e3 + "buttondown", this._buttonListener), this.removeEventListener(e3 + "buttonup", this._buttonListener), this;
      }, changeButtonState: function(t2, e3) {
        this.keyboardInputManager.changeState(t2, e3);
      }, getElapsedTime: function() {
        return this.frame / this.fps;
      } }), n.Core._loadFuncs = {}, n.Core._loadFuncs.jpg = n.Core._loadFuncs.jpeg = n.Core._loadFuncs.gif = n.Core._loadFuncs.png = n.Core._loadFuncs.bmp = function(t2, e3, i2, s2) {
        return n.Surface.load(t2, i2, s2);
      }, n.Core._loadFuncs.mp3 = n.Core._loadFuncs.aac = n.Core._loadFuncs.m4a = n.Core._loadFuncs.wav = n.Core._loadFuncs.ogg = function(t2, e3, i2, s2) {
        return n.Sound.load(t2, "audio/" + e3, i2, s2);
      }, n.Core.findExt = function(t2) {
        var e3 = t2.match(/\.\w+$/);
        return e3 && e3.length > 0 ? e3[0].slice(1).toLowerCase() : 0 === t2.indexOf("data:") ? t2.split(/[\/;]/)[1].toLowerCase() : null;
      }, n.Core.instance = null;
    }(), n.Game = n.Core, n.InputManager = n.Class.create(n.EventTarget, { initialize: function(t2, e2) {
      n.EventTarget.call(this), this.broadcastTarget = [], this.valueStore = t2, this.source = e2 || this, this._binds = {}, this._stateHandler = function(t3) {
        var e3 = t3.source.identifier, n2 = this._binds[e3];
        this.changeState(n2, t3.data);
      }.bind(this);
    }, bind: function(t2, e2) {
      t2.addEventListener(n.Event.INPUT_STATE_CHANGED, this._stateHandler), this._binds[t2.identifier] = e2;
    }, unbind: function(t2) {
      t2.removeEventListener(n.Event.INPUT_STATE_CHANGED, this._stateHandler), delete this._binds[t2.identifier];
    }, addBroadcastTarget: function(t2) {
      var e2 = this.broadcastTarget.indexOf(t2);
      -1 === e2 && this.broadcastTarget.push(t2);
    }, removeBroadcastTarget: function(t2) {
      var e2 = this.broadcastTarget.indexOf(t2);
      -1 !== e2 && this.broadcastTarget.splice(e2, 1);
    }, broadcastEvent: function(t2) {
      for (var e2 = this.broadcastTarget, n2 = 0, i2 = e2.length; i2 > n2; n2++)
        e2[n2].dispatchEvent(t2);
    }, changeState: function() {
    } }), n.InputSource = n.Class.create(n.EventTarget, { initialize: function(t2) {
      n.EventTarget.call(this), this.identifier = t2;
    }, notifyStateChange: function(t2) {
      var e2 = new n.Event(n.Event.INPUT_STATE_CHANGED);
      e2.data = t2, e2.source = this, this.dispatchEvent(e2);
    } }), n.BinaryInputManager = n.Class.create(n.InputManager, { initialize: function(t2, e2, i2, s2) {
      n.InputManager.call(this, t2, s2), this.activeInputsNum = 0, this.activeEventNameSuffix = e2, this.inactiveEventNameSuffix = i2;
    }, bind: function(t2, e2) {
      n.InputManager.prototype.bind.call(this, t2, e2), this.valueStore[e2] = false;
    }, unbind: function(t2) {
      var e2 = this._binds[t2.identifier];
      n.InputManager.prototype.unbind.call(this, t2), delete this.valueStore[e2];
    }, changeState: function(t2, e2) {
      e2 ? this._down(t2) : this._up(t2);
    }, _down: function(t2) {
      var e2;
      this.valueStore[t2] || (this.valueStore[t2] = true, e2 = new n.Event(this.activeInputsNum++ ? "inputchange" : "inputstart"), e2.source = this.source, this.broadcastEvent(e2));
      var i2 = new n.Event(t2 + this.activeEventNameSuffix);
      i2.source = this.source, this.broadcastEvent(i2);
    }, _up: function(t2) {
      var e2;
      this.valueStore[t2] && (this.valueStore[t2] = false, e2 = new n.Event(--this.activeInputsNum ? "inputchange" : "inputend"), e2.source = this.source, this.broadcastEvent(e2));
      var i2 = new n.Event(t2 + this.inactiveEventNameSuffix);
      i2.source = this.source, this.broadcastEvent(i2);
    } }), n.BinaryInputSource = n.Class.create(n.InputSource, { initialize: function(t2) {
      n.InputSource.call(this, t2);
    } }), n.KeyboardInputManager = n.Class.create(n.BinaryInputManager, { initialize: function(t2, e2) {
      n.BinaryInputManager.call(this, e2, "buttondown", "buttonup"), this._attachDOMEvent(t2, "keydown", true), this._attachDOMEvent(t2, "keyup", false);
    }, keybind: function(t2, e2) {
      this.bind(n.KeyboardInputSource.getByKeyCode("" + t2), e2);
    }, keyunbind: function(t2) {
      this.unbind(n.KeyboardInputSource.getByKeyCode("" + t2));
    }, _attachDOMEvent: function(t2, e2, i2) {
      t2.addEventListener(e2, function(t3) {
        var e3 = n.Core.instance;
        if (e3 && e3.running) {
          var s2 = t3.keyCode, r2 = n.KeyboardInputSource._instances[s2];
          r2 && r2.notifyStateChange(i2);
        }
      }, true);
    } }), n.KeyboardInputSource = n.Class.create(n.BinaryInputSource, { initialize: function(t2) {
      n.BinaryInputSource.call(this, t2);
    } }), n.KeyboardInputSource._instances = {}, n.KeyboardInputSource.getByKeyCode = function(t2) {
      return this._instances[t2] || (this._instances[t2] = new n.KeyboardInputSource(t2)), this._instances[t2];
    }, n.Node = n.Class.create(n.EventTarget, { initialize: function() {
      n.EventTarget.call(this), this._dirty = false, this._matrix = [1, 0, 0, 1, 0, 0], this._x = 0, this._y = 0, this._offsetX = 0, this._offsetY = 0, this.age = 0, this.parentNode = null, this.scene = null, this.addEventListener("touchstart", function(t2) {
        this.parentNode && this.parentNode.dispatchEvent(t2);
      }), this.addEventListener("touchmove", function(t2) {
        this.parentNode && this.parentNode.dispatchEvent(t2);
      }), this.addEventListener("touchend", function(t2) {
        this.parentNode && this.parentNode.dispatchEvent(t2);
      }), n.ENV.USE_ANIMATION && (this.tl = new n.Timeline(this));
    }, moveTo: function(t2, e2) {
      this.x = t2, this.y = e2;
    }, moveBy: function(t2, e2) {
      this.x += t2, this.y += e2;
    }, x: { get: function() {
      return this._x;
    }, set: function(t2) {
      this._x !== t2 && (this._x = t2, this._dirty = true);
    } }, y: { get: function() {
      return this._y;
    }, set: function(t2) {
      this._y !== t2 && (this._y = t2, this._dirty = true);
    } }, _updateCoordinate: function() {
      var t2 = this, e2 = [t2], i2 = t2.parentNode;
      for (this.scene; i2 && t2._dirty; )
        e2.unshift(i2), t2 = t2.parentNode, i2 = t2.parentNode;
      var s2, r2, a2, o2 = n.Matrix.instance, h2 = o2.stack, c2 = [];
      h2.push(e2[0]._matrix);
      for (var u2 = 1, d = e2.length; d > u2; u2++) {
        t2 = e2[u2], s2 = [], o2.makeTransformMatrix(t2, c2), o2.multiply(h2[h2.length - 1], c2, s2), t2._matrix = s2, h2.push(s2), r2 = "number" == typeof t2._originX ? t2._originX : t2._width / 2 || 0, a2 = "number" == typeof t2._originY ? t2._originY : t2._height / 2 || 0;
        var l = [r2, a2];
        o2.multiplyVec(s2, l, l), t2._offsetX = l[0] - r2, t2._offsetY = l[1] - a2, t2._dirty = false;
      }
      o2.reset();
    }, remove: function() {
      if (this.parentNode && this.parentNode.removeChild(this), this.childNodes)
        for (var t2 = this.childNodes.slice(), e2 = t2.length - 1; e2 >= 0; e2--)
          t2[e2].remove();
      this.clearEventListener();
    } });
    var i = function(t2, e2) {
      for (var n2, i2 = [], s2 = 0, r2 = t2.collection.length; r2 > s2; s2++)
        n2 = t2.collection[s2], e2._intersectOne(n2) && i2.push(n2);
      return i2;
    }, s = function(t2, e2) {
      for (var n2, i2, s2 = [], r2 = 0, a2 = t2.collection.length; a2 > r2; r2++) {
        n2 = t2.collection[r2];
        for (var o2 = 0, h2 = e2.collection.length; h2 > o2; o2++)
          i2 = e2.collection[o2], n2._intersectOne(i2) && s2.push([n2, i2]);
      }
      return s2;
    }, r = function(t2, e2) {
      for (var n2, i2 = [], s2 = 0, r2 = t2.collection.length; r2 > s2; s2++)
        n2 = t2.collection[s2], e2._intersectStrictOne(n2) && i2.push(n2);
      return i2;
    }, a = function(t2, e2) {
      for (var n2, i2, s2 = [], r2 = 0, a2 = t2.collection.length; a2 > r2; r2++) {
        n2 = t2.collection[r2];
        for (var o2 = 0, h2 = e2.collection.length; h2 > o2; o2++)
          i2 = e2.collection[o2], n2._intersectStrictOne(i2) && s2.push([n2, i2]);
      }
      return s2;
    }, o = function(t2) {
      return t2 instanceof n.Entity ? i(this, t2) : "function" == typeof t2 && t2.collection ? s(this, t2) : false;
    }, h = function(t2) {
      return t2 instanceof n.Entity ? r(this, t2) : "function" == typeof t2 && t2.collection ? a(this, t2) : false;
    }, c = n.Node.prototype.clearEventListener;
    n.Entity = n.Class.create(n.Node, { initialize: function() {
      var t2 = n.Core.instance;
      n.Node.call(this), this._rotation = 0, this._scaleX = 1, this._scaleY = 1, this._touchEnabled = true, this._clipping = false, this._originX = null, this._originY = null, this._width = 0, this._height = 0, this._backgroundColor = null, this._debugColor = "#0000ff", this._opacity = 1, this._visible = true, this._buttonMode = null, this._style = {}, this.__styleStatus = {}, this._isContainedInCollection = false, this.compositeOperation = null, this.buttonMode = null, this.buttonPressed = false, this.addEventListener("touchstart", function() {
        this.buttonMode && (this.buttonPressed = true, this.dispatchEvent(new n.Event(this.buttonMode + "buttondown")), t2.changeButtonState(this.buttonMode, true));
      }), this.addEventListener("touchend", function() {
        this.buttonMode && (this.buttonPressed = false, this.dispatchEvent(new n.Event(this.buttonMode + "buttonup")), t2.changeButtonState(this.buttonMode, false));
      }), this.enableCollection();
    }, width: { get: function() {
      return this._width;
    }, set: function(t2) {
      this._width !== t2 && (this._width = t2, this._dirty = true);
    } }, height: { get: function() {
      return this._height;
    }, set: function(t2) {
      this._height !== t2 && (this._height = t2, this._dirty = true);
    } }, backgroundColor: { get: function() {
      return this._backgroundColor;
    }, set: function(t2) {
      this._backgroundColor = t2;
    } }, debugColor: { get: function() {
      return this._debugColor;
    }, set: function(t2) {
      this._debugColor = t2;
    } }, opacity: { get: function() {
      return this._opacity;
    }, set: function(t2) {
      this._opacity = parseFloat(t2);
    } }, visible: { get: function() {
      return this._visible;
    }, set: function(t2) {
      this._visible = t2;
    } }, touchEnabled: { get: function() {
      return this._touchEnabled;
    }, set: function(t2) {
      this._touchEnabled = t2, this._style.pointerEvents = t2 ? "all" : "none";
    } }, intersect: function(t2) {
      return t2 instanceof n.Entity ? this._intersectOne(t2) : "function" == typeof t2 && t2.collection ? i(t2, this) : false;
    }, _intersectOne: function(t2) {
      return this._dirty && this._updateCoordinate(), t2._dirty && t2._updateCoordinate(), this._offsetX < t2._offsetX + t2.width && t2._offsetX < this._offsetX + this.width && this._offsetY < t2._offsetY + t2.height && t2._offsetY < this._offsetY + this.height;
    }, intersectStrict: function(t2) {
      return t2 instanceof n.Entity ? this._intersectStrictOne(t2) : "function" == typeof t2 && t2.collection ? r(t2, this) : false;
    }, _intersectStrictOne: function(t2) {
      this._dirty && this._updateCoordinate(), t2._dirty && t2._updateCoordinate();
      var e2, n2, i2, s2, r2, a2, o2, h2, c2, u2, d, l, f, _, v, g, m, E, p, y, C, T, w, N = this.getOrientedBoundingRect(), x = t2.getOrientedBoundingRect(), b = N.leftTop, S = N.rightTop, O = N.leftBottom, A = N.rightBottom, D = x.leftTop, M = x.rightTop, I = x.leftBottom, L = x.rightBottom, R = b[0], U = b[1], P = S[0], B = S[1], k = O[0], F = O[1], X = A[0], Y = A[1], V = D[0], H = D[1], z = M[0], q = M[1], W = I[0], G = I[1], j = L[0], K = L[1], Q = [P - R, B - U], Z = [X - P, Y - B], J = [k - X, F - Y], $ = [R - k, U - F], te = [z - V, q - H], ee = [j - z, K - q], ne = [W - j, G - K], ie = [V - W, H - G], se = R + P + k + X >> 2, re = U + B + F + Y >> 2, ae = V + z + W + j >> 2, oe = H + q + G + K >> 2;
      if (Q[0] * (oe - U) - Q[1] * (ae - R) > 0 && Z[0] * (oe - B) - Z[1] * (ae - P) > 0 && J[0] * (oe - Y) - J[1] * (ae - X) > 0 && $[0] * (oe - F) - $[1] * (ae - k) > 0)
        return true;
      if (te[0] * (re - H) - te[1] * (se - V) > 0 && ee[0] * (re - q) - ee[1] * (se - z) > 0 && ne[0] * (re - K) - ne[1] * (se - j) > 0 && ie[0] * (re - G) - ie[1] * (se - W) > 0)
        return true;
      for (i2 = [b, S, A, O], s2 = [D, M, L, I], r2 = [Q, Z, J, $], a2 = [te, ee, ne, ie], e2 = 0; 4 > e2; e2++)
        for (o2 = i2[e2], d = o2[0], l = o2[1], c2 = r2[e2], v = c2[0], g = c2[1], n2 = 0; 4 > n2; n2++)
          if (h2 = s2[n2], f = h2[0], _ = h2[1], u2 = a2[n2], m = u2[0], E = u2[1], C = v * E - g * m, 0 !== C && (p = f - d, y = _ - l, T = (p * g - y * v) / C, w = (p * E - y * m) / C, T > 0 && 1 > T && w > 0 && 1 > w))
            return true;
      return false;
    }, within: function(t2, e2) {
      this._dirty && this._updateCoordinate(), t2._dirty && t2._updateCoordinate(), null == e2 && (e2 = (this.width + this.height + t2.width + t2.height) / 4);
      var n2;
      return e2 * e2 > (n2 = this._offsetX - t2._offsetX + (this.width - t2.width) / 2) * n2 + (n2 = this._offsetY - t2._offsetY + (this.height - t2.height) / 2) * n2;
    }, scale: function(t2, e2) {
      this._scaleX *= t2, this._scaleY *= null != e2 ? e2 : t2, this._dirty = true;
    }, rotate: function(t2) {
      this.rotation += t2;
    }, scaleX: { get: function() {
      return this._scaleX;
    }, set: function(t2) {
      this._scaleX !== t2 && (this._scaleX = t2, this._dirty = true);
    } }, scaleY: { get: function() {
      return this._scaleY;
    }, set: function(t2) {
      this._scaleY !== t2 && (this._scaleY = t2, this._dirty = true);
    } }, rotation: { get: function() {
      return this._rotation;
    }, set: function(t2) {
      this._rotation !== t2 && (this._rotation = t2, this._dirty = true);
    } }, originX: { get: function() {
      return this._originX;
    }, set: function(t2) {
      this._originX !== t2 && (this._originX = t2, this._dirty = true);
    } }, originY: { get: function() {
      return this._originY;
    }, set: function(t2) {
      this._originY !== t2 && (this._originY = t2, this._dirty = true);
    } }, enableCollection: function() {
      this.addEventListener("addedtoscene", this._addSelfToCollection), this.addEventListener("removedfromscene", this._removeSelfFromCollection), this.scene && this._addSelfToCollection();
    }, disableCollection: function() {
      this.removeEventListener("addedtoscene", this._addSelfToCollection), this.removeEventListener("removedfromscene", this._removeSelfFromCollection), this.scene && this._removeSelfFromCollection();
    }, clearEventListener: function() {
      c.apply(this, arguments), this.scene && this._removeSelfFromCollection();
    }, _addSelfToCollection: function() {
      if (!this._isContainedInCollection) {
        var t2 = this.getConstructor();
        t2._collectionTarget.forEach(function(t3) {
          t3.collection.push(this);
        }, this), this._isContainedInCollection = true;
      }
    }, _removeSelfFromCollection: function() {
      if (this._isContainedInCollection) {
        var t2 = this.getConstructor();
        t2._collectionTarget.forEach(function(t3) {
          var e2 = t3.collection.indexOf(this);
          -1 !== e2 && t3.collection.splice(e2, 1);
        }, this), this._isContainedInCollection = false;
      }
    }, getBoundingRect: function() {
      var t2 = this.width || 0, e2 = this.height || 0, n2 = this._matrix, i2 = n2[0] * t2, s2 = n2[1] * t2, r2 = n2[2] * e2, a2 = n2[3] * e2, o2 = n2[4], h2 = n2[5], c2 = [o2, i2 + o2, r2 + o2, i2 + r2 + o2].sort(function(t3, e3) {
        return t3 - e3;
      }), u2 = [h2, s2 + h2, a2 + h2, s2 + a2 + h2].sort(function(t3, e3) {
        return t3 - e3;
      });
      return { left: c2[0], top: u2[0], width: c2[3] - c2[0], height: u2[3] - u2[0] };
    }, getOrientedBoundingRect: function() {
      var t2 = this.width || 0, e2 = this.height || 0, n2 = this._matrix, i2 = n2[0] * t2, s2 = n2[1] * t2, r2 = n2[2] * e2, a2 = n2[3] * e2, o2 = n2[4], h2 = n2[5];
      return { leftTop: [o2, h2], rightTop: [i2 + o2, s2 + h2], leftBottom: [r2 + o2, a2 + h2], rightBottom: [i2 + r2 + o2, s2 + a2 + h2] };
    }, getConstructor: function() {
      return Object.getPrototypeOf(this).constructor;
    } });
    var u = function(t2) {
      if (!t2._collective) {
        var e2 = n.Class.getInheritanceTree(t2), i2 = e2.indexOf(n.Entity);
        t2._collectionTarget = -1 !== i2 ? e2.splice(0, i2 + 1) : [], t2.intersect = o, t2.intersectStrict = h, t2.collection = [], t2._collective = true;
      }
    };
    u(n.Entity), n.Entity._inherited = function(t2) {
      u(t2);
    }, n.Sprite = n.Class.create(n.Entity, { initialize: function(t2, e2) {
      n.Entity.call(this), this.width = t2, this.height = e2, this._image = null, this._debugColor = "#ff0000", this._frameLeft = 0, this._frameTop = 0, this._frame = 0, this._frameSequence = null;
    }, image: { get: function() {
      return this._image;
    }, set: function(t2) {
      if (t2 === e)
        throw Error("Assigned value on Sprite.image is undefined. Please double-check image path, and check if the image you want to use is preload before use.");
      t2 !== this._image && (this._image = t2, this._computeFramePosition());
    } }, frame: { get: function() {
      return this._frame;
    }, set: function(t2) {
      null == this._frameSequence && this._frame === t2 || this._deepCompareToPreviousFrame(t2) || (t2 instanceof Array ? this._frameSequence = t2 : (this._frameSequence = null, this._frame = t2, this._computeFramePosition()));
    } }, _frameSequence: { get: function() {
      return this.__frameSequence;
    }, set: function(t2) {
      t2 && !this.__frameSequence ? this.addEventListener(n.Event.ENTER_FRAME, this._rotateFrameSequence) : !t2 && this.__frameSequence && this.removeEventListener(n.Event.ENTER_FRAME, this._rotateFrameSequence), t2 ? (this.__frameSequence = t2.slice(), this._originalFrameSequence = t2.slice(), this._rotateFrameSequence()) : (this.__frameSequence = null, this._originalFrameSequence = null);
    } }, _deepCompareToPreviousFrame: function(t2) {
      if (t2 === this._originalFrameSequence)
        return true;
      if (null == t2 || null == this._originalFrameSequence)
        return false;
      if (!(t2 instanceof Array))
        return false;
      if (t2.length !== this._originalFrameSequence.length)
        return false;
      for (var e2 = 0; t2.length > e2; ++e2)
        if (t2[e2] !== this._originalFrameSequence[e2])
          return false;
      return true;
    }, _computeFramePosition: function() {
      var t2, e2 = this._image;
      null != e2 && (t2 = 0 | e2.width / this._width, this._frameLeft = (0 | this._frame % t2) * this._width, this._frameTop = (0 | this._frame / t2) * this._height % e2.height);
    }, _rotateFrameSequence: function() {
      var t2 = this._frameSequence;
      if (t2 && 0 !== t2.length) {
        var e2 = t2.shift();
        null === e2 ? (this._frameSequence = null, this.dispatchEvent(new n.Event(n.Event.ANIMATION_END))) : (this._frame = e2, this._computeFramePosition(), t2.push(e2));
      }
    }, width: { get: function() {
      return this._width;
    }, set: function(t2) {
      this._width = t2, this._computeFramePosition(), this._dirty = true;
    } }, height: { get: function() {
      return this._height;
    }, set: function(t2) {
      this._height = t2, this._computeFramePosition(), this._dirty = true;
    } }, cvsRender: function(t2) {
      var e2, i2, s2, r2, a2, o2, h2, c2 = this._image, u2 = this._width, d = this._height;
      c2 && 0 !== u2 && 0 !== d && (e2 = c2.width, i2 = c2.height, u2 > e2 || d > i2 ? (t2.fillStyle = n.Surface._getPattern(c2), t2.fillRect(0, 0, u2, d)) : (s2 = c2._element, r2 = this._frameLeft, a2 = Math.min(this._frameTop, i2 - d), o2 = Math.max(0.01, Math.min(e2 - r2, u2)), h2 = Math.max(0.01, Math.min(i2 - a2, d)), t2.drawImage(s2, r2, a2, o2, h2, 0, 0, u2, d)));
    }, domRender: function() {
      return "ms" === n.ENV.VENDOR_PREFIX ? function() {
        this._image && (this._image._css ? (this._style["background-image"] = this._image._css, this._style["background-position"] = -this._frameLeft + "px " + -this._frameTop + "px") : this._image._element);
      } : function() {
        this._image && (this._image._css ? (this._style["background-image"] = this._image._css, this._style["background-position"] = -this._frameLeft + "px " + -this._frameTop + "px") : this._image._element);
      };
    }() }), n.Label = n.Class.create(n.Entity, { initialize: function(t2) {
      n.Entity.call(this), this.text = t2 || "", this.width = 300, this.font = "14px serif", this.textAlign = "left", this._debugColor = "#ff0000";
    }, width: { get: function() {
      return this._width;
    }, set: function(t2) {
      this._width = t2, this._dirty = true, this.updateBoundArea();
    } }, text: { get: function() {
      return this._text;
    }, set: function(t2) {
      if (t2 = "" + t2, this._text !== t2) {
        this._text = t2, t2 = t2.replace(/<br ?\/?>/gi, "<br/>"), this._splitText = t2.split("<br/>"), this.updateBoundArea();
        for (var e2 = 0, n2 = this._splitText.length; n2 > e2; e2++) {
          t2 = this._splitText[e2];
          var i2 = this.getMetrics(t2);
          this._splitText[e2] = {}, this._splitText[e2].text = t2, this._splitText[e2].height = i2.height, this._splitText[e2].width = i2.width;
        }
      }
    } }, textAlign: { get: function() {
      return this._style["text-align"];
    }, set: function(t2) {
      this._style["text-align"] = t2, this.updateBoundArea();
    } }, font: { get: function() {
      return this._style.font;
    }, set: function(t2) {
      this._style.font = t2, this.updateBoundArea();
    } }, color: { get: function() {
      return this._style.color;
    }, set: function(t2) {
      this._style.color = t2;
    } }, cvsRender: function(t2) {
      var e2, n2, i2, s2, r2, a2, o2, h2, c2, u2 = 0, d = this.width;
      if (this._splitText) {
        t2.textBaseline = "top", t2.font = this.font, t2.fillStyle = this.color || "#000000", n2 = t2.measureText(" ").width, i2 = d / n2;
        for (var l = 0, f = this._splitText.length; f > l; l++) {
          for (s2 = this._splitText[l], r2 = s2.text, a2 = 0; r2.length > a2 + i2 || t2.measureText(r2.slice(a2, a2 + i2)).width > d; ) {
            for (o2 = "", h2 = i2, c2 = 0; h2 > 0; )
              d > t2.measureText(o2).width ? (c2 += h2, o2 = r2.slice(a2, a2 + c2)) : (c2 -= h2, o2 = r2.slice(a2, a2 + c2)), h2 = 0 | h2 / 2;
            t2.fillText(o2, 0, u2), u2 += s2.height - 1, a2 += c2;
          }
          o2 = r2.slice(a2, a2 + r2.length), e2 = "right" === this.textAlign ? d - t2.measureText(o2).width : "center" === this.textAlign ? (d - t2.measureText(o2).width) / 2 : 0, t2.fillText(o2, e2, u2), u2 += s2.height - 1;
        }
      }
    }, domRender: function(t2) {
      t2.innerHTML !== this._text && (t2.innerHTML = this._text);
    }, detectRender: function(t2) {
      t2.fillRect(this._boundOffset, 0, this._boundWidth, this._boundHeight);
    }, updateBoundArea: function() {
      var t2 = this.getMetrics();
      this._boundWidth = t2.width, this._boundHeight = t2.height, this._boundOffset = "right" === this.textAlign ? this.width - this._boundWidth : "center" === this.textAlign ? (this.width - this._boundWidth) / 2 : 0;
    }, getMetrics: function(t2) {
      var e2, n2 = {};
      if (document.body) {
        e2 = document.createElement("div");
        for (var i2 in this._style)
          "width" !== i2 && "height" !== i2 && (e2.style[i2] = this._style[i2]);
        t2 = t2 || this._text, e2.innerHTML = t2.replace(/ /g, "&nbsp;"), e2.style.whiteSpace = "noWrap", e2.style.lineHeight = 1, document.body.appendChild(e2);
        var s2 = getComputedStyle(e2);
        n2.height = parseInt(s2.height, 10) + 1, e2.style.position = "absolute", n2.width = parseInt(s2.width, 10) + 1, document.body.removeChild(e2);
      } else
        n2.width = this.width, n2.height = this.height;
      return n2;
    } }), n.Map = n.Class.create(n.Entity, { initialize: function(t2, e2) {
      var i2 = n.Core.instance;
      n.Entity.call(this);
      var s2 = new n.Surface(i2.width, i2.height);
      this._surface = s2;
      var r2 = s2._element;
      r2.style.position = "absolute", n.ENV.RETINA_DISPLAY && 2 === i2.scale ? (r2.width = 2 * i2.width, r2.height = 2 * i2.height, this._style.webkitTransformOrigin = "0 0", this._style.webkitTransform = "scale(0.5)") : (r2.width = i2.width, r2.height = i2.height), this._context = r2.getContext("2d"), this._tileWidth = t2 || 0, this._tileHeight = e2 || 0, this._image = null, this._data = [[[]]], this._dirty = false, this._tight = false, this.touchEnabled = false, this.collisionData = null, this._listeners.render = null, this.addEventListener("render", function() {
        this._dirty && (this._previousOffsetX = this._previousOffsetY = null);
      });
    }, loadData: function(t2) {
      this._data = Array.prototype.slice.apply(arguments), this._dirty = true, this._tight = false;
      for (var e2 = 0, n2 = this._data.length; n2 > e2; e2++) {
        var i2 = 0;
        t2 = this._data[e2];
        for (var s2 = 0, r2 = t2.length; r2 > s2; s2++)
          for (var a2 = 0, o2 = t2[s2].length; o2 > a2; a2++)
            t2[s2][a2] >= 0 && i2++;
        if (i2 / (t2.length * t2[0].length) > 0.2) {
          this._tight = true;
          break;
        }
      }
    }, checkTile: function(t2, e2) {
      if (0 > t2 || t2 >= this.width || 0 > e2 || e2 >= this.height)
        return false;
      var n2 = this._image.width, i2 = this._image.height, s2 = this._tileWidth || n2, r2 = this._tileHeight || i2;
      t2 = 0 | t2 / s2, e2 = 0 | e2 / r2;
      var a2 = this._data[0];
      return a2[e2][t2];
    }, hitTest: function(t2, e2) {
      if (0 > t2 || t2 >= this.width || 0 > e2 || e2 >= this.height)
        return false;
      var n2 = this._image.width, i2 = this._image.height, s2 = this._tileWidth || n2, r2 = this._tileHeight || i2;
      if (t2 = 0 | t2 / s2, e2 = 0 | e2 / r2, null != this.collisionData)
        return this.collisionData[e2] && !!this.collisionData[e2][t2];
      for (var a2 = 0, o2 = this._data.length; o2 > a2; a2++) {
        var h2, c2 = this._data[a2];
        if (null != c2[e2] && null != (h2 = c2[e2][t2]) && h2 >= 0 && (0 | n2 / s2) * (0 | i2 / r2) > h2)
          return true;
      }
      return false;
    }, image: { get: function() {
      return this._image;
    }, set: function(t2) {
      var e2 = n.Core.instance;
      if (this._image = t2, n.ENV.RETINA_DISPLAY && 2 === e2.scale) {
        for (var i2 = new n.Surface(2 * t2.width, 2 * t2.height), s2 = this._tileWidth || t2.width, r2 = this._tileHeight || t2.height, a2 = 0 | t2.width / s2, o2 = 0 | t2.height / r2, h2 = 0; o2 > h2; h2++)
          for (var c2 = 0; a2 > c2; c2++)
            i2.draw(t2, c2 * s2, h2 * r2, s2, r2, 2 * c2 * s2, 2 * h2 * r2, 2 * s2, 2 * r2);
        this._doubledImage = i2;
      }
      this._dirty = true;
    } }, tileWidth: { get: function() {
      return this._tileWidth;
    }, set: function(t2) {
      this._tileWidth !== t2 && (this._tileWidth = t2, this._dirty = true);
    } }, tileHeight: { get: function() {
      return this._tileHeight;
    }, set: function(t2) {
      this._tileHeight !== t2 && (this._tileHeight = t2, this._dirty = true);
    } }, width: { get: function() {
      return this._tileWidth * this._data[0][0].length;
    } }, height: { get: function() {
      return this._tileHeight * this._data[0].length;
    } }, redraw: function(t2, e2, n2, i2) {
      if (null != this._image) {
        var s2, r2, a2, o2, h2;
        this._doubledImage ? (s2 = this._doubledImage, r2 = 2 * this._tileWidth, a2 = 2 * this._tileHeight, o2 = 2 * -this._offsetX, h2 = 2 * -this._offsetY, t2 *= 2, e2 *= 2, n2 *= 2, i2 *= 2) : (s2 = this._image, r2 = this._tileWidth, a2 = this._tileHeight, o2 = -this._offsetX, h2 = -this._offsetY);
        var c2 = 0 | s2.width / r2, u2 = 0 | s2.height / a2, d = Math.max(0 | (t2 + o2) / r2, 0), l = Math.max(0 | (e2 + h2) / a2, 0), f = Math.ceil((t2 + o2 + n2) / r2), _ = Math.ceil((e2 + h2 + i2) / a2), v = s2._element, g = this._context;
        g.canvas, g.clearRect(t2, e2, n2, i2);
        for (var m = 0, E = this._data.length; E > m; m++) {
          var p = this._data[m], y = Math.min(f, p[0].length), C = Math.min(_, p.length);
          for (e2 = l; C > e2; e2++)
            for (t2 = d; y > t2; t2++) {
              var T = p[e2][t2];
              if (T >= 0 && c2 * u2 > T) {
                var w = T % c2 * r2, N = (0 | T / c2) * a2;
                g.drawImage(v, w, N, r2, a2, t2 * r2 - o2, e2 * a2 - h2, r2, a2);
              }
            }
        }
      }
    }, updateBuffer: function() {
      if (this._visible === e || this._visible) {
        var t2 = n.Core.instance;
        if (this._dirty || null == this._previousOffsetX)
          this.redraw(0, 0, t2.width, t2.height);
        else if (this._offsetX !== this._previousOffsetX || this._offsetY !== this._previousOffsetY)
          if (this._tight) {
            var i2 = -this._offsetX, s2 = -this._offsetY, r2 = -this._previousOffsetX, a2 = -this._previousOffsetY, o2 = i2 - r2 + t2.width, h2 = r2 - i2 + t2.width, c2 = s2 - a2 + t2.height, u2 = a2 - s2 + t2.height;
            if (o2 > this._tileWidth && h2 > this._tileWidth && c2 > this._tileHeight && u2 > this._tileHeight) {
              var d, l, f, _, v, g;
              h2 > o2 ? (d = 0, f = r2 - i2, v = o2) : (d = i2 - r2, f = 0, v = h2), u2 > c2 ? (l = 0, _ = a2 - s2, g = c2) : (l = s2 - a2, _ = 0, g = u2), null == t2._buffer && (t2._buffer = document.createElement("canvas"), t2._buffer.width = this._context.canvas.width, t2._buffer.height = this._context.canvas.height);
              var m = t2._buffer.getContext("2d");
              this._doubledImage ? (m.clearRect(0, 0, 2 * v, 2 * g), m.drawImage(this._context.canvas, 2 * d, 2 * l, 2 * v, 2 * g, 0, 0, 2 * v, 2 * g), m = this._context, m.clearRect(2 * f, 2 * _, 2 * v, 2 * g), m.drawImage(t2._buffer, 0, 0, 2 * v, 2 * g, 2 * f, 2 * _, 2 * v, 2 * g)) : (m.clearRect(0, 0, v, g), m.drawImage(this._context.canvas, d, l, v, g, 0, 0, v, g), m = this._context, m.clearRect(f, _, v, g), m.drawImage(t2._buffer, 0, 0, v, g, f, _, v, g)), 0 === f ? this.redraw(v, 0, t2.width - v, t2.height) : this.redraw(0, 0, t2.width - v, t2.height), 0 === _ ? this.redraw(0, g, t2.width, t2.height - g) : this.redraw(0, 0, t2.width, t2.height - g);
            } else
              this.redraw(0, 0, t2.width, t2.height);
          } else
            this.redraw(0, 0, t2.width, t2.height);
        this._previousOffsetX = this._offsetX, this._previousOffsetY = this._offsetY;
      }
    }, cvsRender: function(t2) {
      if (0 !== this.width && 0 !== this.height) {
        var e2 = n.Core.instance;
        this.updateBuffer(), t2.save(), t2.setTransform(1, 0, 0, 1, 0, 0);
        var i2 = this._context.canvas;
        t2.drawImage(i2, 0, 0, e2.width, e2.height), t2.restore();
      }
    }, domRender: function() {
      this._image && (this.updateBuffer(), this._style["background-image"] = this._surface._css, this._style[n.ENV.VENDOR_PREFIX + "Transform"] = "matrix(1, 0, 0, 1, 0, 0)");
    } }), n.Group = n.Class.create(n.Node, { initialize: function() {
      this.childNodes = [], n.Node.call(this), this._rotation = 0, this._scaleX = 1, this._scaleY = 1, this._originX = null, this._originY = null, this.__dirty = false, [n.Event.ADDED_TO_SCENE, n.Event.REMOVED_FROM_SCENE].forEach(function(t2) {
        this.addEventListener(t2, function(t3) {
          this.childNodes.forEach(function(e2) {
            e2.scene = this.scene, e2.dispatchEvent(t3);
          }, this);
        });
      }, this);
    }, addChild: function(t2) {
      t2.parentNode && t2.parentNode.removeChild(t2), this.childNodes.push(t2), t2.parentNode = this;
      var e2 = new n.Event("childadded");
      if (e2.node = t2, e2.next = null, this.dispatchEvent(e2), t2.dispatchEvent(new n.Event("added")), this.scene) {
        t2.scene = this.scene;
        var i2 = new n.Event("addedtoscene");
        t2.dispatchEvent(i2);
      }
    }, insertBefore: function(t2, e2) {
      t2.parentNode && t2.parentNode.removeChild(t2);
      var i2 = this.childNodes.indexOf(e2);
      if (-1 !== i2) {
        this.childNodes.splice(i2, 0, t2), t2.parentNode = this;
        var s2 = new n.Event("childadded");
        if (s2.node = t2, s2.next = e2, this.dispatchEvent(s2), t2.dispatchEvent(new n.Event("added")), this.scene) {
          t2.scene = this.scene;
          var r2 = new n.Event("addedtoscene");
          t2.dispatchEvent(r2);
        }
      } else
        this.addChild(t2);
    }, removeChild: function(t2) {
      var e2;
      if (-1 !== (e2 = this.childNodes.indexOf(t2))) {
        this.childNodes.splice(e2, 1), t2.parentNode = null;
        var i2 = new n.Event("childremoved");
        if (i2.node = t2, this.dispatchEvent(i2), t2.dispatchEvent(new n.Event("removed")), this.scene) {
          t2.scene = null;
          var s2 = new n.Event("removedfromscene");
          t2.dispatchEvent(s2);
        }
      }
    }, firstChild: { get: function() {
      return this.childNodes[0];
    } }, lastChild: { get: function() {
      return this.childNodes[this.childNodes.length - 1];
    } }, rotation: { get: function() {
      return this._rotation;
    }, set: function(t2) {
      this._rotation !== t2 && (this._rotation = t2, this._dirty = true);
    } }, scaleX: { get: function() {
      return this._scaleX;
    }, set: function(t2) {
      this._scaleX !== t2 && (this._scaleX = t2, this._dirty = true);
    } }, scaleY: { get: function() {
      return this._scaleY;
    }, set: function(t2) {
      this._scaleY !== t2 && (this._scaleY = t2, this._dirty = true);
    } }, originX: { get: function() {
      return this._originX;
    }, set: function(t2) {
      this._originX !== t2 && (this._originX = t2, this._dirty = true);
    } }, originY: { get: function() {
      return this._originY;
    }, set: function(t2) {
      this._originY !== t2 && (this._originY = t2, this._dirty = true);
    } }, _dirty: { get: function() {
      return this.__dirty;
    }, set: function(t2) {
      if (t2 = !!t2, this.__dirty = t2, t2)
        for (var e2 = 0, n2 = this.childNodes.length; n2 > e2; e2++)
          this.childNodes[e2]._dirty = true;
    } } }), n.Matrix = n.Class.create({ initialize: function() {
      this.reset();
    }, reset: function() {
      this.stack = [], this.stack.push([1, 0, 0, 1, 0, 0]);
    }, makeTransformMatrix: function(t2, e2) {
      var n2 = t2._x, i2 = t2._y, s2 = t2.width || 0, r2 = t2.height || 0, a2 = t2._rotation || 0, o2 = "number" == typeof t2._scaleX ? t2._scaleX : 1, h2 = "number" == typeof t2._scaleY ? t2._scaleY : 1, c2 = a2 * Math.PI / 180, u2 = Math.cos(c2), d = Math.sin(c2), l = "number" == typeof t2._originX ? t2._originX : s2 / 2, f = "number" == typeof t2._originY ? t2._originY : r2 / 2, _ = o2 * u2, v = o2 * d, g = h2 * d, m = h2 * u2;
      e2[0] = _, e2[1] = v, e2[2] = -g, e2[3] = m, e2[4] = -_ * l + g * f + n2 + l, e2[5] = -v * l - m * f + i2 + f;
    }, multiply: function(t2, e2, n2) {
      var i2 = t2[0], s2 = t2[2], r2 = t2[4], a2 = t2[1], o2 = t2[3], h2 = t2[5], c2 = e2[0], u2 = e2[2], d = e2[4], l = e2[1], f = e2[3], _ = e2[5];
      n2[0] = i2 * c2 + s2 * l, n2[1] = a2 * c2 + o2 * l, n2[2] = i2 * u2 + s2 * f, n2[3] = a2 * u2 + o2 * f, n2[4] = i2 * d + s2 * _ + r2, n2[5] = a2 * d + o2 * _ + h2;
    }, multiplyVec: function(t2, e2, n2) {
      var i2 = e2[0], s2 = e2[1], r2 = t2[0], a2 = t2[2], o2 = t2[4], h2 = t2[1], c2 = t2[3], u2 = t2[5];
      n2[0] = r2 * i2 + a2 * s2 + o2, n2[1] = h2 * i2 + c2 * s2 + u2;
    } }), n.Matrix.instance = new n.Matrix(), n.DetectColorManager = n.Class.create({ initialize: function(t2, e2) {
      this.reference = [], this.colorResolution = t2 || 16, this.max = e2 || 1, this.capacity = Math.pow(this.colorResolution, 3);
      for (var n2 = 1, i2 = this.capacity; i2 > n2; n2++)
        this.reference[n2] = null;
    }, attachDetectColor: function(t2) {
      var e2 = this.reference.indexOf(null);
      return -1 === e2 && (e2 = 1), this.reference[e2] = t2, this._getColor(e2);
    }, detachDetectColor: function(t2) {
      var e2 = this.reference.indexOf(t2);
      -1 !== e2 && (this.reference[e2] = null);
    }, _getColor: function(t2) {
      var e2 = this.colorResolution, n2 = e2 / this.max;
      return [parseInt(t2 / e2 / e2 % e2, 10) / n2, parseInt(t2 / e2 % e2, 10) / n2, parseInt(t2 % e2, 10) / n2, 1];
    }, _decodeDetectColor: function(t2, e2) {
      e2 = e2 || 0;
      var n2 = this.colorResolution;
      return ~~(t2[e2] * n2 * n2 * n2 / 256) + ~~(t2[e2 + 1] * n2 * n2 / 256) + ~~(t2[e2 + 2] * n2 / 256);
    }, getSpriteByColor: function(t2) {
      return this.reference[this._decodeDetectColor(t2)];
    }, getSpriteByColors: function(t2) {
      var e2, n2, i2, s2, r2 = 0, a2 = {};
      for (e2 = 0, n2 = t2.length; n2 > e2; e2 += 4)
        i2 = this._decodeDetectColor(t2, e2), a2[i2] = (a2[i2] || 0) + 1;
      for (i2 in a2)
        a2[i2] > r2 && (r2 = a2[i2], s2 = i2);
      return this.reference[s2];
    } }), n.DomManager = n.Class.create({ initialize: function(t2, e2) {
      var i2 = n.Core.instance;
      this.layer = null, this.targetNode = t2, "string" == typeof e2 ? this.element = document.createElement(e2) : e2 instanceof HTMLElement && (this.element = e2), this.style = this.element.style, this.style.position = "absolute", this.style[n.ENV.VENDOR_PREFIX + "TransformOrigin"] = "0px 0px", i2._debug && (this.style.border = "1px solid blue", this.style.margin = "-1px");
      var s2 = this;
      this._setDomTarget = function() {
        s2.layer._touchEventTarget = s2.targetNode;
      }, this._attachEvent();
    }, getDomElement: function() {
      return this.element;
    }, getDomElementAsNext: function() {
      return this.element;
    }, getNextManager: function(t2) {
      var e2 = this.targetNode.parentNode.childNodes.indexOf(t2.targetNode);
      return e2 !== this.targetNode.parentNode.childNodes.length - 1 ? this.targetNode.parentNode.childNodes[e2 + 1]._domManager : null;
    }, addManager: function(t2, e2) {
      var n2;
      e2 && (n2 = e2.getDomElementAsNext());
      var i2 = t2.getDomElement();
      i2 instanceof Array ? i2.forEach(function(t3) {
        n2 ? this.element.insertBefore(t3, n2) : this.element.appendChild(t3);
      }, this) : n2 ? this.element.insertBefore(i2, n2) : this.element.appendChild(i2), this.setLayer(this.layer);
    }, removeManager: function(t2) {
      t2 instanceof n.DomlessManager ? t2._domRef.forEach(function(t3) {
        this.element.removeChild(t3);
      }, this) : this.element.removeChild(t2.element), this.setLayer(this.layer);
    }, setLayer: function(t2) {
      this.layer = t2;
      var e2, n2 = this.targetNode;
      if (n2.childNodes)
        for (var i2 = 0, s2 = n2.childNodes.length; s2 > i2; i2++)
          e2 = n2.childNodes[i2]._domManager, e2 && e2.setLayer(t2);
    }, render: function(t2) {
      var e2 = this.targetNode, i2 = n.Matrix.instance, s2 = i2.stack, r2 = [];
      i2.makeTransformMatrix(e2, r2), i2.multiply(s2[s2.length - 1], r2, r2), i2.multiply(t2, r2, t2), e2._matrix = t2;
      var a2 = "number" == typeof e2._originX ? e2._originX : e2.width / 2 || 0, o2 = "number" == typeof e2._originY ? e2._originY : e2.height / 2 || 0, h2 = [a2, o2];
      i2.multiplyVec(r2, h2, h2), e2._offsetX = h2[0] - a2, e2._offsetY = h2[1] - o2, !e2.parentNode || e2.parentNode instanceof n.Group || (e2._offsetX += e2.parentNode._offsetX, e2._offsetY += e2.parentNode._offsetY), e2._dirty && (this.style[n.ENV.VENDOR_PREFIX + "Transform"] = "matrix(" + r2[0].toFixed(10) + "," + r2[1].toFixed(10) + "," + r2[2].toFixed(10) + "," + r2[3].toFixed(10) + "," + r2[4].toFixed(10) + "," + r2[5].toFixed(10) + ")"), this.domRender();
    }, domRender: function() {
      var t2 = this.targetNode;
      t2._style || (t2._style = {}), t2.__styleStatus || (t2.__styleStatus = {}), null !== t2.width && (t2._style.width = t2.width + "px"), null !== t2.height && (t2._style.height = t2.height + "px"), t2._style.opacity = t2._opacity, t2._style["background-color"] = t2._backgroundColor, t2._visible !== e && (t2._style.display = t2._visible ? "block" : "none"), "function" == typeof t2.domRender && t2.domRender(this.element);
      var n2;
      for (var i2 in t2._style)
        n2 = t2._style[i2], t2.__styleStatus[i2] !== n2 && null != n2 && (this.style.setProperty(i2, "" + n2), t2.__styleStatus[i2] = n2);
    }, _attachEvent: function() {
      n.ENV.TOUCH_ENABLED && this.element.addEventListener("touchstart", this._setDomTarget, true), this.element.addEventListener("mousedown", this._setDomTarget, true);
    }, _detachEvent: function() {
      n.ENV.TOUCH_ENABLED && this.element.removeEventListener("touchstart", this._setDomTarget, true), this.element.removeEventListener("mousedown", this._setDomTarget, true);
    }, remove: function() {
      this._detachEvent(), this.element = this.style = this.targetNode = null;
    } }), n.DomlessManager = n.Class.create({ initialize: function(t2) {
      this._domRef = [], this.targetNode = t2;
    }, _register: function(t2, e2) {
      var n2 = this._domRef.indexOf(e2);
      t2 instanceof Array ? -1 === n2 ? Array.prototype.push.apply(this._domRef, t2) : Array.prototype.splice.apply(this._domRef, [n2, 0].concat(t2)) : -1 === n2 ? this._domRef.push(t2) : this._domRef.splice(n2, 0, t2);
    }, getNextManager: function(t2) {
      var e2 = this.targetNode.parentNode.childNodes.indexOf(t2.targetNode);
      return e2 !== this.targetNode.parentNode.childNodes.length - 1 ? this.targetNode.parentNode.childNodes[e2 + 1]._domManager : null;
    }, getDomElement: function() {
      var t2 = [];
      return this.targetNode.childNodes.forEach(function(e2) {
        t2 = t2.concat(e2._domManager.getDomElement());
      }), t2;
    }, getDomElementAsNext: function() {
      if (this._domRef.length)
        return this._domRef[0];
      var t2 = this.getNextManager(this);
      return t2 ? t2.element : null;
    }, addManager: function(t2, e2) {
      var i2 = this.targetNode.parentNode;
      i2 && (null === e2 && (e2 = this.getNextManager(this)), i2 instanceof n.Scene ? i2._layers.Dom._domManager.addManager(t2, e2) : i2._domManager.addManager(t2, e2));
      var s2 = e2 ? e2.getDomElementAsNext() : null;
      this._register(t2.getDomElement(), s2), this.setLayer(this.layer);
    }, removeManager: function(t2) {
      var e2, n2 = this._domRef.indexOf(t2.element);
      -1 !== n2 && (e2 = this._domRef[n2], e2.parentNode.removeChild(e2), this._domRef.splice(n2, 1)), this.setLayer(this.layer);
    }, setLayer: function(t2) {
      this.layer = t2;
      var e2, n2 = this.targetNode;
      if (n2.childNodes)
        for (var i2 = 0, s2 = n2.childNodes.length; s2 > i2; i2++)
          e2 = n2.childNodes[i2]._domManager, e2 && e2.setLayer(t2);
    }, render: function(t2) {
      var e2 = n.Matrix.instance, i2 = e2.stack, s2 = this.targetNode, r2 = [];
      e2.makeTransformMatrix(s2, r2), e2.multiply(i2[i2.length - 1], r2, r2), e2.multiply(t2, r2, t2), s2._matrix = t2;
      var a2 = "number" == typeof s2._originX ? s2._originX : s2.width / 2 || 0, o2 = "number" == typeof s2._originY ? s2._originY : s2.height / 2 || 0, h2 = [a2, o2];
      e2.multiplyVec(r2, h2, h2), s2._offsetX = h2[0] - a2, s2._offsetY = h2[1] - o2, i2.push(r2);
    }, remove: function() {
      this._domRef = [], this.targetNode = null;
    } }), n.DomLayer = n.Class.create(n.Group, { initialize: function() {
      var t2 = n.Core.instance;
      n.Group.call(this), this._touchEventTarget = null, this._element = document.createElement("div"), this._element.style.position = "absolute", this._domManager = new n.DomManager(this, this._element), this._domManager.layer = this, this.width = t2.width, this.height = t2.height;
      var e2 = [n.Event.TOUCH_START, n.Event.TOUCH_MOVE, n.Event.TOUCH_END];
      e2.forEach(function(t3) {
        this.addEventListener(t3, function(t4) {
          this._scene && this._scene.dispatchEvent(t4);
        });
      }, this);
      var i2 = function(t3) {
        var e3 = t3.node, r2 = t3.next, a2 = t3.target, o2 = r2 ? r2._domManager : null;
        n.DomLayer._attachDomManager(e3, i2, s2), a2._domManager.addManager(e3._domManager, o2);
        var h2 = new n.Event(n.Event.RENDER);
        e3._dirty = true, a2._domManager.layer._rendering(e3, h2);
      }, s2 = function(t3) {
        var e3 = t3.node, r2 = t3.target;
        r2._domManager.removeManager(e3._domManager), n.DomLayer._detachDomManager(e3, i2, s2);
      };
      this.addEventListener("childremoved", s2), this.addEventListener("childadded", i2);
    }, width: { get: function() {
      return this._width;
    }, set: function(t2) {
      this._width = t2, this._element.style.width = t2 + "px";
    } }, height: { get: function() {
      return this._height;
    }, set: function(t2) {
      this._height = t2, this._element.style.height = t2 + "px";
    } }, addChild: function(t2) {
      this.childNodes.push(t2), t2.parentNode = this;
      var e2 = new n.Event("childadded");
      if (e2.node = t2, e2.next = null, this.dispatchEvent(e2), t2.dispatchEvent(new n.Event("added")), this.scene) {
        t2.scene = this.scene;
        var i2 = new n.Event("addedtoscene");
        t2.dispatchEvent(i2);
      }
    }, insertBefore: function(t2, e2) {
      var i2 = this.childNodes.indexOf(e2);
      if (-1 !== i2) {
        this.childNodes.splice(i2, 0, t2), t2.parentNode = this;
        var s2 = new n.Event("childadded");
        if (s2.node = t2, s2.next = e2, this.dispatchEvent(s2), t2.dispatchEvent(new n.Event("added")), this.scene) {
          t2.scene = this.scene;
          var r2 = new n.Event("addedtoscene");
          t2.dispatchEvent(r2);
        }
      } else
        this.addChild(t2);
    }, _startRendering: function() {
      this.addEventListener("exitframe", this._onexitframe), this._onexitframe();
    }, _stopRendering: function() {
      this.removeEventListener("exitframe", this._onexitframe), this._onexitframe();
    }, _onexitframe: function() {
      this._rendering(this, new n.Event(n.Event.RENDER));
    }, _rendering: function(t2, e2, i2) {
      var s2;
      if (i2 || (i2 = [1, 0, 0, 1, 0, 0]), t2.dispatchEvent(e2), t2._domManager.render(i2), t2.childNodes)
        for (var r2 = 0, a2 = t2.childNodes.length; a2 > r2; r2++)
          s2 = t2.childNodes[r2], this._rendering(s2, e2, i2.slice());
      t2._domManager instanceof n.DomlessManager && n.Matrix.instance.stack.pop(), t2._dirty = false;
    }, _determineEventTarget: function() {
      var t2 = this._touchEventTarget;
      return this._touchEventTarget = null, t2 === this ? null : t2;
    } }), n.DomLayer._attachDomManager = function(t2, e2, i2) {
      var s2;
      if (t2._domManager || (t2.addEventListener("childadded", e2), t2.addEventListener("childremoved", i2), t2._domManager = t2 instanceof n.Group ? new n.DomlessManager(t2) : t2._element ? new n.DomManager(t2, t2._element) : new n.DomManager(t2, "div")), t2.childNodes)
        for (var r2 = 0, a2 = t2.childNodes.length; a2 > r2; r2++)
          s2 = t2.childNodes[r2], n.DomLayer._attachDomManager(s2, e2, i2), t2._domManager.addManager(s2._domManager, null);
    }, n.DomLayer._detachDomManager = function(t2, e2, i2) {
      var s2;
      if (t2.removeEventListener("childadded", e2), t2.removeEventListener("childremoved", i2), t2.childNodes)
        for (var r2 = 0, a2 = t2.childNodes.length; a2 > r2; r2++)
          s2 = t2.childNodes[r2], t2._domManager.removeManager(s2._domManager, null), n.DomLayer._detachDomManager(s2, e2, i2);
      t2._domManager.remove(), delete t2._domManager;
    }, n.CanvasLayer = n.Class.create(n.Group, { initialize: function() {
      var t2 = n.Core.instance;
      n.Group.call(this), this._cvsCache = { matrix: [1, 0, 0, 1, 0, 0], detectColor: "#000000" }, this._cvsCache.layer = this, this._element = document.createElement("canvas"), this._element.style.position = "absolute", this._element.style.left = this._element.style.top = "0px", this._detect = document.createElement("canvas"), this._detect.style.position = "absolute", this._lastDetected = 0, this.context = this._element.getContext("2d"), this._dctx = this._detect.getContext("2d"), this._setImageSmoothingEnable(), this._colorManager = new n.DetectColorManager(16, 256), this.width = t2.width, this.height = t2.height;
      var e2 = [n.Event.TOUCH_START, n.Event.TOUCH_MOVE, n.Event.TOUCH_END];
      e2.forEach(function(t3) {
        this.addEventListener(t3, function(t4) {
          this._scene && this._scene.dispatchEvent(t4);
        });
      }, this);
      var i2 = function(t3) {
        var e3, r2 = t3.node, a2 = t3.target;
        e3 = a2 instanceof n.CanvasLayer ? a2._scene._layers.Canvas : a2.scene._layers.Canvas, n.CanvasLayer._attachCache(r2, e3, i2, s2);
        var o2 = new n.Event(n.Event.RENDER);
        a2._dirty && a2._updateCoordinate(), r2._dirty = true, n.Matrix.instance.stack.push(a2._matrix), n.CanvasRenderer.instance.render(e3.context, r2, o2), n.Matrix.instance.stack.pop(a2._matrix);
      }, s2 = function(t3) {
        var e3, r2 = t3.node, a2 = t3.target;
        e3 = a2 instanceof n.CanvasLayer ? a2._scene._layers.Canvas : a2.scene._layers.Canvas, n.CanvasLayer._detachCache(r2, e3, i2, s2);
      };
      this.addEventListener("childremoved", s2), this.addEventListener("childadded", i2);
    }, width: { get: function() {
      return this._width;
    }, set: function(t2) {
      this._width = t2, this._element.width = this._detect.width = t2, this._setImageSmoothingEnable();
    } }, height: { get: function() {
      return this._height;
    }, set: function(t2) {
      this._height = t2, this._element.height = this._detect.height = t2, this._setImageSmoothingEnable();
    } }, addChild: function(t2) {
      this.childNodes.push(t2), t2.parentNode = this;
      var e2 = new n.Event("childadded");
      e2.node = t2, e2.next = null, this.dispatchEvent(e2), t2.dispatchEvent(new n.Event("added"));
    }, insertBefore: function(t2, e2) {
      var i2 = this.childNodes.indexOf(e2);
      if (-1 !== i2) {
        this.childNodes.splice(i2, 0, t2), t2.parentNode = this;
        var s2 = new n.Event("childadded");
        s2.node = t2, s2.next = e2, this.dispatchEvent(s2), t2.dispatchEvent(new n.Event("added"));
      } else
        this.addChild(t2);
    }, _startRendering: function() {
      this.addEventListener("exitframe", this._onexitframe), this._onexitframe();
    }, _stopRendering: function() {
      this.removeEventListener("exitframe", this._onexitframe), this._onexitframe();
    }, _onexitframe: function() {
      var t2 = n.Core.instance, e2 = this.context;
      e2.clearRect(0, 0, t2.width, t2.height);
      var i2 = new n.Event(n.Event.RENDER);
      n.CanvasRenderer.instance.render(e2, this, i2);
    }, _determineEventTarget: function(t2) {
      return this._getEntityByPosition(t2.x, t2.y);
    }, _getEntityByPosition: function(t2, e2) {
      var i2 = n.Core.instance, s2 = this._dctx;
      this._lastDetected < i2.frame && (s2.clearRect(0, 0, this.width, this.height), n.CanvasRenderer.instance.detectRender(s2, this), this._lastDetected = i2.frame);
      var r2 = n.ENV.COLOR_DETECTION_LEVEL - 1, a2 = s2.getImageData(t2 - r2, e2 - r2, 1 + 2 * r2, 1 + 2 * r2).data;
      return this._colorManager.getSpriteByColors(a2);
    }, _setImageSmoothingEnable: function() {
      this._dctx.imageSmoothingEnabled = this._dctx.msImageSmoothingEnabled = this._dctx.mozImageSmoothingEnabled = this._dctx.webkitImageSmoothingEnabled = false;
    } }), n.CanvasLayer._attachCache = function(t2, e2, i2, s2) {
      var r2;
      if (t2._cvsCache || (t2._cvsCache = {}, t2._cvsCache.matrix = [1, 0, 0, 1, 0, 0], t2._cvsCache.detectColor = "rgba(" + e2._colorManager.attachDetectColor(t2) + ")", t2.addEventListener("childadded", i2), t2.addEventListener("childremoved", s2)), t2.childNodes)
        for (var a2 = 0, o2 = t2.childNodes.length; o2 > a2; a2++)
          r2 = t2.childNodes[a2], n.CanvasLayer._attachCache(r2, e2, i2, s2);
    }, n.CanvasLayer._detachCache = function(t2, e2, i2, s2) {
      var r2;
      if (t2._cvsCache && (e2._colorManager.detachDetectColor(t2), t2.removeEventListener("childadded", i2), t2.removeEventListener("childremoved", s2), delete t2._cvsCache), t2.childNodes)
        for (var a2 = 0, o2 = t2.childNodes.length; o2 > a2; a2++)
          r2 = t2.childNodes[a2], n.CanvasLayer._detachCache(r2, e2, i2, s2);
    }, n.CanvasRenderer = n.Class.create({ render: function(t2, i2, s2) {
      var r2, a2, o2;
      if (t2.save(), i2.dispatchEvent(s2), this.transform(t2, i2), (i2._visible === e || i2._visible) && (r2 = i2.width, a2 = i2.height, i2.compositeOperation && (t2.globalCompositeOperation = i2.compositeOperation), t2.globalAlpha = "number" == typeof i2._opacity ? i2._opacity : 1, i2._backgroundColor && (t2.fillStyle = i2._backgroundColor, t2.fillRect(0, 0, r2, a2)), i2.cvsRender && i2.cvsRender(t2), n.Core.instance._debug && i2._debugColor && (t2.strokeStyle = i2._debugColor, t2.strokeRect(0, 0, r2, a2)), i2._clipping && (t2.beginPath(), t2.rect(0, 0, r2, a2), t2.clip()), i2.childNodes))
        for (var h2 = 0, c2 = i2.childNodes.length; c2 > h2; h2++)
          o2 = i2.childNodes[h2], this.render(t2, o2, s2);
      t2.restore(), n.Matrix.instance.stack.pop();
    }, detectRender: function(t2, i2) {
      var s2, r2, a2;
      if (i2._visible === e || i2._visible) {
        if (s2 = i2.width, r2 = i2.height, t2.save(), this.transform(t2, i2), t2.fillStyle = i2._cvsCache.detectColor, i2._touchEnabled && (i2.detectRender ? i2.detectRender(t2) : t2.fillRect(0, 0, s2, r2)), i2._clipping && (t2.beginPath(), t2.rect(0, 0, s2, r2), t2.clip()), i2.childNodes)
          for (var o2 = 0, h2 = i2.childNodes.length; h2 > o2; o2++)
            a2 = i2.childNodes[o2], this.detectRender(t2, a2);
        t2.restore(), n.Matrix.instance.stack.pop();
      }
    }, transform: function(t2, e2) {
      var i2, s2, r2, a2, o2 = n.Matrix.instance, h2 = o2.stack;
      e2._dirty ? (o2.makeTransformMatrix(e2, e2._cvsCache.matrix), i2 = [], o2.multiply(h2[h2.length - 1], e2._cvsCache.matrix, i2), e2._matrix = i2, s2 = "number" == typeof e2._originX ? e2._originX : e2._width / 2 || 0, r2 = "number" == typeof e2._originY ? e2._originY : e2._height / 2 || 0, a2 = [s2, r2], o2.multiplyVec(i2, a2, a2), e2._offsetX = a2[0] - s2, e2._offsetY = a2[1] - r2, e2._dirty = false) : i2 = e2._matrix, h2.push(i2), t2.setTransform.apply(t2, i2);
    } }), n.CanvasRenderer.instance = new n.CanvasRenderer(), n.Scene = n.Class.create(n.Group, { initialize: function() {
      var t2 = n.Core.instance;
      n.Group.call(this), this.scene = this, this._backgroundColor = null, this._element = document.createElement("div"), this._element.style.position = "absolute", this._element.style.overflow = "hidden", this._element.style[n.ENV.VENDOR_PREFIX + "TransformOrigin"] = "0 0", this._layers = {}, this._layerPriority = [], this.addEventListener(n.Event.CHILD_ADDED, this._onchildadded), this.addEventListener(n.Event.CHILD_REMOVED, this._onchildremoved), this.addEventListener(n.Event.ENTER, this._onenter), this.addEventListener(n.Event.EXIT, this._onexit);
      var e2 = this;
      this._dispatchExitframe = function() {
        var t3;
        for (var i2 in e2._layers)
          t3 = e2._layers[i2], t3.dispatchEvent(new n.Event(n.Event.EXIT_FRAME));
      }, this.addEventListener(n.Event.CORE_RESIZE, this._oncoreresize), this._oncoreresize(t2);
    }, x: { get: function() {
      return this._x;
    }, set: function(t2) {
      this._x = t2;
      for (var e2 in this._layers)
        this._layers[e2].x = t2;
    } }, y: { get: function() {
      return this._y;
    }, set: function(t2) {
      this._y = t2;
      for (var e2 in this._layers)
        this._layers[e2].y = t2;
    } }, width: { get: function() {
      return this._width;
    }, set: function(t2) {
      this._width = t2;
      for (var e2 in this._layers)
        this._layers[e2].width = t2;
    } }, height: { get: function() {
      return this._height;
    }, set: function(t2) {
      this._height = t2;
      for (var e2 in this._layers)
        this._layers[e2].height = t2;
    } }, rotation: { get: function() {
      return this._rotation;
    }, set: function(t2) {
      this._rotation = t2;
      for (var e2 in this._layers)
        this._layers[e2].rotation = t2;
    } }, scaleX: { get: function() {
      return this._scaleX;
    }, set: function(t2) {
      this._scaleX = t2;
      for (var e2 in this._layers)
        this._layers[e2].scaleX = t2;
    } }, scaleY: { get: function() {
      return this._scaleY;
    }, set: function(t2) {
      this._scaleY = t2;
      for (var e2 in this._layers)
        this._layers[e2].scaleY = t2;
    } }, backgroundColor: { get: function() {
      return this._backgroundColor;
    }, set: function(t2) {
      this._backgroundColor = this._element.style.backgroundColor = t2;
    } }, remove: function() {
      for (this.clearEventListener(); this.childNodes.length > 0; )
        this.childNodes[0].remove();
      return n.Core.instance.removeScene(this);
    }, _oncoreresize: function(t2) {
      this._element.style.width = t2.width + "px", this.width = t2.width, this._element.style.height = t2.height + "px", this.height = t2.height, this._element.style[n.ENV.VENDOR_PREFIX + "Transform"] = "scale(" + t2.scale + ")";
      for (var e2 in this._layers)
        this._layers[e2].dispatchEvent(t2);
    }, addLayer: function(t2, e2) {
      var i2 = n.Core.instance;
      if (!this._layers[t2]) {
        var s2 = new n[t2 + "Layer"]();
        i2.currentScene === this && s2._startRendering(), this._layers[t2] = s2;
        var r2 = s2._element;
        if ("number" == typeof e2) {
          var a2 = this._element.childNodes[e2];
          a2 ? this._element.insertBefore(r2, a2) : this._element.appendChild(r2), this._layerPriority.splice(e2, 0, t2);
        } else
          this._element.appendChild(r2), this._layerPriority.push(t2);
        s2._scene = this;
      }
    }, _determineEventTarget: function(t2) {
      for (var e2, n2, i2 = this._layerPriority.length - 1; i2 >= 0 && (e2 = this._layers[this._layerPriority[i2]], !(n2 = e2._determineEventTarget(t2))); i2--)
        ;
      return n2 || (n2 = this), n2;
    }, _onchildadded: function(t2) {
      var e2, n2, i2 = t2.node, s2 = t2.next;
      i2._element ? (e2 = "Dom", n2 = 1) : (e2 = "Canvas", n2 = 0), this._layers[e2] || this.addLayer(e2, n2), i2._layer = this._layers[e2], this._layers[e2].insertBefore(i2, s2), i2.parentNode = this;
    }, _onchildremoved: function(t2) {
      var e2 = t2.node;
      e2._layer.removeChild(e2), e2._layer = null;
    }, _onenter: function() {
      for (var t2 in this._layers)
        this._layers[t2]._startRendering();
      n.Core.instance.addEventListener("exitframe", this._dispatchExitframe);
    }, _onexit: function() {
      for (var t2 in this._layers)
        this._layers[t2]._stopRendering();
      n.Core.instance.removeEventListener("exitframe", this._dispatchExitframe);
    } }), n.LoadingScene = n.Class.create(n.Scene, { initialize: function() {
      n.Scene.call(this), this.backgroundColor = "#000";
      var t2 = 0 | 0.4 * this.width, e2 = 0 | 0.05 * this.width, i2 = 0 | 0.03 * t2, s2 = new n.Sprite(t2, e2);
      s2.disableCollection(), s2.x = (this.width - t2) / 2, s2.y = (this.height - e2) / 2;
      var r2 = new n.Surface(t2, e2);
      r2.context.fillStyle = "#fff", r2.context.fillRect(0, 0, t2, e2), r2.context.fillStyle = "#000", r2.context.fillRect(i2, i2, t2 - 2 * i2, e2 - 2 * i2), s2.image = r2;
      var a2 = 0, o2 = 0;
      this.addEventListener("progress", function(t3) {
        a2 = 1 * (t3.loaded / t3.total);
      }), s2.addEventListener("enterframe", function() {
        o2 *= 0.9, o2 += 0.1 * a2, r2.context.fillStyle = "#fff", r2.context.fillRect(i2, 0, (t2 - 2 * i2) * o2, e2);
      }), this.addChild(s2), this.addEventListener("load", function(t3) {
        var e3 = n.Core.instance;
        e3.removeScene(e3.loadingScene), e3.dispatchEvent(t3);
      });
    } }), n.CanvasScene = n.Class.create(n.Scene, { initialize: function() {
      n.Scene.call(this), this.addLayer("Canvas");
    }, _determineEventTarget: function(t2) {
      var e2 = this._layers.Canvas._determineEventTarget(t2);
      return e2 || (e2 = this), e2;
    }, _onchildadded: function(t2) {
      var e2 = t2.node, n2 = t2.next;
      e2._layer = this._layers.Canvas, this._layers.Canvas.insertBefore(e2, n2);
    }, _onenter: function() {
      this._layers.Canvas._startRendering(), n.Core.instance.addEventListener("exitframe", this._dispatchExitframe);
    }, _onexit: function() {
      this._layers.Canvas._stopRendering(), n.Core.instance.removeEventListener("exitframe", this._dispatchExitframe);
    } }), n.DOMScene = n.Class.create(n.Scene, { initialize: function() {
      n.Scene.call(this), this.addLayer("Dom");
    }, _determineEventTarget: function(t2) {
      var e2 = this._layers.Dom._determineEventTarget(t2);
      return e2 || (e2 = this), e2;
    }, _onchildadded: function(t2) {
      var e2 = t2.node, n2 = t2.next;
      e2._layer = this._layers.Dom, this._layers.Dom.insertBefore(e2, n2);
    }, _onenter: function() {
      this._layers.Dom._startRendering(), n.Core.instance.addEventListener("exitframe", this._dispatchExitframe);
    }, _onexit: function() {
      this._layers.Dom._stopRendering(), n.Core.instance.removeEventListener("exitframe", this._dispatchExitframe);
    } }), n.Surface = n.Class.create(n.EventTarget, { initialize: function(t2, e2) {
      n.EventTarget.call(this);
      var i2 = n.Core.instance;
      this.width = Math.ceil(t2), this.height = Math.ceil(e2), this.context = null;
      var s2 = "enchant-surface" + i2._surfaceID++;
      document.getCSSCanvasContext ? (this.context = document.getCSSCanvasContext("2d", s2, t2, e2), this._element = this.context.canvas, this._css = "-webkit-canvas(" + s2 + ")", this.context) : document.mozSetImageElement ? (this._element = document.createElement("canvas"), this._element.width = t2, this._element.height = e2, this._css = "-moz-element(#" + s2 + ")", this.context = this._element.getContext("2d"), document.mozSetImageElement(s2, this._element)) : (this._element = document.createElement("canvas"), this._element.width = t2, this._element.height = e2, this._element.style.position = "absolute", this.context = this._element.getContext("2d"), n.ENV.CANVAS_DRAWING_METHODS.forEach(function(t3) {
        var e3 = this.context[t3];
        this.context[t3] = function() {
          e3.apply(this, arguments), this._dirty = true;
        };
      }, this));
    }, getPixel: function(t2, e2) {
      return this.context.getImageData(t2, e2, 1, 1).data;
    }, setPixel: function(t2, e2, n2, i2, s2, r2) {
      var a2 = this.context.createImageData(1, 1);
      a2.data[0] = n2, a2.data[1] = i2, a2.data[2] = s2, a2.data[3] = r2, this.context.putImageData(a2, t2, e2);
    }, clear: function() {
      this.context.clearRect(0, 0, this.width, this.height);
    }, draw: function(t2) {
      if (t2 = t2._element, 1 === arguments.length)
        this.context.drawImage(t2, 0, 0);
      else {
        var e2 = arguments;
        e2[0] = t2, this.context.drawImage.apply(this.context, e2);
      }
    }, clone: function() {
      var t2 = new n.Surface(this.width, this.height);
      return t2.draw(this), t2;
    }, toDataURL: function() {
      var t2 = this._element.src;
      return t2 ? "data:" === t2.slice(0, 5) ? t2 : this.clone().toDataURL() : this._element.toDataURL();
    } }), n.Surface.load = function(t2, e2, i2) {
      var s2 = new Image(), r2 = Object.create(n.Surface.prototype, { context: { value: null }, _css: { value: "url(" + t2 + ")" }, _element: { value: s2 } });
      return n.EventTarget.call(r2), i2 = i2 || function() {
      }, r2.addEventListener("load", e2), r2.addEventListener("error", i2), s2.onerror = function() {
        var t3 = new n.Event(n.Event.ERROR);
        t3.message = "Cannot load an asset: " + s2.src, n.Core.instance.dispatchEvent(t3), r2.dispatchEvent(t3);
      }, s2.onload = function() {
        r2.width = s2.width, r2.height = s2.height, r2.dispatchEvent(new n.Event("load"));
      }, s2.src = t2, r2;
    }, n.Surface._staticCanvas2DContext = document.createElement("canvas").getContext("2d"), n.Surface._getPattern = function(t2, e2) {
      return (!t2._pattern || e2) && (t2._pattern = this._staticCanvas2DContext.createPattern(t2._element, "repeat")), t2._pattern;
    }, t.Deferred ? n.Deferred = t.Deferred : (n.Deferred = n.Class.create({ initialize: function() {
      this._succ = this._fail = this._next = this._id = null, this._tail = this;
    }, next: function(t2) {
      var e2 = new n.Deferred();
      return e2._succ = t2, this._add(e2);
    }, error: function(t2) {
      var e2 = new n.Deferred();
      return e2._fail = t2, this._add(e2);
    }, _add: function(t2) {
      return this._tail._next = t2, this._tail = t2, this;
    }, call: function(t2) {
      for (var e2, i2 = this; i2 && !i2._succ; )
        i2 = i2._next;
      if (i2 instanceof n.Deferred) {
        try {
          e2 = i2._succ(t2);
        } catch (s2) {
          return i2.fail(s2);
        }
        e2 instanceof n.Deferred ? n.Deferred._insert(i2, e2) : i2._next instanceof n.Deferred && i2._next.call(e2);
      }
    }, fail: function(t2) {
      for (var e2, i2, s2 = this; s2 && !s2._fail; )
        s2 = s2._next;
      if (!(s2 instanceof n.Deferred))
        throw t2 instanceof Error ? t2 : (i2 = Error("failed in Deferred"), i2.arg = t2, i2);
      e2 = s2._fail(t2), s2.call(e2);
    } }), n.Deferred._insert = function(t2, e2) {
      t2._next instanceof n.Deferred && (e2._tail._next = t2._next), t2._next = e2;
    }, n.Deferred.next = function(t2) {
      var e2 = new n.Deferred().next(t2);
      return e2._id = setTimeout(function() {
        e2.call();
      }, 0), e2;
    }, n.Deferred.parallel = function(t2) {
      var e2 = new n.Deferred();
      e2._id = setTimeout(function() {
        e2.call();
      }, 0);
      var i2 = 0, s2 = t2 instanceof Array ? [] : {}, r2 = new n.Deferred();
      for (var a2 in t2)
        t2.hasOwnProperty(a2) && (i2++, function(t3, e3) {
          t3.next(function(t4) {
            i2--, s2[e3] = t4, 0 >= i2 && r2.call(s2);
          }).error(function(t4) {
            r2.fail(t4);
          }), "number" == typeof t3._id && clearTimeout(t3._id), t3._id = setTimeout(function() {
            t3.call();
          }, 0);
        }(t2[a2], a2));
      return i2 || (r2._id = setTimeout(function() {
        r2.call(s2);
      }, 0)), e2.next(function() {
        return r2;
      });
    }), n.DOMSound = n.Class.create(n.EventTarget, { initialize: function() {
      throw n.EventTarget.call(this), this.duration = 0, Error("Illegal Constructor");
    }, play: function() {
      this._element && this._element.play();
    }, pause: function() {
      this._element && this._element.pause();
    }, stop: function() {
      this.pause(), this.currentTime = 0;
    }, clone: function() {
      var t2;
      if (this._element instanceof Audio)
        t2 = Object.create(n.DOMSound.prototype, { _element: { value: this._element.cloneNode(false) }, duration: { value: this.duration } });
      else {
        if (n.ENV.USE_FLASH_SOUND)
          return this;
        t2 = Object.create(n.DOMSound.prototype);
      }
      return n.EventTarget.call(t2), t2;
    }, currentTime: { get: function() {
      return this._element ? this._element.currentTime : 0;
    }, set: function(t2) {
      this._element && (this._element.currentTime = t2);
    } }, volume: { get: function() {
      return this._element ? this._element.volume : 1;
    }, set: function(t2) {
      this._element && (this._element.volume = t2);
    } } }), n.DOMSound.load = function(e2, i2, s2, r2) {
      if (null == i2) {
        var a2 = n.Core.findExt(e2);
        i2 = a2 ? "audio/" + a2 : "";
      }
      i2 = i2.replace("mp3", "mpeg").replace("m4a", "mp4"), s2 = s2 || function() {
      }, r2 = r2 || function() {
      };
      var o2 = Object.create(n.DOMSound.prototype);
      n.EventTarget.call(o2), o2.addEventListener("load", s2), o2.addEventListener("error", r2);
      var h2 = new Audio();
      if (!n.ENV.SOUND_ENABLED_ON_MOBILE_SAFARI && "webkit" === n.ENV.VENDOR_PREFIX && n.ENV.TOUCH_ENABLED)
        t.setTimeout(function() {
          o2.dispatchEvent(new n.Event("load"));
        }, 0);
      else if (!n.ENV.USE_FLASH_SOUND && h2.canPlayType(i2))
        h2.addEventListener("canplaythrough", function c2() {
          o2.duration = h2.duration, o2.dispatchEvent(new n.Event("load")), h2.removeEventListener("canplaythrough", c2);
        }, false), h2.src = e2, h2.load(), h2.autoplay = false, h2.onerror = function() {
          var t2 = new n.Event(n.Event.ERROR);
          t2.message = "Cannot load an asset: " + h2.src, n.Core.instance.dispatchEvent(t2), o2.dispatchEvent(t2);
        }, o2._element = h2;
      else if ("audio/mpeg" === i2) {
        var u2 = document.createElement("embed"), d = "enchant-audio" + n.Core.instance._soundID++;
        u2.width = u2.height = 1, u2.name = d, u2.src = "sound.swf?id=" + d + "&src=" + e2, u2.allowscriptaccess = "always", u2.style.position = "absolute", u2.style.left = "-1px", o2.addEventListener("load", function() {
          Object.defineProperties(u2, { currentTime: { get: function() {
            return u2.getCurrentTime();
          }, set: function(t2) {
            u2.setCurrentTime(t2);
          } }, volume: { get: function() {
            return u2.getVolume();
          }, set: function(t2) {
            u2.setVolume(t2);
          } } }), o2._element = u2, o2.duration = u2.getDuration();
        }), n.Core.instance._element.appendChild(u2), n.DOMSound[d] = o2;
      } else
        t.setTimeout(function() {
          o2.dispatchEvent(new n.Event("load"));
        }, 0);
      return o2;
    }, t.AudioContext = t.AudioContext || t.webkitAudioContext || t.mozAudioContext || t.msAudioContext || t.oAudioContext, n.WebAudioSound = n.Class.create(n.EventTarget, { initialize: function() {
      if (!t.AudioContext)
        throw Error("This browser does not support WebAudio API.");
      n.EventTarget.call(this), n.WebAudioSound.audioContext || (n.WebAudioSound.audioContext = new t.AudioContext(), n.WebAudioSound.destination = n.WebAudioSound.audioContext.destination), this.context = n.WebAudioSound.audioContext, this.src = this.context.createBufferSource(), this.buffer = null, this._volume = 1, this._currentTime = 0, this._state = 0, this.connectTarget = n.WebAudioSound.destination;
    }, play: function(t2) {
      1 !== this._state || t2 || this.src.disconnect(), 2 !== this._state && (this._currentTime = 0);
      var e2 = this._currentTime, n2 = this.context;
      this.src = n2.createBufferSource(), this._gain = null != n2.createGain ? n2.createGain() : n2.createGainNode(), this.src.buffer = this.buffer, this._gain.gain.value = this._volume, this.src.connect(this._gain), this._gain.connect(this.connectTarget), null != this.src.start ? this.src.start(0, e2, this.buffer.duration - e2 - 1192e-10) : this.src.noteGrainOn(0, e2, this.buffer.duration - e2 - 1192e-10), this._startTime = n2.currentTime - this._currentTime, this._state = 1;
    }, pause: function() {
      var t2 = this.currentTime;
      t2 !== this.duration && (null != this.src.stop ? this.src.stop(0) : this.src.noteOff(0), this._currentTime = t2, this._state = 2);
    }, stop: function() {
      null != this.src.stop ? this.src.stop(0) : this.src.noteOff(0), this._state = 0;
    }, clone: function() {
      var t2 = new n.WebAudioSound();
      return t2.buffer = this.buffer, t2;
    }, duration: { get: function() {
      return this.buffer ? this.buffer.duration : 0;
    } }, volume: { get: function() {
      return this._volume;
    }, set: function(t2) {
      t2 = Math.max(0, Math.min(1, t2)), this._volume = t2, this.src && (this._gain.gain.value = t2);
    } }, currentTime: { get: function() {
      return Math.max(0, Math.min(this.duration, this.src.context.currentTime - this._startTime));
    }, set: function(t2) {
      this._currentTime = t2, 2 !== this._state && this.play(false);
    } } }), n.WebAudioSound.load = function(t2, e2, i2, s2) {
      function r2() {
        var e3 = new n.Event(n.Event.ERROR);
        e3.message = "Cannot load an asset: " + t2, n.Core.instance.dispatchEvent(e3), o2.dispatchEvent(e3);
      }
      var a2 = new Audio().canPlayType(e2), o2 = new n.WebAudioSound();
      i2 = i2 || function() {
      }, s2 = s2 || function() {
      }, o2.addEventListener(n.Event.LOAD, i2), o2.addEventListener(n.Event.ERROR, s2);
      var h2, c2;
      return "maybe" === a2 || "probably" === a2 ? (h2 = n.WebAudioSound.audioContext, c2 = new XMLHttpRequest(), c2.open("GET", t2, true), c2.responseType = "arraybuffer", c2.onload = function() {
        h2.decodeAudioData(c2.response, function(t3) {
          o2.buffer = t3, o2.dispatchEvent(new n.Event(n.Event.LOAD));
        }, r2);
      }, c2.onerror = r2, c2.send(null)) : setTimeout(r2, 50), o2;
    }, n.Sound = t.AudioContext && n.ENV.USE_WEBAUDIO ? n.WebAudioSound : n.DOMSound, n.Easing = { LINEAR: function(t2, e2, n2, i2) {
      return n2 * t2 / i2 + e2;
    }, SWING: function(t2, e2, n2, i2) {
      return n2 * (0.5 - Math.cos(t2 / i2 * Math.PI) / 2) + e2;
    }, QUAD_EASEIN: function(t2, e2, n2, i2) {
      return n2 * (t2 /= i2) * t2 + e2;
    }, QUAD_EASEOUT: function(t2, e2, n2, i2) {
      return -n2 * (t2 /= i2) * (t2 - 2) + e2;
    }, QUAD_EASEINOUT: function(t2, e2, n2, i2) {
      return 1 > (t2 /= i2 / 2) ? n2 / 2 * t2 * t2 + e2 : -n2 / 2 * (--t2 * (t2 - 2) - 1) + e2;
    }, CUBIC_EASEIN: function(t2, e2, n2, i2) {
      return n2 * (t2 /= i2) * t2 * t2 + e2;
    }, CUBIC_EASEOUT: function(t2, e2, n2, i2) {
      return n2 * ((t2 = t2 / i2 - 1) * t2 * t2 + 1) + e2;
    }, CUBIC_EASEINOUT: function(t2, e2, n2, i2) {
      return 1 > (t2 /= i2 / 2) ? n2 / 2 * t2 * t2 * t2 + e2 : n2 / 2 * ((t2 -= 2) * t2 * t2 + 2) + e2;
    }, QUART_EASEIN: function(t2, e2, n2, i2) {
      return n2 * (t2 /= i2) * t2 * t2 * t2 + e2;
    }, QUART_EASEOUT: function(t2, e2, n2, i2) {
      return -n2 * ((t2 = t2 / i2 - 1) * t2 * t2 * t2 - 1) + e2;
    }, QUART_EASEINOUT: function(t2, e2, n2, i2) {
      return 1 > (t2 /= i2 / 2) ? n2 / 2 * t2 * t2 * t2 * t2 + e2 : -n2 / 2 * ((t2 -= 2) * t2 * t2 * t2 - 2) + e2;
    }, QUINT_EASEIN: function(t2, e2, n2, i2) {
      return n2 * (t2 /= i2) * t2 * t2 * t2 * t2 + e2;
    }, QUINT_EASEOUT: function(t2, e2, n2, i2) {
      return n2 * ((t2 = t2 / i2 - 1) * t2 * t2 * t2 * t2 + 1) + e2;
    }, QUINT_EASEINOUT: function(t2, e2, n2, i2) {
      return 1 > (t2 /= i2 / 2) ? n2 / 2 * t2 * t2 * t2 * t2 * t2 + e2 : n2 / 2 * ((t2 -= 2) * t2 * t2 * t2 * t2 + 2) + e2;
    }, SIN_EASEIN: function(t2, e2, n2, i2) {
      return -n2 * Math.cos(t2 / i2 * (Math.PI / 2)) + n2 + e2;
    }, SIN_EASEOUT: function(t2, e2, n2, i2) {
      return n2 * Math.sin(t2 / i2 * (Math.PI / 2)) + e2;
    }, SIN_EASEINOUT: function(t2, e2, n2, i2) {
      return -n2 / 2 * (Math.cos(Math.PI * t2 / i2) - 1) + e2;
    }, CIRC_EASEIN: function(t2, e2, n2, i2) {
      return -n2 * (Math.sqrt(1 - (t2 /= i2) * t2) - 1) + e2;
    }, CIRC_EASEOUT: function(t2, e2, n2, i2) {
      return n2 * Math.sqrt(1 - (t2 = t2 / i2 - 1) * t2) + e2;
    }, CIRC_EASEINOUT: function(t2, e2, n2, i2) {
      return 1 > (t2 /= i2 / 2) ? -n2 / 2 * (Math.sqrt(1 - t2 * t2) - 1) + e2 : n2 / 2 * (Math.sqrt(1 - (t2 -= 2) * t2) + 1) + e2;
    }, ELASTIC_EASEIN: function(t2, e2, n2, i2, s2, r2) {
      if (0 === t2)
        return e2;
      if (1 === (t2 /= i2))
        return e2 + n2;
      r2 || (r2 = 0.3 * i2);
      var a2;
      return !s2 || Math.abs(n2) > s2 ? (s2 = n2, a2 = r2 / 4) : a2 = r2 / (2 * Math.PI) * Math.asin(n2 / s2), -(s2 * Math.pow(2, 10 * (t2 -= 1)) * Math.sin((t2 * i2 - a2) * 2 * Math.PI / r2)) + e2;
    }, ELASTIC_EASEOUT: function(t2, e2, n2, i2, s2, r2) {
      if (0 === t2)
        return e2;
      if (1 === (t2 /= i2))
        return e2 + n2;
      r2 || (r2 = 0.3 * i2);
      var a2;
      return !s2 || Math.abs(n2) > s2 ? (s2 = n2, a2 = r2 / 4) : a2 = r2 / (2 * Math.PI) * Math.asin(n2 / s2), s2 * Math.pow(2, -10 * t2) * Math.sin((t2 * i2 - a2) * 2 * Math.PI / r2) + n2 + e2;
    }, ELASTIC_EASEINOUT: function(t2, e2, n2, i2, s2, r2) {
      if (0 === t2)
        return e2;
      if (2 === (t2 /= i2 / 2))
        return e2 + n2;
      r2 || (r2 = i2 * 0.3 * 1.5);
      var a2;
      return !s2 || Math.abs(n2) > s2 ? (s2 = n2, a2 = r2 / 4) : a2 = r2 / (2 * Math.PI) * Math.asin(n2 / s2), 1 > t2 ? -0.5 * s2 * Math.pow(2, 10 * (t2 -= 1)) * Math.sin((t2 * i2 - a2) * 2 * Math.PI / r2) + e2 : 0.5 * s2 * Math.pow(2, -10 * (t2 -= 1)) * Math.sin((t2 * i2 - a2) * 2 * Math.PI / r2) + n2 + e2;
    }, BOUNCE_EASEOUT: function(t2, e2, n2, i2) {
      return 1 / 2.75 > (t2 /= i2) ? n2 * 7.5625 * t2 * t2 + e2 : 2 / 2.75 > t2 ? n2 * (7.5625 * (t2 -= 1.5 / 2.75) * t2 + 0.75) + e2 : 2.5 / 2.75 > t2 ? n2 * (7.5625 * (t2 -= 2.25 / 2.75) * t2 + 0.9375) + e2 : n2 * (7.5625 * (t2 -= 2.625 / 2.75) * t2 + 0.984375) + e2;
    }, BOUNCE_EASEIN: function(t2, e2, i2, s2) {
      return i2 - n.Easing.BOUNCE_EASEOUT(s2 - t2, 0, i2, s2) + e2;
    }, BOUNCE_EASEINOUT: function(t2, e2, i2, s2) {
      return s2 / 2 > t2 ? 0.5 * n.Easing.BOUNCE_EASEIN(2 * t2, 0, i2, s2) + e2 : 0.5 * n.Easing.BOUNCE_EASEOUT(2 * t2 - s2, 0, i2, s2) + 0.5 * i2 + e2;
    }, BACK_EASEIN: function(t2, n2, i2, s2, r2) {
      return r2 === e && (r2 = 1.70158), i2 * (t2 /= s2) * t2 * ((r2 + 1) * t2 - r2) + n2;
    }, BACK_EASEOUT: function(t2, n2, i2, s2, r2) {
      return r2 === e && (r2 = 1.70158), i2 * ((t2 = t2 / s2 - 1) * t2 * ((r2 + 1) * t2 + r2) + 1) + n2;
    }, BACK_EASEINOUT: function(t2, n2, i2, s2, r2) {
      return r2 === e && (r2 = 1.70158), 1 > (t2 /= s2 / 2) ? i2 / 2 * t2 * t2 * (((r2 *= 1.525) + 1) * t2 - r2) + n2 : i2 / 2 * ((t2 -= 2) * t2 * (((r2 *= 1.525) + 1) * t2 + r2) + 2) + n2;
    }, EXPO_EASEIN: function(t2, e2, n2, i2) {
      return 0 === t2 ? e2 : n2 * Math.pow(2, 10 * (t2 / i2 - 1)) + e2;
    }, EXPO_EASEOUT: function(t2, e2, n2, i2) {
      return t2 === i2 ? e2 + n2 : n2 * (-Math.pow(2, -10 * t2 / i2) + 1) + e2;
    }, EXPO_EASEINOUT: function(t2, e2, n2, i2) {
      return 0 === t2 ? e2 : t2 === i2 ? e2 + n2 : 1 > (t2 /= i2 / 2) ? n2 / 2 * Math.pow(2, 10 * (t2 - 1)) + e2 : n2 / 2 * (-Math.pow(2, -10 * --t2) + 2) + e2;
    } }, n.ActionEventTarget = n.Class.create(n.EventTarget, { initialize: function() {
      n.EventTarget.apply(this, arguments);
    }, dispatchEvent: function(t2) {
      var e2 = this.node ? this.node : this;
      t2.target = e2, t2.localX = t2.x - e2._offsetX, t2.localY = t2.y - e2._offsetY, null != this["on" + t2.type] && this["on" + t2.type].call(e2, t2);
      var n2 = this._listeners[t2.type];
      if (null != n2) {
        n2 = n2.slice();
        for (var i2 = 0, s2 = n2.length; s2 > i2; i2++)
          n2[i2].call(e2, t2);
      }
    } }), n.Timeline = n.Class.create(n.EventTarget, { initialize: function(t2) {
      n.EventTarget.call(this), this.node = t2, this.queue = [], this.paused = false, this.looped = false, this.isFrameBased = true, this._parallel = null, this._activated = false, this.addEventListener(n.Event.ENTER_FRAME, this._onenterframe);
      var e2 = this;
      this._nodeEventListener = function(t3) {
        e2.dispatchEvent(t3);
      };
    }, _deactivateTimeline: function() {
      this._activated && (this._activated = false, this.node.removeEventListener("enterframe", this._nodeEventListener));
    }, _activateTimeline: function() {
      this._activated || this.paused || (this.node.addEventListener("enterframe", this._nodeEventListener), this._activated = true);
    }, _onenterframe: function(t2) {
      this.paused || this.tick(this.isFrameBased ? 1 : t2.elapsed);
    }, setFrameBased: function() {
      this.isFrameBased = true;
    }, setTimeBased: function() {
      this.isFrameBased = false;
    }, next: function(t2) {
      var i2, s2 = this.queue.shift();
      if (s2 && (i2 = new n.Event("actionend"), i2.timeline = this, s2.dispatchEvent(i2), i2 = new n.Event("removedfromtimeline"), i2.timeline = this, s2.dispatchEvent(i2), this.looped && this.add(s2)), 0 === this.queue.length)
        return this._deactivateTimeline(), e;
      if (t2 > 0 || this.queue[0] && 0 === this.queue[0].time) {
        var r2 = new n.Event("actiontick");
        r2.elapsed = t2, r2.timeline = this, this.queue[0].dispatchEvent(r2);
      }
    }, tick: function(t2) {
      if (this.queue.length > 0) {
        var e2 = this.queue[0];
        if (0 === e2.frame) {
          var i2;
          i2 = new n.Event("actionstart"), i2.timeline = this, e2.dispatchEvent(i2);
        }
        var s2 = new n.Event("actiontick");
        s2.timeline = this, s2.elapsed = t2, e2.dispatchEvent(s2);
      }
    }, add: function(t2) {
      this._activateTimeline(), this._parallel ? (this._parallel.actions.push(t2), this._parallel = null) : this.queue.push(t2), t2.frame = 0;
      var e2 = new n.Event("addedtotimeline");
      return e2.timeline = this, t2.dispatchEvent(e2), e2 = new n.Event("actionadded"), e2.action = t2, this.dispatchEvent(e2), this;
    }, action: function(t2) {
      return this.add(new n.Action(t2));
    }, tween: function(t2) {
      return this.add(new n.Tween(t2));
    }, clear: function() {
      var t2 = new n.Event("removedfromtimeline");
      t2.timeline = this;
      for (var e2 = 0, i2 = this.queue.length; i2 > e2; e2++)
        this.queue[e2].dispatchEvent(t2);
      return this.queue = [], this._deactivateTimeline(), this;
    }, skip: function(t2) {
      var e2 = new n.Event("enterframe");
      for (this.isFrameBased ? e2.elapsed = 1 : (e2.elapsed = t2, t2 = 1); t2--; )
        this.dispatchEvent(e2);
      return this;
    }, pause: function() {
      return this.paused || (this.paused = true, this._deactivateTimeline()), this;
    }, resume: function() {
      return this.paused && (this.paused = false, this._activateTimeline()), this;
    }, loop: function() {
      return this.looped = true, this;
    }, unloop: function() {
      return this.looped = false, this;
    }, delay: function(t2) {
      return this.action({ time: t2 });
    }, wait: function() {
      return this;
    }, then: function(t2) {
      return this.action({ onactiontick: function() {
        t2.call(this);
      }, time: 0 });
    }, exec: function(t2) {
      return this.then(t2);
    }, cue: function(t2) {
      var e2 = 0;
      for (var n2 in t2)
        t2.hasOwnProperty(n2) && (this.delay(n2 - e2), this.then(t2[n2]), e2 = n2);
      return this;
    }, repeat: function(t2, e2) {
      return this.action({ onactiontick: function() {
        t2.call(this);
      }, time: e2 });
    }, and: function() {
      var t2 = this.queue.pop();
      if (t2 instanceof n.ParallelAction)
        this._parallel = t2, this.queue.push(t2);
      else {
        var e2 = new n.ParallelAction();
        e2.actions.push(t2), this.queue.push(e2), this._parallel = e2;
      }
      return this;
    }, or: function() {
      return this;
    }, doAll: function() {
      return this;
    }, waitAll: function() {
      return this;
    }, waitUntil: function(t2) {
      return this.action({ onactiontick: function(e2) {
        t2.call(this) && e2.timeline.next();
      } });
    }, fadeTo: function(t2, e2, n2) {
      return this.tween({ opacity: t2, time: e2, easing: n2 });
    }, fadeIn: function(t2, e2) {
      return this.fadeTo(1, t2, e2);
    }, fadeOut: function(t2, e2) {
      return this.fadeTo(0, t2, e2);
    }, moveTo: function(t2, e2, n2, i2) {
      return this.tween({ x: t2, y: e2, time: n2, easing: i2 });
    }, moveX: function(t2, e2, n2) {
      return this.tween({ x: t2, time: e2, easing: n2 });
    }, moveY: function(t2, e2, n2) {
      return this.tween({ y: t2, time: e2, easing: n2 });
    }, moveBy: function(t2, e2, n2, i2) {
      return this.tween({ x: function() {
        return this.x + t2;
      }, y: function() {
        return this.y + e2;
      }, time: n2, easing: i2 });
    }, hide: function() {
      return this.then(function() {
        this.opacity = 0;
      });
    }, show: function() {
      return this.then(function() {
        this.opacity = 1;
      });
    }, removeFromScene: function() {
      return this.then(function() {
        this.parentNode.removeChild(this);
      });
    }, scaleTo: function(t2, e2, n2) {
      var i2, s2;
      return "number" == typeof n2 ? (i2 = arguments[0], s2 = arguments[1], e2 = arguments[2], n2 = arguments[3]) : i2 = s2 = t2, this.tween({ scaleX: i2, scaleY: s2, time: e2, easing: n2 });
    }, scaleBy: function(t2, e2, n2) {
      var i2, s2;
      return "number" == typeof n2 ? (i2 = arguments[0], s2 = arguments[1], e2 = arguments[2], n2 = arguments[3]) : i2 = s2 = t2, this.tween({ scaleX: function() {
        return this.scaleX * i2;
      }, scaleY: function() {
        return this.scaleY * s2;
      }, time: e2, easing: n2 });
    }, rotateTo: function(t2, e2, n2) {
      return this.tween({ rotation: t2, time: e2, easing: n2 });
    }, rotateBy: function(t2, e2, n2) {
      return this.tween({ rotation: function() {
        return this.rotation + t2;
      }, time: e2, easing: n2 });
    } }), n.Action = n.Class.create(n.ActionEventTarget, { initialize: function(t2) {
      n.ActionEventTarget.call(this), this.time = null, this.frame = 0;
      for (var e2 in t2)
        t2.hasOwnProperty(e2) && null != t2[e2] && (this[e2] = t2[e2]);
      var i2 = this;
      this.timeline = null, this.node = null, this.addEventListener(n.Event.ADDED_TO_TIMELINE, function(t3) {
        i2.timeline = t3.timeline, i2.node = t3.timeline.node, i2.frame = 0;
      }), this.addEventListener(n.Event.REMOVED_FROM_TIMELINE, function() {
        i2.timeline = null, i2.node = null, i2.frame = 0;
      }), this.addEventListener(n.Event.ACTION_TICK, function(t3) {
        var e3 = i2.time - (i2.frame + t3.elapsed);
        null != i2.time && 0 >= e3 ? (i2.frame = i2.time, t3.timeline.next(-e3)) : i2.frame += t3.elapsed;
      });
    } }), n.ParallelAction = n.Class.create(n.Action, { initialize: function(t2) {
      n.Action.call(this, t2), this.actions = [], this.endedActions = [];
      var e2 = this;
      this.addEventListener(n.Event.ACTION_START, function(t3) {
        for (var n2 = 0, i2 = e2.actions.length; i2 > n2; n2++)
          e2.actions[n2].dispatchEvent(t3);
      }), this.addEventListener(n.Event.ACTION_TICK, function(t3) {
        var i2, s2, r2 = { next: function() {
          var t4 = e2.actions[i2];
          e2.actions.splice(i2--, 1), s2 = e2.actions.length, e2.endedActions.push(t4);
          var r3 = new n.Event("actionend");
          r3.timeline = this, t4.dispatchEvent(r3), r3 = new n.Event("removedfromtimeline"), r3.timeline = this, t4.dispatchEvent(r3);
        } }, a2 = new n.Event("actiontick");
        for (a2.timeline = r2, a2.elapsed = t3.elapsed, i2 = 0, s2 = e2.actions.length; s2 > i2; i2++)
          e2.actions[i2].dispatchEvent(a2);
        0 === e2.actions.length && t3.timeline.next();
      }), this.addEventListener(n.Event.ADDED_TO_TIMELINE, function(t3) {
        for (var n2 = 0, i2 = e2.actions.length; i2 > n2; n2++)
          e2.actions[n2].dispatchEvent(t3);
      }), this.addEventListener(n.Event.REMOVED_FROM_TIMELINE, function() {
        e2.actions = e2.endedActions, e2.endedActions = [];
      });
    } }), n.Tween = n.Class.create(n.Action, { initialize: function(t2) {
      var i2 = {}, s2 = {};
      n.Action.call(this, t2), null == this.easing && (this.easing = n.Easing.LINEAR);
      var r2 = this;
      this.addEventListener(n.Event.ACTION_START, function() {
        var e2 = ["frame", "time", "callback", "onactiontick", "onactionstart", "onactionend"];
        for (var n2 in t2)
          if (t2.hasOwnProperty(n2)) {
            var a2;
            a2 = "function" == typeof t2[n2] ? t2[n2].call(r2.node) : t2[n2], -1 === e2.indexOf(n2) && (i2[n2] = r2.node[n2], s2[n2] = a2);
          }
      }), this.addEventListener(n.Event.ACTION_TICK, function(t3) {
        var n2 = 0 === r2.time ? 1 : r2.easing(Math.min(r2.time, r2.frame + t3.elapsed), 0, 1, r2.time) - r2.easing(r2.frame, 0, 1, r2.time);
        for (var a2 in s2)
          if (s2.hasOwnProperty(a2)) {
            if (this[a2] === e)
              continue;
            r2.node[a2] += (s2[a2] - i2[a2]) * n2, 1e-7 > Math.abs(r2.node[a2]) && (r2.node[a2] = 0);
          }
      });
    } });
  })(window);

  // js/viewer.js
  if (window.is_view) {
    let View2 = function() {
      function MapView() {
        var scene = new Scene();
        current = log[pointer];
        console.log(pointer);
        console.log(current);
        for (let y = 0; y < size_y; y++) {
          for (let x = 0; x < size_x; x++) {
            var object = new Sprite(32, 32);
            var img_path = "";
            switch (current.map_data[y][x]) {
              case 0:
                img_path = "/images/None.png";
                break;
              case 2:
                img_path = "/images/Block.png";
                break;
              case 3:
                img_path = "/images/Item.png";
                break;
            }
            object.image = core.assets[img_path];
            object.x = x * 32;
            object.y = y * 32;
            scene.addChild(object);
          }
        }
        var [cool_x, cool_y] = current.cool_pos;
        var [hot_x, hot_y] = current.hot_pos;
        cool_item = current.cool_item;
        hot_item = current.hot_item;
        if (pointer == log.length - 1) {
          end_caution = "game end !!";
        } else {
          end_caution = "";
        }
        var test_data = [`remain turn: ${turn}`, end_caution];
        test_data.forEach((elem, index) => {
          var label = new Label(elem);
          label.font = "24px Palatino";
          label.x = size_x * 32 + 10;
          label.y = 20 * index + 10;
          scene.addChild(label);
        });
        cool = new Sprite(32, 32);
        cool.image = core.assets["/images/Cool.png"];
        cool.x = cool_x * 32;
        cool.y = cool_y * 32;
        scene.addChild(cool);
        hot = new Sprite(32, 32);
        hot.image = core.assets["/images/Hot.png"];
        hot.x = hot_x * 32;
        hot.y = hot_y * 32;
        scene.addChild(hot);
        scene.addEventListener("enterframe", function() {
          if (core.input.right) {
            right_count++;
          }
          if (!nexted_flag) {
            right_count = 0;
          }
          if (core.input.right && right_count % 10 == 0) {
            if (pointer == log.length - 1) {
              end_caution = "game end!!";
            } else {
              end_caution = "";
              pointer += 2;
              turn = log[pointer].turn;
            }
            nexted_flag = true;
            MapView();
          }
          if (core.input.left) {
            left_count++;
          }
          if (!preved_flag) {
            left_count = 0;
          }
          if (core.input.left && left_count % 10 == 0 && pointer > 0) {
            end_caution = "";
            pointer -= 2;
            turn = log[pointer].turn;
            preved_flag = true;
            MapView();
          }
        });
        core.replaceScene(scene);
      }
      var pointer = 0;
      var result_text, end_caution;
      var cool_item = 0;
      var hot_item = 0;
      turn = log[0].turn;
      var [size_x, size_y] = log[0].map_size;
      console.log(`turn: ${turn}`);
      console.log(`map size x: ${size_x}`);
      console.log(`map size y: ${size_y}`);
      var core = new Core(960, 960);
      core.preload(["/images/None.png", "/images/Block.png", "/images/Item.png", "/images/Cool.png", "/images/Hot.png"]);
      core.onload = function() {
        MapView(0);
      };
      core.start();
    };
    View3 = View2;
    enchant();
    nexted_flag = false;
    preved_flag = false;
    right_count = 0;
    left_count = 0;
    point = 0;
    match_id = window.match_id;
    myHeaders = new Headers();
    requestOptions = {
      method: "GET",
      headers: myHeaders,
      redirect: "follow"
    };
    fetch(`/api/logs?match_id=${match_id}`, requestOptions).then((response) => response.json()).then((result) => {
      log = result.data;
      console.log(log);
      View2();
    });
    document.onkeyup = function(e) {
      if (e.key == "ArrowRight")
        nexted_flag = false;
      if (e.key == "ArrowLeft")
        preved_flag = false;
    };
  }
  var nexted_flag;
  var preved_flag;
  var right_count;
  var left_count;
  var point;
  var log;
  var turn;
  var cool;
  var hot;
  var match_id;
  var myHeaders;
  var requestOptions;
  var View3;

  // js/app.js
  module_default.plugin(module_default2);
  window.Alpine = module_default;
  module_default.start();
  var csrfToken = document.querySelector("meta[name='csrf-token']").getAttribute("content");
  var liveSocket = new LiveSocket("/live", Socket, {
    params: { _csrf_token: csrfToken },
    dom: {
      onBeforeElUpdated(from, to) {
        if (from._x_dataStack) {
          window.Alpine.clone(from, to);
        }
      }
    }
  });
  import_topbar.default.config({ barColors: { 0: "#29d" }, shadowColor: "rgba(0, 0, 0, .3)" });
  window.addEventListener("phx:page-loading-start", (_info) => import_topbar.default.show(300));
  window.addEventListener("phx:page-loading-stop", (_info) => import_topbar.default.hide());
  liveSocket.connect();
  window.liveSocket = liveSocket;
})();
/**
 * @license MIT
 * topbar 2.0.0, 2023-02-04
 * https://buunguyen.github.io/topbar
 * Copyright (c) 2021 Buu Nguyen
 */
//# sourceMappingURL=data:application/json;base64,
